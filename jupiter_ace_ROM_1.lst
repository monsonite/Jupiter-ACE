0001   0000             ; Disassembly of the file "C:\ACE\JupiterAce.rom"
0002   0000             ;
0003   0000             ; CPU Type: Z80
0004   0000             ;
0005   0000             ; Created with dZ80 1.50
0006   0000             ;
0007   0000             ; on Monday, 21 of January 2002 at 07:11 PM
0008   0000             ;
0009   0000             ; last updated 02-NOV-2002
0010   0000             ;
0011   0000             ; Cross-assembles to an 8K ROM file.
0012   0000             ;
0013   0000             ; Note. A Low-level Assembly Listing only.
0014   0000             
0015   0000             #define DEFB    .BYTE
0016   0000             #define DEFW    .WORD
0017   0000             #define DEFM    .TEXT
0018   0000             #define EQU     .EQU
0019   0000             #define ORG     .ORG
0020   0000             
0021   0000                     ORG     $0000
0022   0000             
0023   0000             ; -------------------
0024   0000             ; THE 'START' RESTART
0025   0000             ; -------------------
0026   0000             
0027   0000 F3          L0000:  DI                              ; disable interrupts.
0028   0001 21 00 3C            LD      HL,$3C00                ; start of 'User' RAM
0029   0004 3E FC               LD      A,$FC                   ; a test byte and 1K masking byte.
0030   0006 18 20               JR      L0028                   ; forward to continue at Part 2.
0031   0008             
0032   0008             ; -------------------
0033   0008             ; THE 'PRINT' RESTART
0034   0008             ; -------------------
0035   0008             
0036   0008 D9          L0008:  EXX                             ; preserve main registers.
0037   0009 DD CB 3E 5E         BIT     3,(IX+$3E)              ; test FLAGS for print destination.
0038   000D C3 EE 03            JP      L03EE                   ; forward to
0039   0010             
0040   0010             ; ---------------------------
0041   0010             ; THE 'STACK WORD DE' RESTART
0042   0010             ; ---------------------------
0043   0010             
0044   0010 2A 3B 3C    L0010:  LD      HL,($3C3B)              ; SPARE
0045   0013 73                  LD      (HL),E
0046   0014 23                  INC     HL
0047   0015 C3 5F 08            JP      L085F                   ;
0048   0018             
0049   0018             ; -------------------------
0050   0018             ; THE 'POP WORD DE' RESTART
0051   0018             ; -------------------------
0052   0018             
0053   0018             
0054   0018 2A 3B 3C    L0018:  LD      HL,($3C3B)              ; SPARE
0055   001B 2B                  DEC     HL
0056   001C 56                  LD      D,(HL)
0057   001D C3 59 08            JP      L0859                   ;
0058   0020             
0059   0020             ; -------------------
0060   0020             ; THE 'ERROR' RESTART
0061   0020             ; -------------------
0062   0020             
0063   0020 E1          L0020:  POP     HL
0064   0021 7E                  LD      A,(HL)
0065   0022 32 3D 3C            LD      ($3C3D),A               ; ERR_NO
0066   0025 C3 AD 00            JP      L00AD                   ;
0067   0028             
0068   0028             ; ------------------------------------
0069   0028             ; THE 'INITIALIZATION ROUTINE' Part 2.
0070   0028             ; ------------------------------------
0071   0028             
0072   0028 24          L0028:  INC     H                       ; increase high byte
0073   0029 77                  LD      (HL),A                  ; insert A value
0074   002A BE                  CP      (HL)                    ; compare to expected
0075   002B 28 FB               JR      Z,L0028                 ; loop back while RAM is populated.
0076   002D             
0077   002D A4                  AND     H                       ; limit to nearest 1K segment.
0078   002E 67                  LD      H,A                     ; place back in H.
0079   002F 22 18 3C            LD      ($3C18),HL              ; set system variable RAMTOP.
0080   0032 F9                  LD      SP,HL                   ; initialize the stack pointer.
0081   0033             
0082   0033             ; the Z80 instructions CALL, PUSH and POP can now be used.
0083   0033             
0084   0033 21 0D 01            LD      HL,L010D                ; prepare to copy the system variables
0085   0036                                                     ; initial state from ROM.
0086   0036 18 03               JR      L003B                   ; skip past the fixed-position restart.
0087   0038             
0088   0038             ; -----------------------
0089   0038             ; THE 'INTERRUPT' RESTART
0090   0038             ; -----------------------
0091   0038             
0092   0038 C3 3A 01    L0038:  JP      L013A                   ; jump to somewhere more convenient.
0093   003B             
0094   003B             ;------------------------------------------------------------------------------
0095   003B             ;
0096   003B             ; MEMORY MAP
0097   003B             ;
0098   003B             ; $0000 +======================================================+
0099   003B             ;       |                                                      |
0100   003B             ;       |                   ROM 8K                             |
0101   003B             ;       |                                     v $2300          |
0102   003B             ; $2000 +======================================================+ - - - - - -
0103   003B             ;       |       copy of $2400                 |0|<  cassette  >|
0104   003B             ; $2400 +-------------------------------------+-+--------------+
0105   003B             ;       |       VIDEO MEMORY 768 bytes        |0| PAD 254 bytes| 1K RAM
0106   003B             ; $2800 +-------------------------------------+-+--------------+
0107   003B             ;       |       copy of $2c00                 ^ $2700          |
0108   003B             ; $2C00 +------------------------------------------------------+
0109   003B             ;       |       CHARACTER SET - Write-Only                     | 1K RAM
0110   003B             ; $3000 +------------------------------------------------------+
0111   003B             ;       |       copy of $3c00                                  |
0112   003B             ; $3400 +------------------------------------------------------+
0113   003B             ;       |       copy of $3c00                                  |
0114   003B             ; $3800 +------------------------------------------------------+
0115   003B             ;       |       copy of $3c00                                  |
0116   003B             ; $3C00 +-------+----------------------------------------------+
0117   003B             ;       |SYSVARS| DICT {12} DATA STACK ->         <- RET STACK | 1K RAM
0118   003B             ; $4000 +=======+==============================================+ - - - - - -
0119   003B             ;       |                                                      |
0120   003B             ;                       48K AVAILABLE FOR EXPANSION.
0121   003B             ;       |                                                      |
0122   003B             ; $FFFF +======================================================+
0123   003B             ;
0124   003B             ; The Ace had an 8K ROM and was sold with 3K of RAM each byte of which had
0125   003B             ; at least two addresses and sometimes four addresses so the mapping of the
0126   003B             ; 3K of RAM was as above.
0127   003B             ; The 768 bytes of video memory is accessed by the ROM using addresses
0128   003B             ; $2400 - $26FF. This gives priority to the video circuitry which also needs
0129   003B             ; this information to build the TV picture. The byte at $2700 is set to zero
0130   003B             ; so that it is easy for the ROM to detect when it is at the end of the screen.
0131   003B             ; The 254 bytes remaining are the PAD - the workspace used by FORTH.
0132   003B             ; This same area is used by the tape recorder routines to assemble the tape
0133   003B             ; header information but since, for accurate tape timing, the FORTH ROM needs
0134   003B             ; priority over the video circuitry, then the ROM uses addresses $2301 - $23FF.
0135   003B             ;
0136   003B             ; Similarly the Character Set is written to by the ROM (and User) at the 1K
0137   003B             ; section starting at $2C00. The video circuitry accesses this using addresses
0138   003B             ; $2800 - $2BFF to build the TV picture. It is not possible for the ROM or User
0139   003B             ; to read back the information from either address so this precludes the saving
0140   003B             ; of character sets and writing a driver for a device like the ZX Printer.
0141   003B             ;
0142   003B             ; The final 1K or RAM has four addresses although it is normal to use addresses
0143   003B             ; $3C00 - $3FFF. The first sixty three bytes are the System Variables which
0144   003B             ; hold information like the number BASE and CONTEXT, and even the plotting
0145   003B             ; coordinates should the user wish to develop a word like DRAW to draw lines.
0146   003B             ;
0147   003B             ; Then comes the User Dictionary, the first word of which is "FORTH" which links
0148   003B             ; to the Dictionary in ROM. Next a gap of 12 bytes to allow for Data Stack
0149   003B             ; underflow and then the Data Stack itself which grows upwards.
0150   003B             ; At the opposite end of free memory is the Return Stack (machine stack) which
0151   003B             ; grows downwards.
0152   003B             
0153   003B             ; ------------------------------------
0154   003B             ; THE 'INITIALIZATION ROUTINE' Part 3.
0155   003B             ; ------------------------------------
0156   003B             
0157   003B 11 24 3C    L003B:  LD      DE,$3C24                ; destination system variable L_HALF
0158   003E 01 2D 00            LD      BC,$002D                ; number of bytes.
0159   0041 ED B0               LDIR                            ; copy initial state from ROM to RAM.
0160   0043             
0161   0043 DD 21 00 3C         LD      IX,$3C00                ; set IX to index the system variables.
0162   0047 FD 21 C8 04         LD      IY,L04C8                ; set IY to the SLOW return address.
0163   004B             
0164   004B CD 24 0A    L004B:  CALL    L0A24                   ; routine CLS.
0165   004E             
0166   004E AF                  XOR     A                       ; clear accumulator.
0167   004F             
0168   004F 32 00 27            LD      ($2700),A               ; make location after screen zero.
0169   0052             
0170   0052             ; There are 128 bit-mapped 8x8 characters.
0171   0052             ; Define the 8 Battenberg graphics ($10 to $17) from low byte of address.
0172   0052             ; This routine also sets the other characters $00 to $0F and $18 to $1F
0173   0052             ; to copies of this range. The inverse form of character $17 is used as the
0174   0052             ; normal cursor - character $97.
0175   0052             
0176   0052 21 00 2C    L0052:  LD      HL,$2C00                ; point to the start of the 1K write-
0177   0055                                                     ; only Character Set RAM.
0178   0055             
0179   0055 7D          L0055:  LD      A,L                     ; set A to low byte of address
0180   0056 E6 BF               AND     $BF                     ; AND %10111111
0181   0058 0F                  RRCA                            ; rotate
0182   0059 0F                  RRCA                            ; three times
0183   005A 0F                  RRCA                            ; to test bit 2
0184   005B 30 02               JR      NC,L005F                ; forward if not set.
0185   005D             
0186   005D 0F                  RRCA                            ; else rotate
0187   005E 0F                  RRCA                            ; twice more.
0188   005F             
0189   005F 0F          L005F:  RRCA                            ; set carry from bit (3) or (6)
0190   0060             
0191   0060 47                  LD      B,A
0192   0061             
0193   0061 9F                  SBC     A,A                     ; $00 or $FF
0194   0062 CB 18               RR      B
0195   0064 47                  LD      B,A
0196   0065 9F                  SBC     A,A
0197   0066 A8                  XOR     B
0198   0067 E6 F0               AND     $F0
0199   0069 A8                  XOR     B
0200   006A 77                  LD      (HL),A                  ; insert the byte.
0201   006B 2C                  INC     L                       ; increment low byte of address
0202   006C 20 E7               JR      NZ,L0055                ; loop back until the first 256 bytes
0203   006E                                                     ; have been filled with 32 repeating
0204   006E                                                     ; characters.
0205   006E             
0206   006E             ; Now copy the bit patterns at the end of this ROM to the last 768 bytes of
0207   006E             ; the Character RAM, filling in some blank bytes omitted to save ROM space.
0208   006E             ; This process starts at high memory and works downwards.
0209   006E             
0210   006E 11 FF 2F    L006E:  LD      DE,$2FFF                ; top of destination.
0211   0071 21 FB 1F            LD      HL,L1FFB                ; end of copyright character.
0212   0074 01 08 00            LD      BC,$0008                ; 8 characters
0213   0077             
0214   0077 ED B8               LDDR                            ; copy the  Â©  character
0215   0079             
0216   0079 EB                  EX      DE,HL                   ; switch pointers.
0217   007A             
0218   007A 3E 5F               LD      A,$5F                   ; set character counter to ninety five.
0219   007C                                                     ; i.e. %0101 1111
0220   007C                                                     ; bit 5 shows which 32-character sector
0221   007C                                                     ; we are in.
0222   007C             
0223   007C             ; enter a loop for the remaining characters supplying zero bytes as required.
0224   007C             
0225   007C 0E 07       L007C:  LD      C,$07                   ; set byte counter to seven.
0226   007E             
0227   007E CB 6F               BIT     5,A                     ; test bit 5 of the counter.
0228   0080 28 03               JR      Z,L0085                 ; forward if not in middle section
0229   0082                                                     ; which includes "[A-Z]"
0230   0082             
0231   0082 70                  LD      (HL),B                  ; else insert a zero byte.
0232   0083 2B                  DEC     HL                      ; decrement the destination address.
0233   0084 0D                  DEC     C                       ; and the byte counter.
0234   0085             
0235   0085 EB          L0085:  EX      DE,HL                   ; switch pointers.
0236   0086             
0237   0086 ED B8               LDDR                            ; copy the 5 or 6 characters.
0238   0088             
0239   0088 EB                  EX      DE,HL                   ; switch pointers.
0240   0089             
0241   0089 70                  LD      (HL),B                  ; always insert the blank top byte.
0242   008A 2B                  DEC     HL                      ; decrement the address.
0243   008B             
0244   008B 3D                  DEC     A                       ; decrement the character counter.
0245   008C             
0246   008C 20 EE               JR      NZ,L007C                ; back for all 95 characters.
0247   008E             
0248   008E ED 56               IM      1                       ; Select Interrupt Mode 1
0249   0090             
0250   0090 18 09               JR      L009B                   ; and then jump into the code for the
0251   0092                                                     ; QUIT word.
0252   0092             
0253   0092             
0254   0092             ; ---------------
0255   0092             ; THE 'QUIT' WORD
0256   0092             ; ---------------
0257   0092             ; (  --  )
0258   0092             ; Clears return stack, empties input buffer and returns control to the
0259   0092             ; keyboard.
0260   0092             
0261   0092 51 55 49    L0092:  DEFM    "QUI"                   ; 'name field'
0262   0095 D4                  DEFB    'T' + $80
0263   0096             
0264   0096 00 00       L0096:  DEFW    $0000                   ; 'link field' - end of linked list.
0265   0098             
0266   0098 04          L0098:  DEFB    $04                     ; 'name length field'
0267   0099             
0268   0099 9B 00       L0099:  DEFW    L009B                   ; 'code field'
0269   009B                                                     ; address of machine code for routine.
0270   009B             
0271   009B             ; ---
0272   009B             
0273   009B ED 7B 18 3C L009B:  LD      SP,($3C18)              ; set stack-pointer to RAMTOP.
0274   009F             
0275   009F FB                  EI                              ; Enable Interrupts.
0276   00A0             
0277   00A0 C3 F2 04            JP      L04F2                   ; jump forward to the main execution
0278   00A3                                                     ; loop.
0279   00A3             
0280   00A3             ; ----------------
0281   00A3             ; THE 'ABORT' WORD
0282   00A3             ; ----------------
0283   00A3             ; Clears the data and return stacks, deletes any incomplete definition
0284   00A3             ; left in the dictionary, prints 'ERROR' and the byte from address $3C3D
0285   00A3             ; if the byte is non-negative, empties the input buffer, and returns
0286   00A3             ; control to the keyboard.
0287   00A3             
0288   00A3             
0289   00A3 41 42 4F 52 L00A3:  DEFM    "ABOR"                  ; 'name field'
0290   00A7 D4                  DEFB    'T' + $80
0291   00A8             
0292   00A8 98 00               DEFW    L0098                   ; 'link field' to previous word QUIT.
0293   00AA             
0294   00AA 05          L00AA:  DEFB    $05                     ; 'name length field'
0295   00AB             
0296   00AB AD 00       L00AB:  DEFW    L00AD                   ; 'code field'
0297   00AD             
0298   00AD             ; ---
0299   00AD             
0300   00AD             ; -> also continuation of the error restart.
0301   00AD             
0302   00AD FD E5       L00AD:  PUSH    IY                      ; preserve current IY value slow/fast.
0303   00AF             
0304   00AF FD 21 B9 04         LD      IY,L04B9                ; set IY to FAST
0305   00B3                                                     ; now empty the data stack
0306   00B3 2A 37 3C            LD      HL,($3C37)              ; STKBOT
0307   00B6 22 3B 3C            LD      ($3C3B),HL              ; SPARE
0308   00B9 21 3E 3C            LD      HL,$3C3E                ; address FLAGS
0309   00BC 7E                  LD      A,(HL)                  ; fetch status from FLAGS.
0310   00BD E6 B3               AND     $B3                     ; AND %10110011
0311   00BF                                                     ; reset bit 2 - show definition complete
0312   00BF                                                     ; reset bit 3 - output to screen.
0313   00BF                                                     ; reset bit 6 - show in interpreter mode
0314   00BF CB 56               BIT     2,(HL)                  ; was there an incomplete definition ?
0315   00C1 77                  LD      (HL),A                  ; update FLAGS
0316   00C2 28 1A               JR      Z,L00DE                 ; forward if no incomplete word.
0317   00C4             
0318   00C4 CD B9 04    L00C4:  CALL    L04B9                   ; do forth
0319   00C7             
0320   00C7 90 04               DEFW    L0490                   ; dict          address of sv DICT
0321   00C9 B3 08               DEFW    L08B3                   ; @             value of sv DICT (d).
0322   00CB 4B 10               DEFW    L104B                   ; stk_data      d.         length field
0323   00CD 05                  DEFB    $05                     ; five          d, 5.
0324   00CE D2 0D               DEFW    L0DD2                   ; +             d+5.       code field
0325   00D0 6B 08               DEFW    L086B                   ; dup           d+5, d+5.
0326   00D2 10 16               DEFW    L1610                   ; prvcur        d+5.
0327   00D4 B5 15               DEFW    L15B5                   ; namefield     n.
0328   00D6 11 10               DEFW    L1011                   ; stackwrd      n.
0329   00D8 37 3C               DEFW    $3C37                   ; (stkbot)      n, stkbot.
0330   00DA C1 08               DEFW    L08C1                   ; !             .
0331   00DC 0E 1A               DEFW    L1A0E                   ; end-forth.    .
0332   00DE             
0333   00DE             ; at this stage the system variable STKBOT holds the address of the
0334   00DE             ; obsolete name field and the system variable CURRENT points to the
0335   00DE             ; address of the previous complete word - obtained from the old link field.
0336   00DE             
0337   00DE DD CB 3D 7E L00DE:  BIT     7,(IX+$3D)              ; test ERR_NO for normal value 255.
0338   00E2 20 1B               JR      NZ,L00FF                ; set-min then main-loop if OK.
0339   00E4             
0340   00E4 CD 08 18            CALL    L1808                   ; else pr-inline
0341   00E7             
0342   00E7             ; ---
0343   00E7             
0344   00E7 45 52 52 4F L00E7:  DEFM    "ERRO"                  ; the message "ERROR" with the last
0345   00EB D2                  DEFB    'R' + $80               ; character inverted.
0346   00EC             
0347   00EC             ; ---
0348   00EC             
0349   00EC CD B9 04    L00EC:  CALL    L04B9                   ; forth
0350   00EF             
0351   00EF 11 10               DEFW    L1011                   ; stack next word
0352   00F1 3D 3C               DEFW    $3C3D                   ; -> system variable ERR_NO
0353   00F3 96 08               DEFW    L0896                   ; C@            - fetch content byte
0354   00F5 B3 09               DEFW    L09B3                   ; .             - print it
0355   00F7 95 0A               DEFW    L0A95                   ; CR
0356   00F9 0E 1A               DEFW    L1A0E                   ; end-forth.
0357   00FB             
0358   00FB DD 36 3D FF         LD      (IX+$3D),$FF            ; set ERR_NO to 'No Error'
0359   00FF             
0360   00FF 2A 37 3C    L00FF:  LD      HL,($3C37)              ; fetch STKBOT
0361   0102 01 0C 00            LD      BC,$000C                ; allow twelve bytes for stack underflow
0362   0105 09                  ADD     HL,BC                   ; add the extra
0363   0106 22 3B 3C            LD      ($3C3B),HL              ; set SPARE
0364   0109 FD E1               POP     IY                      ; restore previous state of IY
0365   010B             
0366   010B 18 8E               JR      L009B                   ; rejoin main loop
0367   010D             
0368   010D             ; -------------------------
0369   010D             ; THE 'DEFAULT ENVIRONMENT'
0370   010D             ; -------------------------
0371   010D             ; This is the default environment that is copied from ROM to RAM as part of
0372   010D             ; the initialization process. This also contains the FORTH word FORTH definition
0373   010D             
0374   010D E0 26       L010D:  DEFW    $26E0                   ; L_HALF
0375   010F             
0376   010F 00                  DEFB    $00                     ; KEYCOD
0377   0110 00                  DEFB    $00                     ; KEYCNT copy the 32 bytes.
0378   0111 00                  DEFB    $00                     ; STATIN
0379   0112 00 00               DEFW    $0000                   ; EXWRCH
0380   0114 00                  DEFB    $00                     ; FRAMES
0381   0115 00                  DEFB    $00                     ; FRAMES
0382   0116 00                  DEFB    $00                     ; FRAMES
0383   0117 00                  DEFB    $00                     ; FRAMES
0384   0118 00                  DEFB    $00                     ; XCOORD
0385   0119 00                  DEFB    $00                     ; YCOORD
0386   011A 4C 3C               DEFW    $3C4C                   ; CURRENT
0387   011C 4C 3C               DEFW    $3C4C                   ; CONTEXT
0388   011E 4F 3C               DEFW    $3C4F                   ; VOCLNK
0389   0120 51 3C               DEFW    $3C51                   ; STKBOT
0390   0122 45 3C               DEFW    $3C45                   ; DICT
0391   0124 5D 3C               DEFW    $3C5D                   ; SPARE
0392   0126 FF                  DEFB    $FF                     ; ERR_NO
0393   0127 00                  DEFB    $00                     ; FLAGS
0394   0128 0A                  DEFB    $0A                     ; BASE
0395   0129             
0396   0129             ; FORTH
0397   0129             
0398   0129 46 4F 52 54         DEFM    "FORT"                  ; The 'name field'
0399   012D C8                  DEFB    'H' + $80               ; FORTH
0400   012E             
0401   012E             
0402   012E 00 00               DEFW    $0000                   ; length field - filled when next word
0403   0130                                                     ; is defined.
0404   0130 FF 1F               DEFW    L1FFF                   ; link field copied to $3C49.
0405   0132 05                  DEFB    $05                     ; name length field
0406   0133 B5 11               DEFW    L11B5                   ; code field
0407   0135 49 3C               DEFW    $3C49                   ; address of parameters
0408   0137 00                  DEFB    $00                     ; VOCLNK                        [$3C4F]
0409   0138 00                  DEFB    $00                     ; - link to next vocabulary.
0410   0139 00                  DEFB    $00                     ; last byte to be copied.    to [$3C51]
0411   013A             
0412   013A             ; -----------------------------------------------
0413   013A             ; THE 'CONTINUATION OF THE Z80 INTERRUPT' ROUTINE
0414   013A             ; -----------------------------------------------
0415   013A             ; The destination of the jump at $0038.
0416   013A             ; Begin by saving both accumulators and the 3 main registers.
0417   013A             
0418   013A F5          L013A:  PUSH    AF                      ; preserve both accumulators
0419   013B 08                  EX      AF,AF'                  ;
0420   013C F5                  PUSH    AF                      ;
0421   013D             
0422   013D C5                  PUSH    BC                      ; and main registers.
0423   013E D5                  PUSH    DE                      ;
0424   013F E5                  PUSH    HL                      ;
0425   0140             
0426   0140             ; Now wait for 62 * 12 clock cycles. ( To avoid flicker perhaps? ).
0427   0140             
0428   0140 06 3E               LD      B,$3E                   ; delay counter.
0429   0142             
0430   0142 10 FE       L0142:  DJNZ    L0142                   ; self loop for delay
0431   0144             
0432   0144             ; Increment the 4-byte frames counter for use as a system clock.
0433   0144             
0434   0144 21 2B 3C            LD      HL,$3C2B                ; FRAMES1
0435   0147             
0436   0147 34          L0147:  INC     (HL)                    ; increment timer.
0437   0148 23                  INC     HL                      ; next significant byte of four.
0438   0149 28 FC               JR      Z,L0147                 ; loop back if the value wrapped back
0439   014B                                                     ; to zero.
0440   014B             
0441   014B             ; Note. as manual points out, there is no actual check on this and if
0442   014B             ; you leave your Ace switched on for 2.75 years it will advance to the
0443   014B             ; following system variables although it takes several millennia to advance
0444   014B             ; through the screen coordinates.
0445   014B             
0446   014B             ; Now read the keyboard and if no new key then exit after restoring the
0447   014B             ; preserved registers.
0448   014B             
0449   014B CD 10 03            CALL    L0310                   ; routine KEYBOARD.
0450   014E             
0451   014E 21 28 3C            LD      HL,$3C28                ; address system variable STATIN
0452   0151             
0453   0151 CB 46               BIT     0,(HL)                  ; new key?
0454   0153 28 21               JR      Z,L0176                 ; forward if not to RESTORE/EXIT
0455   0155             
0456   0155 A7                  AND     A                       ; zero key code ?
0457   0156 28 1E               JR      Z,L0176                 ; forward if so to EXIT.
0458   0158             
0459   0158 FE 20               CP      $20                     ; compare to SPACE
0460   015A 38 14               JR      C,L0170                 ; forward if less as an Editing Key.
0461   015C             
0462   015C CB 4E               BIT     1,(HL)                  ; CAPS shift?
0463   015E C4 07 08            CALL    NZ,L0807                ; routine TO_UPPER
0464   0161             
0465   0161 CB 56               BIT     2,(HL)                  ; GRAPHICS mode?
0466   0163 28 02               JR      Z,L0167                 ; skip forward if not
0467   0165             
0468   0165 E6 9F               AND     $9F                     ; convert to one of 8 mosaic characters
0469   0167             
0470   0167 CB 5E       L0167:  BIT     3,(HL)                  ; INVERSE mode?
0471   0169 28 02               JR      Z,L016D                 ; forward if not.
0472   016B             
0473   016B F6 80               OR      $80                     ; set bit 7 to make character inverse.
0474   016D             
0475   016D CD 96 01    L016D:  CALL    L0196                   ; routine pr_buffer
0476   0170             
0477   0170 CD E6 01    L0170:  CALL    L01E6                   ; routine EDIT_KEY
0478   0173 CD 82 02            CALL    L0282                   ; routine pr_cursor
0479   0176             
0480   0176             ; Before exiting restore the preserved registers.
0481   0176             
0482   0176 E1          L0176:  POP     HL                      ;
0483   0177 D1                  POP     DE                      ;
0484   0178 C1                  POP     BC                      ;
0485   0179 F1                  POP     AF                      ;
0486   017A 08                  EX      AF,AF'                  ;
0487   017B F1                  POP     AF                      ;
0488   017C             
0489   017C FB                  EI                              ; Enable Interrupts
0490   017D             
0491   017D C9                  RET                             ; return.
0492   017E             
0493   017E             ; -----------------------------------
0494   017E             ; THE 'PRINT to LOWER SCREEN' ROUTINE
0495   017E             ; -----------------------------------
0496   017E             
0497   017E FE 0D       L017E:  CP      $0D                     ; carriage return?
0498   0180 20 14               JR      NZ,L0196                ; forward if not
0499   0182             
0500   0182             ; a carriage return to input buffer i.e. lower screen memory.
0501   0182             
0502   0182 21 00 27            LD      HL,$2700                ; set pointer to location after the
0503   0185                                                     ; input buffer.
0504   0185             
0505   0185 22 22 3C            LD      ($3C22),HL              ; set ENDBUF - end of logical line
0506   0188 22 20 3C            LD      ($3C20),HL              ; set the CURSOR
0507   018B             
0508   018B AF                  XOR     A                       ; clear A
0509   018C             
0510   018C CD 98 01            CALL    L0198                   ; print character zero.
0511   018F             
0512   018F 21 E0 26            LD      HL,$26E0                ; left hand position of bottom line.
0513   0192 22 1E 3C            LD      ($3C1E),HL              ; set INSCRN to this position.
0514   0195 C9                  RET                             ; return.
0515   0196             
0516   0196             ; ---------------------------------------
0517   0196             ; THE 'PRINT CHARACTER TO BUFFER' ROUTINE
0518   0196             ; ---------------------------------------
0519   0196             
0520   0196 A7          L0196:  AND     A                       ; check for zero character
0521   0197 C8                  RET     Z                       ; return if so.
0522   0198             
0523   0198             ; => also called from previous routine only to print a zero skipping above test.
0524   0198             
0525   0198 08          L0198:  EX      AF,AF'                  ; preserve the output character.
0526   0199             
0527   0199 2A 22 3C            LD      HL,($3C22)              ; fetch ENDBUF end of logical line
0528   019C 7E                  LD      A,(HL)                  ; fetch character from position
0529   019D A7                  AND     A                       ; is it zero ?
0530   019E 28 06               JR      Z,L01A6                 ; skip forward if so.
0531   01A0             
0532   01A0             ; else lower screen scrolling is required.
0533   01A0             
0534   01A0 11 00 D9            LD      DE,$D900                ; $0000 - $2700
0535   01A3 19                  ADD     HL,DE                   ; test if position is within video RAM
0536   01A4 30 28               JR      NC,L01CE                ; forward if < $26FF
0537   01A6             
0538   01A6             ; now check that the limit of 22 lines in lower screen is not exceeded.
0539   01A6             
0540   01A6 ED 5B 24 3C L01A6:  LD      DE,($3C24)              ; fetch start of buffer from L_HALF
0541   01AA 21 A0 DB            LD      HL,$DBA0                ; $0000 - $2460
0542   01AD 19                  ADD     HL,DE                   ;
0543   01AE 30 34               JR      NC,L01E4                ; forward to exit if buffer full.
0544   01B0             
0545   01B0             
0546   01B0 2A 1C 3C            LD      HL,($3C1C)              ; fetch position SCRPOS for upper screen
0547   01B3 01 20 00            LD      BC,$0020                ; allow an extra 32 characters - 1 line.
0548   01B6 09                  ADD     HL,BC                   ;
0549   01B7 ED 52               SBC     HL,DE                   ; subtract the start of input buffer
0550   01B9 D5                  PUSH    DE                      ; and save the L_HALF value
0551   01BA             
0552   01BA D4 21 04            CALL    NC,L0421                ; routine to scroll upper display.
0553   01BD             
0554   01BD CD B0 02            CALL    L02B0                   ; find zerobyte loc in HL
0555   01C0             
0556   01C0 D1                  POP     DE                      ; retrieve the L_HALF value
0557   01C1             
0558   01C1 CD 2F 04            CALL    L042F                   ; routine scroll and blank
0559   01C4             
0560   01C4             ; The four system variables INSCRN, CURSOR, ENDBUF and L_HALF are each
0561   01C4             ; reduced by 32 bytes a screen line.
0562   01C4             
0563   01C4 21 1E 3C            LD      HL,$3C1E                ; address INSCRN the left-hand location
0564   01C7                                                     ; of the current input line.
0565   01C7             
0566   01C7 06 04               LD      B,$04                   ; four system variables to update
0567   01C9             
0568   01C9 CD 43 04    L01C9:  CALL    L0443                   ; routine SCR-PTRS
0569   01CC             
0570   01CC 10 FB               DJNZ    L01C9                   ; repeat for all four pointers.
0571   01CE             
0572   01CE             ; ok to print
0573   01CE             
0574   01CE CD 02 03    L01CE:  CALL    L0302                   ; routine find characters to EOL.
0575   01D1             
0576   01D1 54                  LD      D,H                     ; HL is end of line
0577   01D2 5D                  LD      E,L                     ; transfer to DE register.
0578   01D3 23                  INC     HL                      ; increment
0579   01D4 22 22 3C            LD      ($3C22),HL              ; update ENDBUF
0580   01D7 2B                  DEC     HL                      ; decrement
0581   01D8 2B                  DEC     HL                      ; so HL = DE -1
0582   01D9             
0583   01D9 28 02               JR      Z,L01DD                 ; skip if BC zero.
0584   01DB             
0585   01DB ED B8               LDDR                            ; else move the characters.
0586   01DD             
0587   01DD 08          L01DD:  EX      AF,AF'                  ; restore the output character.
0588   01DE 12                  LD      (DE),A                  ; insert at screen position.
0589   01DF                                                     ; (a zero if CR lower)
0590   01DF 13                  INC     DE                      ; next character position
0591   01E0 ED 53 20 3C         LD      ($3C20),DE              ; update CURSOR
0592   01E4             
0593   01E4 AF          L01E4:  XOR     A                       ; ?
0594   01E5 C9                  RET                             ; return.
0595   01E6             
0596   01E6             ; -------------------------
0597   01E6             ; THE 'EDIT KEY' SUBROUTINE
0598   01E6             ; -------------------------
0599   01E6             
0600   01E6 21 F0 01    L01E6:  LD      HL,L01F0                ; address the EDIT KEYS table.
0601   01E9             
0602   01E9 16 00               LD      D,$00                   ; prepare to index by one byte.
0603   01EB 5F                  LD      E,A                     ; character code to E.
0604   01EC 19                  ADD     HL,DE                   ; index into the table.
0605   01ED             
0606   01ED 5E                  LD      E,(HL)                  ; pick up required offset to the
0607   01EE                                                     ; handling routine.
0608   01EE             
0609   01EE 19                  ADD     HL,DE                   ; add to the current address.
0610   01EF E9                  JP      (HL)                    ; exit via the routine.
0611   01F0             
0612   01F0             ; ---------------------
0613   01F0             ; THE 'EDIT KEYS' TABLE
0614   01F0             ; ---------------------
0615   01F0             
0616   01F0 20          L01F0:  DEFB    $20             ; L0210         $00     - RET
0617   01F1 13          L01F1:  DEFB    $13             ; L0204         $01     - LEFT
0618   01F2 0C          L01F2:  DEFB    $0C             ; L01FE         $02     - CAPS
0619   01F3 1E          L01F3:  DEFB    $1E             ; L0211         $03     - RIGHT
0620   01F4 0A          L01F4:  DEFB    $0A             ; L01FE         $04     - GRAPH
0621   01F5 37          L01F5:  DEFB    $37             ; L022C         $05     - DEL
0622   01F6 1A          L01F6:  DEFB    $1A             ; L0210         $06     - RET
0623   01F7 50          L01F7:  DEFB    $50             ; L0247         $07     - UP
0624   01F8 06          L01F8:  DEFB    $06             ; L01FE         $08     - INV
0625   01F9 9C          L01F9:  DEFB    $9C             ; L0295         $09     - DOWN
0626   01FA C9          L01FA:  DEFB    $C9             ; L02C3         $0A     - DEL LINE
0627   01FB 15          L01FB:  DEFB    $15             ; L0210         $0B     - RET
0628   01FC 14          L01FC:  DEFB    $14             ; L0210         $0C     - RET
0629   01FD D3          L01FD:  DEFB    $D3             ; L02D0         $0D     - KEY-ENTER
0630   01FE             
0631   01FE             ; -------------------------------
0632   01FE             ; THE 'TOGGLE STATUS BIT' ROUTINE
0633   01FE             ; -------------------------------
0634   01FE             ; The keycodes have been cleverly mapped to individual bits of the STATIN
0635   01FE             ; system variable so this simple routine maintains all three status bits.
0636   01FE             ; KEY '2' - CAPS SHIFT, '4' - GRAPHICS, '8' - INVERSE VIDEO.
0637   01FE             
0638   01FE 21 28 3C    L01FE:  LD      HL,$3C28                ; system variable STATIN
0639   0201 AE                  XOR     (HL)                    ; toggle the single relevant bit.
0640   0202 77                  LD      (HL),A                  ; put back.
0641   0203 C9                  RET                             ; return.
0642   0204             
0643   0204             ; ----------------------------
0644   0204             ; THE 'CURSOR LEFT' SUBROUTINE
0645   0204             ; ----------------------------
0646   0204             ; this subroutine moves the cursor to the left unless the character at that
0647   0204             ; position is zero.
0648   0204             
0649   0204 2A 20 3C    L0204:  LD      HL,($3C20)              ; fetch CURSOR.
0650   0207 2B                  DEC     HL                      ; decrement value.
0651   0208 7E                  LD      A,(HL)                  ; fetch character at new position.
0652   0209 A7                  AND     A                       ; test for zero. (cr)
0653   020A C8                  RET     Z                       ; return if so.                  >>
0654   020B             
0655   020B 22 20 3C            LD      ($3C20),HL              ; else update CURSOR
0656   020E 23                  INC     HL                      ; step back
0657   020F 77                  LD      (HL),A                  ; and put character that was at new
0658   0210                                                     ; cursor position where cursor is now.
0659   0210             
0660   0210 C9          L0210:  RET                             ; return.
0661   0211             
0662   0211             ; Note. various unallocated keys in the EDIT KEYS table point to the
0663   0211             ; above RET instruction.
0664   0211             
0665   0211             ; -----------------------------
0666   0211             ; THE 'CURSOR RIGHT' SUBROUTINE
0667   0211             ; -----------------------------
0668   0211             
0669   0211 2A 20 3C    L0211:  LD      HL,($3C20)              ; fetch CURSOR position
0670   0214 23                  INC     HL                      ; and increment it.
0671   0215             
0672   0215 ED 5B 22 3C         LD      DE,($3C22)              ; fetch ENDBUF - end of current line.
0673   0219 A7                  AND     A                       ; prepare to subtract.
0674   021A ED 52               SBC     HL,DE                   ; test
0675   021C C8                  RET     Z                       ; return if zero - CURSOR is at ENDBUF
0676   021D             
0677   021D 19                  ADD     HL,DE                   ; else reform the pointers.
0678   021E 22 20 3C            LD      ($3C20),HL              ; update CURSOR
0679   0221 7E                  LD      A,(HL)                  ; fetch character at new position.
0680   0222 2B                  DEC     HL                      ; decrement
0681   0223 77                  LD      (HL),A                  ; and insert where cursor was.
0682   0224 C9                  RET                             ; ret.
0683   0225             
0684   0225             ; ---------------------------
0685   0225             ; THE 'DELETE CURSOR' ROUTINE
0686   0225             ; ---------------------------
0687   0225             ; Moves cursor position to right and then continues into DEL-CHAR
0688   0225             
0689   0225 2A 20 3C    L0225:  LD      HL,($3C20)              ; fetch CURSOR
0690   0228 23                  INC     HL                      ; increment position.
0691   0229 22 20 3C            LD      ($3C20),HL              ; update CURSOR
0692   022C             
0693   022C             
0694   022C             ; ------------------------------
0695   022C             ; THE 'DELETE CHARACTER' ROUTINE
0696   022C             ; ------------------------------
0697   022C             
0698   022C CD 02 03    L022C:  CALL    L0302                   ; routine finds characters to EOL.
0699   022F             
0700   022F 62                  LD      H,D                     ; transfer CURSOR position DE to HL.
0701   0230 6B                  LD      L,E                     ;
0702   0231 1B                  DEC     DE                      ; decrement DE
0703   0232 1A                  LD      A,(DE)                  ; fetch character to left of original
0704   0233                                                     ; cursor.
0705   0233 A7                  AND     A                       ; test for zero.
0706   0234 C8                  RET     Z                       ; return if so.                 >>
0707   0235             
0708   0235 ED 53 20 3C         LD      ($3C20),DE              ; else update CURSOR
0709   0239 78                  LD      A,B                     ; check for count of characters
0710   023A B1                  OR      C                       ; being zero
0711   023B 28 02               JR      Z,L023F                 ; skip if so.
0712   023D             
0713   023D ED B0       L023D:  LDIR                            ; else shift characters to left.
0714   023F             
0715   023F 2B          L023F:  DEC     HL                      ; decrement HL so that points to end -
0716   0240                                                     ; last position on the logical line.
0717   0240 36 20               LD      (HL),$20                ; insert a space.
0718   0242 22 22 3C            LD      ($3C22),HL              ; set ENDBUF
0719   0245 0C                  INC     C                       ; reset zero flag??
0720   0246 C9                  RET                             ; return.
0721   0247             
0722   0247             ; -----------------------
0723   0247             ; THE 'CURSOR UP' ROUTINE
0724   0247             ; -----------------------
0725   0247             ; When the cursor is moved up while editing a multi-line word definition,
0726   0247             ; then the cursor is first moved to the left of the screen abutting the
0727   0247             ; character zeros at the leftmost position.
0728   0247             ; These zero characters appear as spaces but mark the beginning of each logical
0729   0247             ; line. A logical line may, for instance if it contains a text item, extend over
0730   0247             ; several physical screen lines.
0731   0247             
0732   0247 CD 04 02    L0247:  CALL    L0204                   ; routine CURSOR-LEFT
0733   024A 28 08               JR      Z,L0254                 ; skip forward if not possible.
0734   024C             
0735   024C             ; else move left by thirty two positions. This may achieve a vertical move if
0736   024C             ; attempted when a word is first being entered. Alternatively if one of the
0737   024C             ; calls to cursor left fails having encountered a zero, then all subsequent
0738   024C             ; calls will fail. The routine will return with the cursor adjacent to the zero.
0739   024C             
0740   024C 06 1F               LD      B,$1F                   ; count 31 decimal
0741   024E CD 04 02    L024E:  CALL    L0204                   ; move cursor left thirty one times.
0742   0251 10 FB               DJNZ    L024E                   ; makes thirty two moves counting first
0743   0253             
0744   0253 C9                  RET                             ; return.
0745   0254             
0746   0254             ; ---
0747   0254             
0748   0254 2A 1E 3C    L0254:  LD      HL,($3C1E)              ; fetch INSCRN start of current line.
0749   0257 ED 5B 24 3C         LD      DE,($3C24)              ; fetch L_HALF start of buffer.
0750   025B A7                  AND     A                       ; reset carry for
0751   025C ED 52               SBC     HL,DE                   ; true subtraction.
0752   025E C8                  RET     Z                       ; return if at beginning of input buffer
0753   025F             
0754   025F CD 25 02            CALL    L0225                   ; routine DEL-CURSOR
0755   0262             
0756   0262 2A 1E 3C            LD      HL,($3C1E)              ; fetch INSCRN leftmost location of
0757   0265                                                     ; current line.
0758   0265 11 E0 FF            LD      DE,$FFE0                ; make DE minus thirty two.
0759   0268 AF                  XOR     A                       ; clear accumulator to zero.
0760   0269             
0761   0269 19          L0269:  ADD     HL,DE                   ; subtract 32
0762   026A BE                  CP      (HL)                    ; compare contents to zero
0763   026B                                                     ; ( i.e. prev (cr) or buffer start?)
0764   026B 20 FC               JR      NZ,L0269                ; loop back until HL holds zero.
0765   026D             
0766   026D 22 1E 3C            LD      ($3C1E),HL              ; update INSCRN
0767   0270             
0768   0270 CD F4 02            CALL    L02F4                   ; find endbuf
0769   0273             
0770   0273 22 20 3C            LD      ($3C20),HL              ; set CURSOR
0771   0276             
0772   0276             ; ----------
0773   0276             ; PR_CURSOR
0774   0276             ; ----------
0775   0276             
0776   0276 3E A0       L0276:  LD      A,$A0                   ; inverse space - so solid square
0777   0278             
0778   0278 CD 7E 01            CALL    L017E                   ; routine PR_LOWER
0779   027B             
0780   027B 2A 20 3C            LD      HL,($3C20)              ; CURSOR
0781   027E 2B                  DEC     HL
0782   027F 22 20 3C            LD      ($3C20),HL              ; CURSOR
0783   0282             
0784   0282             ; -> from interrupt
0785   0282 2A 20 3C    L0282:  LD      HL,($3C20)              ; CURSOR
0786   0285             
0787   0285 3A 28 3C            LD      A,($3C28)               ; STATIN
0788   0288 1F                  RRA                             ; ignore bit 0
0789   0289 36 97               LD      (HL),$97                ; pixel cursor.
0790   028B 1F                  RRA                             ; test bit 1 - CAPS
0791   028C 30 02               JR      NC,L0290                ; forward if no CAPS SHIFT
0792   028E             
0793   028E 36 C3               LD      (HL),$C3                ; inverse [C] cursor.
0794   0290             
0795   0290 1F          L0290:  RRA                             ; test bit 2 - GRAPHICS.
0796   0291 D0                  RET     NC                      ; return if not
0797   0292             
0798   0292 36 C7       L0292:  LD      (HL),$C7                ; inverse [G] cursor.
0799   0294 C9                  RET                             ; return
0800   0295             
0801   0295             ; -------------------------
0802   0295             ; THE 'CURSOR DOWN' ROUTINE
0803   0295             ; -------------------------
0804   0295             
0805   0295             
0806   0295 CD 11 02    L0295:  CALL    L0211                   ; routine CURSOR RIGHT
0807   0298 28 08               JR      Z,L02A2                 ; forward if not possible.
0808   029A             
0809   029A 06 1F               LD      B,$1F                   ; set counter to thirty one.
0810   029C             
0811   029C CD 11 02    L029C:  CALL    L0211                   ; routine CURSOR RIGHT
0812   029F 10 FB               DJNZ    L029C                   ; thirty two moves altogether.
0813   02A1 C9                  RET                             ; return.
0814   02A2             
0815   02A2             ; ---
0816   02A2             
0817   02A2 CD B0 02    L02A2:  CALL    L02B0                   ; find zerobyte
0818   02A5 E0                  RET     PO                      ; return if    found
0819   02A6             
0820   02A6 E5                  PUSH    HL                      ; save position
0821   02A7 CD 25 02            CALL    L0225                   ; routine DEL-CURSOR
0822   02AA E1                  POP     HL                      ; retrieve position.
0823   02AB CD ED 02            CALL    L02ED                   ; set logical line
0824   02AE 18 C6               JR      L0276                   ; back to exit via pr_cursor.
0825   02B0             
0826   02B0             ; ---
0827   02B0             ; find zerobyte
0828   02B0             ; ---
0829   02B0             ; -> called 5 times
0830   02B0             
0831   02B0 21 00 27    L02B0:  LD      HL,$2700                ; this location is always zero.
0832   02B3                                                     ; the byte following video RAM.
0833   02B3 ED 5B 1E 3C         LD      DE,($3C1E)              ; INSCRN        e.g. $26E0
0834   02B7             
0835   02B7 A7                  AND     A                       ; prepare for true subtraction
0836   02B8             
0837   02B8 ED 52               SBC     HL,DE                   ; subtract to give number of chars
0838   02BA             
0839   02BA 44                  LD      B,H                     ; transfer count to
0840   02BB 4D                  LD      C,L                     ; the BC register pair.
0841   02BC             
0842   02BC EB                  EX      DE,HL                   ; transfer INSCR value to HL.
0843   02BD             
0844   02BD 23                  INC     HL                      ; start next location
0845   02BE AF                  XOR     A                       ; search for a zero character.
0846   02BF             
0847   02BF ED B1               CPIR                            ; at most BC locations.
0848   02C1                                                     ; sets P/O flag if BC!=0
0849   02C1             
0850   02C1 2B                  DEC     HL                      ; step back to last non-zero
0851   02C2 C9                  RET                             ; return.
0852   02C3             
0853   02C3             ; -------------------------
0854   02C3             ; THE 'DELETE LINE' ROUTINE
0855   02C3             ; -------------------------
0856   02C3             ; CHR$ 10
0857   02C3             
0858   02C3 2A 22 3C    L02C3:  LD      HL,($3C22)              ; ENDBUF
0859   02C6 2B                  DEC     HL                      ;
0860   02C7 22 20 3C            LD      ($3C20),HL              ; CURSOR
0861   02CA             
0862   02CA CD 2C 02    L02CA:  CALL    L022C                   ; KEY-DEL
0863   02CD 20 FB               JR      NZ,L02CA                ; repeat
0864   02CF             
0865   02CF C9                  RET                             ; return.
0866   02D0             
0867   02D0             ; --------------------------
0868   02D0             ; THE 'KEY-ENTER' SUBROUTINE
0869   02D0             ; --------------------------
0870   02D0             
0871   02D0 21 28 3C    L02D0:  LD      HL,$3C28                ; STATIN
0872   02D3 CB EE               SET     5,(HL)                  ; signal new key.
0873   02D5 CB 86               RES     0,(HL)                  ; reset new key flag
0874   02D7 C9                  RET                             ; return.
0875   02D8             
0876   02D8             
0877   02D8             ; ------------------------
0878   02D8             ; THE 'SET BUFFER' ROUTINE
0879   02D8             ; ------------------------
0880   02D8             ; called by LIST, QUERY
0881   02D8             
0882   02D8 21 00 27    L02D8:  LD      HL,$2700                ; one past end of screen.
0883   02DB ED 5B 24 3C         LD      DE,($3C24)              ; fetch start of buffer from L_HALF
0884   02DF             
0885   02DF CD FA 07            CALL    L07FA                   ; routine SPACE_FILL
0886   02E2             
0887   02E2 21 E0 26            LD      HL,$26E0                ; first location of bottom line.
0888   02E5 22 24 3C            LD      ($3C24),HL              ; set L_HALF
0889   02E8             
0890   02E8 36 00               LD      (HL),$00                ; insert a ZERO.
0891   02EA             
0892   02EA             ; -> called by retype
0893   02EA 2A 24 3C    L02EA:  LD      HL,($3C24)              ; fetch L_HALF
0894   02ED             
0895   02ED             ; -> from cursor down
0896   02ED 22 1E 3C    L02ED:  LD      ($3C1E),HL              ; set INSCRN
0897   02F0 23                  INC     HL                      ; step past the zero
0898   02F1 22 20 3C            LD      ($3C20),HL              ; set CURSOR
0899   02F4             
0900   02F4             ; => from cursor up.
0901   02F4 CD B0 02    L02F4:  CALL    L02B0                   ; find zerobyte
0902   02F7             
0903   02F7 3E 20               LD      A,$20                   ; prepare a space
0904   02F9             
0905   02F9 2B          L02F9:  DEC     HL                      ; move to the left.
0906   02FA BE                  CP      (HL)                    ; compare to space.
0907   02FB 28 FC               JR      Z,L02F9                 ; back while spaces exist.
0908   02FD             
0909   02FD 23                  INC     HL                      ; point to last space encountered.
0910   02FE 22 22 3C            LD      ($3C22),HL              ; set ENDBUF - end of logical line.
0911   0301 C9                  RET                             ; return.
0912   0302             
0913   0302             ; ----------------------------------
0914   0302             ; THE 'COUNT TO END OF LINE' ROUTINE
0915   0302             ; ----------------------------------
0916   0302             ; Find the number of characters to the end of the logical line.
0917   0302             
0918   0302 2A 22 3C    L0302:  LD      HL,($3C22)              ; system variable ENDBUF
0919   0305 ED 5B 20 3C         LD      DE,($3C20)              ; system variable CURSOR
0920   0309 A7                  AND     A                       ; prepare to subtract.
0921   030A ED 52               SBC     HL,DE                   ; subtract to give character places
0922   030C 44                  LD      B,H                     ; transfer result
0923   030D 4D                  LD      C,L                     ; to the BC register pair.
0924   030E 19                  ADD     HL,DE                   ; reform the pointers.
0925   030F             
0926   030F C9                  RET                             ; return with zero flag set if cursor
0927   0310                                                     ; at EOL.
0928   0310             
0929   0310             ; ----------------------
0930   0310             ; THE 'KEYBOARD' ROUTINE
0931   0310             ; ----------------------
0932   0310             
0933   0310 CD 36 03    L0310:  CALL    L0336                   ; routine KEY_SCAN
0934   0313             
0935   0313 47                  LD      B,A                     ; save key in B
0936   0314             
0937   0314 2A 26 3C            LD      HL,($3C26)              ; load L with KEYCOD - last key pressed
0938   0317                                                     ; load H with KEYCNT - debounce counter
0939   0317             
0940   0317 AD                  XOR     L                       ; compare to previous key.
0941   0318 28 0B               JR      Z,L0325                 ; forward if a match.
0942   031A             
0943   031A AD                  XOR     L                       ; reform original
0944   031B 28 03               JR      Z,L0320                 ; forward if zero - no key.
0945   031D             
0946   031D AF                  XOR     A                       ; else clear accumulator.
0947   031E             
0948   031E BD                  CP      L                       ; compare with last.
0949   031F C0                  RET     NZ                      ; return if not zero.
0950   0320             
0951   0320 68          L0320:  LD      L,B                     ; set L to original keycode
0952   0321 26 20               LD      H,$20                   ; set counter to thirty two.
0953   0323 18 0D               JR      L0332                   ; forward to store values and exit
0954   0325                                                     ; returning zero.
0955   0325             
0956   0325             ; ---
0957   0325             
0958   0325             ; Key is same as previously accepted key.
0959   0325             ; It repeats after two interrupts
0960   0325             
0961   0325 25          L0325:  DEC     H                       ; decrement the counter.
0962   0326 7C                  LD      A,H                     ; fetch counter to A.
0963   0327 FE 1E               CP      $1E                     ; compare to thirty.
0964   0329 28 06               JR      Z,L0331                 ; forward if so to return key in A.
0965   032B             
0966   032B AF                  XOR     A                       ; clear accumulator.
0967   032C BC                  CP      H                       ; is counter zero?
0968   032D 20 03               JR      NZ,L0332                ; forward if not to keep counting.
0969   032F             
0970   032F 26 04               LD      H,$04                   ; else set counter to four.
0971   0331             
0972   0331 7D          L0331:  LD      A,L                     ; pick up previous key.
0973   0332             
0974   0332 22 26 3C    L0332:  LD      ($3C26),HL              ;  update KEYCOD/KEYCNT
0975   0335             
0976   0335 C9                  RET                             ; return.
0977   0336             
0978   0336             ;----------------------------------------------------------------------------
0979   0336             ;                          LOGICAL VIEW OF KEYBOARD
0980   0336             ;
0981   0336             ;         0     1     2     3     4 -Bits-  4     3     2     1     0
0982   0336             ; PORT                                                                    PORT
0983   0336             ;
0984   0336             ; F7FE  [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]  |  [ 6 ] [ 7 ] [ 8 ] [ 9 ] [ 0 ]   EFFE
0985   0336             ;  ^                                   |                                   v
0986   0336             ; FBFE  [ Q ] [ W ] [ E ] [ R ] [ T ]  |  [ Y ] [ U ] [ I ] [ O ] [ P ]   DFFE
0987   0336             ;  ^                                   |                                   v
0988   0336             ; FDFE  [ A ] [ S ] [ D ] [ F ] [ G ]  |  [ H ] [ J ] [ K ] [ L ] [ ENT ] BFFE
0989   0336             ;  ^                                   |                                   v
0990   0336             ; FEFE  [SHI] [SYM] [ Z ] [ X ] [ C ]  |  [ V ] [ B ] [ N ] [ M ] [ SPC ] 7FFE
0991   0336             ;  ^            v                                                ^         v
0992   0336             ; Start         +------------>--------------------->-------------+        End
0993   0336             ;
0994   0336             ;
0995   0336             ;----------------------------------------------------------------------------
0996   0336             
0997   0336             
0998   0336             ; ----------------------------------
0999   0336             ; THE 'KEYBOARD SCANNING' SUBROUTINE
1000   0336             ; ----------------------------------
1001   0336             ; This routine is called by the KEYBOARD routine 50 times a second and
1002   0336             ; by the ACE FORTH 'INKEY' WORD.
1003   0336             ; The above diagram shows the logical view of the Keyboard and PORTS.
1004   0336             ; The physical view is similar except that the symbol shift key is to the
1005   0336             ; left of the space key.
1006   0336             
1007   0336             
1008   0336 01 FE FE    L0336:  LD      BC,$FEFE                ; port address - B is also an 8 counter
1009   0339             
1010   0339 ED 50               IN      D,(C)                   ; read from port to D.
1011   033B                                                     ; when a key is pressed, the
1012   033B                                                     ; corresponding bit is reset.
1013   033B             
1014   033B 5A                  LD      E,D                     ; save in E
1015   033C             
1016   033C CB 3A               SRL     D                       ; read the outer SHIFT key.
1017   033E             
1018   033E 9F                  SBC     A,A                     ; $00 if SHIFT else $FF.
1019   033F E6 D8               AND     $D8                     ; $00 if SHIFT else $D8.
1020   0341             
1021   0341 CB 3A               SRL     D                       ; read the symbol shift bit
1022   0343 38 02               JR      C,L0347                 ; skip if not pressed.
1023   0345             
1024   0345 3E 28               LD      A,$28                   ; load A with 40 decimal.
1025   0347             
1026   0347 C6 57       L0347:  ADD     A,$57                   ; gives $7F SYM, $57 SHIFT, or $2F
1027   0349             
1028   0349             ; Since 8 will be subtracted from the initial key value there are three
1029   0349             ; distinct ranges 0 - 39, 40 - 79, 80 - 119.
1030   0349             
1031   0349 6F                  LD      L,A                     ; save key range value in L
1032   034A 7B                  LD      A,E                     ; fetch the original port reading.
1033   034B F6 03               OR      $03                     ; cancel the two shift bits.
1034   034D             
1035   034D 1E FF               LD      E,$FF                   ; set a flag to detect multiple keys.
1036   034F             
1037   034F             ; KEY_LINE the half-row loop.
1038   034F             
1039   034F 2F          L034F:  CPL                             ; complement bits
1040   0350             
1041   0350 E6 1F               AND     $1F                     ; mask off the rightmost five key bits.
1042   0352 57                  LD      D,A                     ; save a copy in D.
1043   0353 28 0D               JR      Z,L0362                 ; forward if no keys pressed to do the
1044   0355                                                     ; next row.
1045   0355             
1046   0355 7D                  LD      A,L                     ; else fetch the key value
1047   0356 1C                  INC     E                       ; test E for $FF
1048   0357 20 12               JR      NZ,L036B                ; forward if not now zero to quit
1049   0359             
1050   0359 D6 08       L0359:  SUB     $08                     ; subtract 8 from key value
1051   035B             
1052   035B CB 3A               SRL     D                       ; test next bit affecting zero and carry
1053   035D             
1054   035D 30 FA               JR      NC,L0359                ; loop back until the set bit is found.
1055   035F             
1056   035F 5F                  LD      E,A                     ; transfer key value to E.
1057   0360 20 09               JR      NZ,L036B                ; forward to abort if more than one key
1058   0362                                                     ; is pressed in the row.
1059   0362             
1060   0362 2D          L0362:  DEC     L                       ; decrement the key value for next row.
1061   0363             
1062   0363 CB 00               RLC     B                       ; rotate the 8 counter and port address
1063   0365             
1064   0365 30 06               JR      NC,L036D                ; skip forward when all 8 rows have
1065   0367                                                     ; been read.
1066   0367             
1067   0367 ED 78               IN      A,(C)                   ; else read the next half-row.
1068   0369 18 E4               JR      L034F                   ; and back to KEY_LINE.
1069   036B             
1070   036B             ; ---
1071   036B             ; ABORTKEY
1072   036B             
1073   036B 1E FF       L036B:  LD      E,$FF                   ; signal invalid key.
1074   036D             
1075   036D             ; the normal exit checks if E holds a key and not $FF.
1076   036D             
1077   036D 7B          L036D:  LD      A,E                     ; fetch possible key value.
1078   036E 3C                  INC     A                       ; increment
1079   036F C8                  RET     Z                       ; return if was $FF as original.
1080   0370             
1081   0370 21 76 03            LD      HL,L0376                ; else address KEY TABLE
1082   0373 19                  ADD     HL,DE                   ; index into table.
1083   0374                                                     ; (D is zero)
1084   0374             
1085   0374 7E                  LD      A,(HL)                  ; pick up character.
1086   0375             
1087   0375 C9                  RET                             ; return with translated character.
1088   0376             
1089   0376             
1090   0376             
1091   0376             ; ---------------
1092   0376             ; THE 'KEY TABLE'
1093   0376             ; ---------------
1094   0376             
1095   0376             ; -----------------------
1096   0376             ; THE '40 UNSHIFTED KEYS'
1097   0376             ; -----------------------
1098   0376             
1099   0376 76          L0376:  DEFB    $76                     ; V - v
1100   0377 68                  DEFB    $68                     ; H - h
1101   0378 79                  DEFB    $79                     ; Y - y
1102   0379 36                  DEFB    $36                     ; 6 - 6
1103   037A 35                  DEFB    $35                     ; 5 - 5
1104   037B 74                  DEFB    $74                     ; T - t
1105   037C 67                  DEFB    $67                     ; G - g
1106   037D 63                  DEFB    $63                     ; C - c
1107   037E 62                  DEFB    $62                     ; B - b
1108   037F 6A                  DEFB    $6A                     ; J - j
1109   0380 75                  DEFB    $75                     ; U - u
1110   0381 37                  DEFB    $37                     ; 7 - 7
1111   0382 34                  DEFB    $34                     ; 4 - 4
1112   0383 72                  DEFB    $72                     ; R - r
1113   0384 66                  DEFB    $66                     ; F - f
1114   0385 78                  DEFB    $78                     ; X - x
1115   0386 6E                  DEFB    $6E                     ; N - n
1116   0387 6B                  DEFB    $6B                     ; K - k
1117   0388 69                  DEFB    $69                     ; I - i
1118   0389 38                  DEFB    $38                     ; 8 - 8
1119   038A 33                  DEFB    $33                     ; 3 - 3
1120   038B 65                  DEFB    $65                     ; E - e
1121   038C 64                  DEFB    $64                     ; D - d
1122   038D 7A                  DEFB    $7A                     ; Z - z
1123   038E 6D                  DEFB    $6D                     ; M - m
1124   038F 6C                  DEFB    $6C                     ; L - l
1125   0390 6F                  DEFB    $6F                     ; O - o
1126   0391 39                  DEFB    $39                     ; 9 - 9
1127   0392 32                  DEFB    $32                     ; 2 - 2
1128   0393 77                  DEFB    $77                     ; W - w
1129   0394 73                  DEFB    $73                     ; S - s
1130   0395 00                  DEFB    $00                     ; SYMBOL
1131   0396 20                  DEFB    $20                     ; SPACE
1132   0397 0D                  DEFB    $0D                     ; ENTER
1133   0398 70                  DEFB    $70                     ; P - p
1134   0399 30                  DEFB    $30                     ; 0 - 0
1135   039A 31                  DEFB    $31                     ; 1 - 1
1136   039B 71                  DEFB    $71                     ; Q - q
1137   039C 61                  DEFB    $61                     ; A - a
1138   039D 00                  DEFB    $00                     ; SHIFT
1139   039E             
1140   039E             ; ---------------------
1141   039E             ; THE '40 SHIFTED KEYS'
1142   039E             ; ---------------------
1143   039E             
1144   039E 56                  DEFB    $56                     ; V - V
1145   039F 48                  DEFB    $48                     ; H - H
1146   03A0 59                  DEFB    $59                     ; Y - Y
1147   03A1 07                  DEFB    $07                     ; 6 - 7 KEY-UP
1148   03A2 01                  DEFB    $01                     ; 5 - 1 KEY-LEFT
1149   03A3 54                  DEFB    $54                     ;
1150   03A4 47                  DEFB    $47
1151   03A5 43                  DEFB    $43
1152   03A6 42                  DEFB    $42
1153   03A7 4A                  DEFB    $4A
1154   03A8 55                  DEFB    $55
1155   03A9 09                  DEFB    $09                     ; 7 - 9 KEY-DOWN
1156   03AA 08                  DEFB    $08                     ; 4 - 8 INV-VIDEO
1157   03AB 52                  DEFB    $52
1158   03AC 46                  DEFB    $46
1159   03AD 58                  DEFB    $58
1160   03AE 4E                  DEFB    $4E
1161   03AF 4B                  DEFB    $4B
1162   03B0 49                  DEFB    $49
1163   03B1 03                  DEFB    $03                     ; 8 - 3 KEY-RIGHT
1164   03B2 33                  DEFB    $33                     ; 3 - 3
1165   03B3 45                  DEFB    $45
1166   03B4 44                  DEFB    $44
1167   03B5 5A                  DEFB    $5A
1168   03B6 4D                  DEFB    $4D
1169   03B7 4C                  DEFB    $4C
1170   03B8 4F                  DEFB    $4F
1171   03B9 04                  DEFB    $04                     ; 9 - 4 GRAPH
1172   03BA 02                  DEFB    $02                     ; 2 - 2 CAPS LOCK
1173   03BB 57                  DEFB    $57                     ; W - W
1174   03BC 53                  DEFB    $53                     ; S - S
1175   03BD 00                  DEFB    $00                     ; SYMB
1176   03BE 20                  DEFB    $20                     ; SPACE
1177   03BF 0D                  DEFB    $0D                     ; ENTER
1178   03C0 50                  DEFB    $50                     ; P - P
1179   03C1 05                  DEFB    $05                     ; 0 - 5   DEL
1180   03C2 0A                  DEFB    $0A                     ; 1 - 0A  DEL_LINE
1181   03C3 51                  DEFB    $51                     ; Q - Q
1182   03C4 41                  DEFB    $41                     ; A - A
1183   03C5 00                  DEFB    $00                     ; SHIFT
1184   03C6             
1185   03C6             ; --------------------------
1186   03C6             ; THE '40 SYMBOL SHIFT KEYS'
1187   03C6             ; --------------------------
1188   03C6             
1189   03C6 2F                  DEFB    $2F                     ; V - /
1190   03C7 5E                  DEFB    $5E                     ; H - ^
1191   03C8 5B                  DEFB    $5B                     ; Y - [
1192   03C9 26                  DEFB    $26                     ; 6 - &
1193   03CA 25                  DEFB    $25                     ; 5 - %
1194   03CB 3E                  DEFB    $3E                     ; T - >
1195   03CC 7D                  DEFB    $7D                     ;
1196   03CD 3F                  DEFB    $3F
1197   03CE 2A                  DEFB    $2A
1198   03CF 2D                  DEFB    $2D
1199   03D0 5D                  DEFB    $5D
1200   03D1 27                  DEFB    $27
1201   03D2 24                  DEFB    $24
1202   03D3 3C                  DEFB    $3C
1203   03D4 7B                  DEFB    $7B
1204   03D5 60                  DEFB    $60
1205   03D6 2C                  DEFB    $2C
1206   03D7 2B                  DEFB    $2B
1207   03D8 7F                  DEFB    $7F
1208   03D9 28                  DEFB    $28
1209   03DA 23                  DEFB    $23
1210   03DB 45                  DEFB    $45
1211   03DC 5C                  DEFB    $5C
1212   03DD 3A                  DEFB    $3A
1213   03DE 2E                  DEFB    $2E
1214   03DF 3D                  DEFB    $3D
1215   03E0 3B                  DEFB    $3B
1216   03E1 29                  DEFB    $29
1217   03E2 40                  DEFB    $40                     ; 2 - @
1218   03E3 57                  DEFB    $57                     ; W - W
1219   03E4 7C                  DEFB    $7C                     ; S
1220   03E5 00                  DEFB    $00                     ; SYMB
1221   03E6 20                  DEFB    $20                     ; SPACE
1222   03E7 0D                  DEFB    $0D                     ; ENTER
1223   03E8 22                  DEFB    $22                     ; P - "
1224   03E9 5F                  DEFB    $5F                     ; 0 - _
1225   03EA 21                  DEFB    $21                     ; 1 - !
1226   03EB 51                  DEFB    $51                     ; Q - Q
1227   03EC 7E                  DEFB    $7E                     ; A - ~
1228   03ED 00                  DEFB    $00                     ; SHIFT
1229   03EE             
1230   03EE             ; end of key tables
1231   03EE             
1232   03EE             
1233   03EE             ; ---------------------------
1234   03EE             ; THE 'PRINT ROUTINE' Part 2.
1235   03EE             ; ---------------------------
1236   03EE             ; If output is not directed into the input buffer then jump forward else
1237   03EE             ; call the routine to output to lower screen.
1238   03EE             
1239   03EE 28 05       L03EE:  JR      Z,L03F5                 ; forward to main screen print.
1240   03F0             
1241   03F0 CD 7E 01            CALL    L017E                   ; PR_LOWER
1242   03F3             
1243   03F3 D9                  EXX                             ; restore main set
1244   03F4 C9                  RET                             ; return.                >>
1245   03F5             
1246   03F5             ; the print output is not directed to the input buffer but first check that
1247   03F5             ; the user has not set up a vector to their own routine to print characters
1248   03F5             ; for instance to a printer.
1249   03F5             
1250   03F5 47          L03F5:  LD      B,A                     ; save the character in the B register.
1251   03F6             
1252   03F6 2A 29 3C            LD      HL,($3C29)              ; fetch possible vector from EXWRCH
1253   03F9                                                     ; (normally 0)
1254   03F9 7C                  LD      A,H                     ; test for
1255   03FA B5                  OR      L                       ; the value zero.
1256   03FB 78                  LD      A,B                     ; fetch the character back to A.
1257   03FC             
1258   03FC 28 01               JR      Z,L03FF                 ; skip forward if no user-supplied
1259   03FE                                                     ; routine.
1260   03FE             
1261   03FE E9          L03FE:  JP      (HL)                    ; else jump to user-supplied routine
1262   03FF                                                     ; which should finish with a JP (IY)
1263   03FF             
1264   03FF             ; ---
1265   03FF             ; PRINTING TO UPPER SCREEN
1266   03FF             ; ---
1267   03FF             
1268   03FF 2A 1C 3C    L03FF:  LD      HL,($3C1C)              ; SCRPOS
1269   0402 ED 5B 24 3C         LD      DE,($3C24)              ; L_HALF
1270   0406             
1271   0406 EB                  EX      DE,HL                   ; ??
1272   0407             
1273   0407 37                  SCF                             ; inclusive byte.
1274   0408 ED 52               SBC     HL,DE                   ; subtract screen position+1 from
1275   040A                                                     ; the start of input buffer.
1276   040A EB                  EX      DE,HL                   ; hl=scrpos
1277   040B             
1278   040B DC 21 04            CALL    C,L0421                 ; if no room then scroll upper display
1279   040E             
1280   040E FE 0D               CP      $0D                     ; carriage return?
1281   0410             
1282   0410 28 04               JR      Z,L0416                 ; skip forward if so.
1283   0412             
1284   0412 77                  LD      (HL),A                  ; else insert the character.
1285   0413             
1286   0413 23                  INC     HL                      ; point to next position.
1287   0414 18 06               JR      L041C                   ; forward
1288   0416             
1289   0416             ; ---
1290   0416             
1291   0416             ; a carriage return
1292   0416             
1293   0416 23          L0416:  INC     HL                      ; increment screen address.
1294   0417 7D                  LD      A,L                     ; fetch low byte of address and mask.
1295   0418 E6 1F               AND     $1F                     ; a zero result indicates a line skip.
1296   041A 20 FA               JR      NZ,L0416                ; loop until a new line of 32 columns
1297   041C                                                     ; is started.
1298   041C             
1299   041C             ; both paths converge.
1300   041C             
1301   041C 22 1C 3C    L041C:  LD      ($3C1C),HL              ; update SCRPOS
1302   041F             
1303   041F D9                  EXX                             ; back to main set.
1304   0420             
1305   0420 C9                  RET                             ; return.
1306   0421             
1307   0421             ; -------------------------------------
1308   0421             ; The 'UPPER DISPLAY SCROLLING' ROUTINE
1309   0421             ; -------------------------------------
1310   0421             
1311   0421 F5          L0421:  PUSH    AF                      ; save character
1312   0422             
1313   0422 21 1C 3C            LD      HL,$3C1C                ; address the low order byte SCRPOS
1314   0425             
1315   0425 CD 43 04            CALL    L0443                   ; routine cursor up
1316   0428                                                     ; i.e. SCRPOS = SCRPOS - 32
1317   0428             
1318   0428 F1                  POP     AF                      ; restore character
1319   0429             
1320   0429             ; now calculate the number of characters to scroll in the upper display.
1321   0429             
1322   0429 2A 24 3C            LD      HL,($3C24)              ; fetch L_HALF the start of input buffer
1323   042C 11 20 24            LD      DE,$2420                ; second line in video display
1324   042F             
1325   042F             ;
1326   042F             ; => scroll lower display enters here
1327   042F A7          L042F:  AND     A                       ; prepare for true subtraction.
1328   0430 ED 52               SBC     HL,DE                   ; find number of characters to scroll.
1329   0432             
1330   0432 44                  LD      B,H                     ; result to BC
1331   0433 4D                  LD      C,L
1332   0434             
1333   0434 21 E0 FF            LD      HL,$FFE0                ; set HL to -32d
1334   0437 19                  ADD     HL,DE                   ; now HL = DE -32d
1335   0438 EB                  EX      DE,HL                   ; switch so DE = HL - 32
1336   0439             
1337   0439 ED B0               LDIR                            ; scroll the lines up.
1338   043B             
1339   043B 06 20               LD      B,$20                   ; blank a line of 32 characters
1340   043D             
1341   043D 2B          L043D:  DEC     HL                      ; decrement screen address.
1342   043E 36 20               LD      (HL),$20                ; insert a space character
1343   0440 10 FB               DJNZ    L043D                   ; and loop for all 32 characters
1344   0442             
1345   0442 C9                  RET                             ; return.
1346   0443             
1347   0443             ; --------------------------------
1348   0443             ; THE 'SCREEN POINTERS' SUBROUTINE
1349   0443             ; --------------------------------
1350   0443             ;
1351   0443             
1352   0443 7E          L0443:  LD      A,(HL)                  ; fetch low byte of screen address
1353   0444 D6 20               SUB     $20                     ; subtract thirty two characters.
1354   0446 77                  LD      (HL),A                  ; and put back.
1355   0447             
1356   0447 23                  INC     HL                      ; address high-order byte.
1357   0448 30 01               JR      NC,L044B                ; forward if low byte did not wrap
1358   044A             
1359   044A 35                  DEC     (HL)                    ; else decrement the high byte as the
1360   044B                                                     ; position has moved across a third of
1361   044B                                                     ; the display.
1362   044B             
1363   044B 23          L044B:  INC     HL                      ; address following System Variable
1364   044C C9                  RET                             ; return.
1365   044D             
1366   044D             ; -----------------------------------
1367   044D             ; THE 'INDEX SYSTEM VARIABLE' ROUTINE
1368   044D             ; -----------------------------------
1369   044D             ; This routine is used by words CONTEXT, CURRENT, BASE etc. to index and then
1370   044D             ; stack a system variable associated with a FORTH word. See shortly.
1371   044D             ;
1372   044D             ; It is a bit overblown considering the eventual position of the System
1373   044D             ; Variables and ld d,$3c; rst 10h; jp (iy) could have been used instead of
1374   044D             ; the long-winded addition below.
1375   044D             
1376   044D EB          L044D:  EX      DE,HL                   ; HL addresses the offset byte.
1377   044E 5E                  LD      E,(HL)                  ; fetch to E register
1378   044F             ;
1379   044F 16 00               LD      D,$00                   ; prepare to add.
1380   0451 21 00 3C            LD      HL,$3C00                ; the address of start of SYSVARS
1381   0454 19                  ADD     HL,DE                   ; add the 8-bit offset
1382   0455 EB                  EX      DE,HL                   ; location to DE.
1383   0456 D7                  RST     10H                     ; push word DE
1384   0457             
1385   0457 FD E9               JP      (IY)                    ; to 'next'.
1386   0459             
1387   0459             ; ---------------
1388   0459             ; THE 'HERE' WORD
1389   0459             ; ---------------
1390   0459             ; ( -- address)
1391   0459             ; Leaves the address of one past the end of the dictionary.
1392   0459             
1393   0459 48 45 52    L0459:  DEFM    "HER"                   ; 'name field'
1394   045C C5                  DEFB    'E' + $80
1395   045D             
1396   045D AA 00               DEFW    L00AA                   ; 'link field'
1397   045F             
1398   045F 04          L045F:  DEFB    $04                     ; 'name length field'
1399   0460             
1400   0460 62 04       L0460:  DEFW    L0462                   ; 'code field'
1401   0462             
1402   0462             ; ---
1403   0462             
1404   0462 ED 5B 37 3C L0462:  LD      DE,($3C37)              ; system variable STKBOT.
1405   0466 D7                  RST     10H                     ; push word DE
1406   0467             
1407   0467 FD E9               JP      (IY)                    ; to 'next'.
1408   0469             
1409   0469             ; ------------------
1410   0469             ; THE 'CONTEXT' WORD
1411   0469             ; ------------------
1412   0469             ; (  -- 15411 )
1413   0469             ; A system variable pointing to the context vocabulary.
1414   0469             ; $3C33 CONTEXT
1415   0469             
1416   0469 43 4F 4E 54 L0469:  DEFM    "CONTEX"                ; 'name field'
1416   046D 45 58 
1417   046F D4                  DEFB    'T' + $80
1418   0470             
1419   0470 5F 04               DEFW    L045F                   ; 'link field'
1420   0472             
1421   0472 07          L0472:  DEFB    $07                     ; 'name length field'
1422   0473             
1423   0473 4D 04       L0473:  DEFW    L044D                   ; 'code field'
1424   0475             
1425   0475             ; ---
1426   0475             
1427   0475 33          L0475:  DEFB    $33                     ; low byte of system variable.
1428   0476             
1429   0476             ; ------------------
1430   0476             ; THE 'CURRENT' WORD
1431   0476             ; ------------------
1432   0476             ; (  -- 15409 )
1433   0476             ; A system variable pointing to the current vocabulary.
1434   0476             ; $3C31 CURRENT
1435   0476             
1436   0476 43 55 52 52 L0476:  DEFM    "CURREN"                ; 'name field'
1436   047A 45 4E 
1437   047C D4                  DEFB    'T' + $80
1438   047D             
1439   047D 72 04               DEFW    L0472                   ; 'link field'
1440   047F             
1441   047F 07          L047F:  DEFB    $07                     ; 'name length field'
1442   0480             
1443   0480 4D 04       L0480:  DEFW    L044D                   ; 'code field'
1444   0482             
1445   0482             ; ---
1446   0482             
1447   0482 31          L0482:  DEFB    $31                     ; a single parameter low-byte of $3C31.
1448   0483             
1449   0483             ; ---------------
1450   0483             ; THE 'BASE' WORD
1451   0483             ; ---------------
1452   0483             ; ( -- 15423)
1453   0483             ; A one-byte variable containing the system number base.
1454   0483             ; $3C3F BASE
1455   0483             
1456   0483 42 41 53    L0483:  DEFM    "BAS"                   ; 'name field'
1457   0486 C5                  DEFB    'E' + $80
1458   0487             
1459   0487 7F 04               DEFW    L047F                   ; 'link field'
1460   0489             
1461   0489 04          L0489:  DEFB    $04                     ; 'name length field'
1462   048A             
1463   048A 4D 04       L048A:  DEFW    L044D                   ; 'code field'
1464   048C             
1465   048C             ; ---
1466   048C             
1467   048C 3F          L048C:  DEFB    $3F                     ; low-byte of system variable BASE
1468   048D             
1469   048D             ; ---
1470   048D             
1471   048D             ; These two Internal Words are used to stack the value of FLAGS and DICT.
1472   048D             
1473   048D             ; -------------------------
1474   048D             ; The 'flags' Internal Word
1475   048D             ; -------------------------
1476   048D             
1477   048D 4D 04       L048D:  DEFW    L044D                   ; headerless 'code field'
1478   048F             
1479   048F             ; ---
1480   048F             
1481   048F 3E          L048F:  DEFB    $3E                     ; low-order byte of FLAGS $3C3E
1482   0490             
1483   0490             ; -------------------------
1484   0490             ; The 'dict' Internal Word
1485   0490             ; -------------------------
1486   0490             
1487   0490 4D 04       L0490:  DEFW    L044D                   ; headerless 'code field'
1488   0492             
1489   0492             ; ---
1490   0492             
1491   0492 39          L0492:  DEFB    $39                     ; low-order byte of DICT $3C39
1492   0493             
1493   0493             
1494   0493             ; --------------
1495   0493             ; THE 'PAD' WORD
1496   0493             ; --------------
1497   0493             ; (  -- 9985 )
1498   0493             ; Stacks the address of the 254-byte workpad.
1499   0493             ; On most FORTH systems the PAD floats about in memory but on the Ace it is
1500   0493             ; fixed in location and size. Its definition is simply a constant.
1501   0493             
1502   0493 50 41       l0493   DEFM    "PA"                    ; 'name field'
1503   0495 C4                  DEFB    'D' + $80
1504   0496             
1505   0496 89 04               DEFW    L0489                   ; 'link field'
1506   0498             
1507   0498 03          L0498:  DEFB    $03                     ; 'name length field'
1508   0499             
1509   0499 F5 0F       L0499:  DEFW    L0FF5                   ; 'code field' - stack word
1510   049B             
1511   049B             ; ---
1512   049B             
1513   049B 01 27       L049B:  DEFW    $2701                   ; parameter is 9985 decimal -
1514   049D                                                     ; work pad address
1515   049D             
1516   049D             ; ------------
1517   049D             ; THE ';' WORD
1518   049D             ; ------------
1519   049D             ; Terminates colon, DEFINER and COMPILER definitions.
1520   049D             
1521   049D BB          L049D:  DEFB    ';' + $80               ; 'name field'
1522   049E             
1523   049E 98 04               DEFW    L0498                   ; 'link field'
1524   04A0             
1525   04A0 41          L04A0:  DEFB    $41                     ; length 1 + $40 (immediate word)
1526   04A1             
1527   04A1 08 11       L04A1:  DEFW    L1108                   ; 'code field' - compile
1528   04A3             
1529   04A3             ; ---
1530   04A3             
1531   04A3 B6 04       L04A3:  DEFW    L04B6                   ; exit
1532   04A5             
1533   04A5 D8 12       L04A5:  DEFW    L12D8                   ; check-for
1534   04A7 0A                  DEFB    $0A                     ; ten                   marker byte?
1535   04A8 0E 1A               DEFW    L1A0E                   ; end-forth.
1536   04AA             
1537   04AA             ; code gels
1538   04AA             
1539   04AA 21 3E 3C    L04AA:  LD      HL,$3C3E                ; address FLAGS
1540   04AD 7E                  LD      A,(HL)                  ; fetch FLAGS value.
1541   04AE             
1542   04AE E6 BB               AND     $BB                     ; AND %10111011
1543   04B0                                                     ; reset bit 2 - show definition complete
1544   04B0                                                     ; reset bit 6 - show in interpreter mode
1545   04B0             
1546   04B0 77                  LD      (HL),A                  ; update FLAGS value.
1547   04B1             
1548   04B1 FD E9               JP      (IY)                    ; to 'next'.
1549   04B3             
1550   04B3             ; ----
1551   04B3             ; Note. these backward links to the beginning of words will probably be less
1552   04B3             ; of a mystery when the syntax checking and listing modules are more fully
1553   04B3             ; explored. A value of $FFFF sometimes occurs.
1554   04B3             
1555   04B3 00          x04b3   DEFB    $00                     ;;
1556   04B4             
1557   04B4 E8          x04b4   DEFB    $E8                     ;;
1558   04B5 FF          x04b5   DEFB    $FF                     ;; 04b5 + ffe8 = 049d  = ';'
1559   04B6             
1560   04B6             ; ----------------------------------
1561   04B6             ; THE 'ADDRESS' INTERPRETER ROUTINES
1562   04B6             ; ----------------------------------
1563   04B6             
1564   04B6             ; ------------------------
1565   04B6             ; The 'Exit' Internal Word
1566   04B6             ; ------------------------
1567   04B6             ; Drops the 'Next Word' pointer from the Return Stack thereby ending a
1568   04B6             ; subroutine and returning to next word in calling thread.
1569   04B6             
1570   04B6 B8 04       L04B6:  DEFW    L04B8                   ; headerless 'code field'
1571   04B8             
1572   04B8             ; ---
1573   04B8             
1574   04B8 E1          L04B8:  POP     HL                      ; discard the next word pointer.
1575   04B9             
1576   04B9             ; ------------------------------
1577   04B9             ; THE 'ADDRESS INTERPRETER' LOOP
1578   04B9             ; ------------------------------
1579   04B9             ; Sometimes known as the Sequencer.
1580   04B9             ;
1581   04B9             ; iy_fast
1582   04B9             
1583   04B9 E1          L04B9:  POP     HL                      ; word pointer.
1584   04BA             
1585   04BA             ; =====> from DOCOLON and BRANCH
1586   04BA             
1587   04BA 5E          L04BA:  LD      E,(HL)
1588   04BB 23                  INC     HL
1589   04BC 56                  LD      D,(HL)
1590   04BD 23                  INC     HL
1591   04BE             
1592   04BE E5                  PUSH    HL                      ; word pointer.
1593   04BF             
1594   04BF             ; ==>
1595   04BF             ;
1596   04BF EB          L04BF:  EX      DE,HL
1597   04C0 5E                  LD      E,(HL)
1598   04C1 23                  INC     HL
1599   04C2 56                  LD      D,(HL)
1600   04C3 23                  INC     HL
1601   04C4 EB                  EX      DE,HL
1602   04C5             
1603   04C5 E9                  JP      (HL)                    ; jump to machine code (4 clock cycles)
1604   04C6                                                     ; which will terminate with a JP (IY)
1605   04C6                                                     ; instruction (8 clock cycles).
1606   04C6             
1607   04C6             
1608   04C6             
1609   04C6             ; --------------------------------
1610   04C6             ; The 'Memory Check' Internal Word
1611   04C6             ; --------------------------------
1612   04C6             ; This internal word which also checks the BREAK key is only used from the
1613   04C6             ; start of the LINE definition. However the machine code entry point is the
1614   04C6             ; normal value of the IY register and so this code is executed at the end of
1615   04C6             ; every word.
1616   04C6             
1617   04C6 C8 04       L04C6:  DEFW    L04C8                   ; headerless 'code field'
1618   04C8             
1619   04C8             ; iy_slow
1620   04C8             
1621   04C8 01 0B 00    L04C8:  LD      BC,$000B                ; allow overhead of eleven bytes
1622   04CB ED 5B 3B 3C         LD      DE,($3C3B)              ; SPARE
1623   04CF 2A 37 3C            LD      HL,($3C37)              ; STKBOT
1624   04D2 09                  ADD     HL,BC                   ; add the overhead
1625   04D3 ED 52               SBC     HL,DE                   ; subtract the SPARE value
1626   04D5 38 02               JR      C,L04D9                 ; forward if the original 12 byte gap
1627   04D7                                                     ; remains.
1628   04D7             
1629   04D7             ; else stack underflow has occurred.
1630   04D7             
1631   04D7 E7          L04D7:  RST     20H                     ; Error 2
1632   04D8 02                  DEFB    $02                     ; Data stack underflow.
1633   04D9             
1634   04D9             ; ---
1635   04D9             
1636   04D9 01 00 00    L04D9:  LD      BC,$0000                ; allow no overhead.
1637   04DC             
1638   04DC CD 8C 0F            CALL    L0F8C                   ; check free memory
1639   04DF CD E4 04            CALL    L04E4                   ; check BREAK key.
1640   04E2 18 D5               JR      L04B9                   ; back to iy_fast
1641   04E4             
1642   04E4             ; ------------------------------------
1643   04E4             ; THE 'CHECK FOR BREAK KEY' SUBROUTINE
1644   04E4             ; ------------------------------------
1645   04E4             ; Check for the key combination SHIFT/SPACE.
1646   04E4             
1647   04E4 3E FE       L04E4:  LD      A,$FE                   ; read port $FEFE -
1648   04E6 DB FE               IN      A,($FE)                 ; keys SPACE, SYMSHIFT, M, N, B.
1649   04E8             
1650   04E8 1F                  RRA                             ; test bit for outermost key
1651   04E9 D8                  RET     C                       ; return if not pressed.
1652   04EA             
1653   04EA 3E 7F               LD      A,$7F                   ; read port $7FFE -
1654   04EC DB FE               IN      A,($FE)                 ; keys SHIFT, Z, X, C, V.
1655   04EE             
1656   04EE 1F                  RRA                             ; test bit for outermost key
1657   04EF D8                  RET     C                       ; return if not pressed.
1658   04F0             
1659   04F0 E7          L04F0:  RST     20H                     ; Error 3.
1660   04F1 03                  DEFB    $03                     ; BREAK pressed.
1661   04F2             
1662   04F2             ; -------------------------
1663   04F2             ; THE 'MAIN EXECUTION' LOOP
1664   04F2             ; -------------------------
1665   04F2             ; The final part of the QUIT definition, as in all FORTH implementations,
1666   04F2             ; just loops through two FORTH words.
1667   04F2             
1668   04F2             ; The first call - to the Address Interpreter - does not return.
1669   04F2             ; The return address is the next word QUERY which the interpreter pops off
1670   04F2             ; the Return Stack and then before executing puts the address of the next word
1671   04F2             ; on Return Stack. The default action of the Address Interpreter is to execute
1672   04F2             ; words in turn until some word, such as branch, alters this default behaviour.
1673   04F2             
1674   04F2 CD B9 04    L04F2:  CALL    L04B9                   ; forth.
1675   04F5             
1676   04F5 8C 05       L04F5:  DEFW    L058C                   ; QUERY         - input buffer
1677   04F7 06 05               DEFW    L0506                   ; LINE          - interpret buffer
1678   04F9 36 05               DEFW    L0536                   ; prOK          - print OK
1679   04FB 76 12               DEFW    L1276                   ; branch        - relative jump
1680   04FD             
1681   04FD F7 FF       L04FD:  DEFW    $FFF7                   ; back to L04F5
1682   04FF             
1683   04FF             ; ---
1684   04FF             ; the first high-level interpreted word.
1685   04FF             ; ---
1686   04FF             
1687   04FF             ; ---------------
1688   04FF             ; THE 'LINE' WORD
1689   04FF             ; ---------------
1690   04FF             ; Interprets input buffer as a normal FORTH line.
1691   04FF             
1692   04FF 4C 49 4E    L04FF:  DEFM    "LIN"                   ; 'name field'
1693   0502 C5                  DEFB    'E' + $80
1694   0503             
1695   0503 A0 04               DEFW    L04A0                   ; 'link field'
1696   0505             
1697   0505 04          L0505:  DEFB    $04                     ; 'name length field'
1698   0506             
1699   0506 C3 0E       L0506:  DEFW    L0EC3                   ; 'code field' - docolon
1700   0508             
1701   0508             ; ---
1702   0508             
1703   0508 C6 04       L0508:  DEFW    L04C6                   ; check mem each time through loop
1704   050A                                                     ; as dictionary could be expanding.
1705   050A             
1706   050A 3D 06               DEFW    L063D                   ; FIND          - search the dictionary
1707   050C EE 08               DEFW    L08EE                   ; ?DUP          - duplicate if found
1708   050E 83 12               DEFW    L1283                   ; ?branch       - forward if not a
1709   0510 07 00       L0510:  DEFW    $0007                   ; to L0518      - word.
1710   0512             
1711   0512 4F 05               DEFW    L054F                   ; test and stack??
1712   0514 76 12               DEFW    L1276                   ; branch
1713   0516 F1 FF       L0516:  DEFW    $FFF1                   ; back to L0508
1714   0518             
1715   0518 A9 06       L0518:  DEFW    L06A9                   ; NUMBER
1716   051A EE 08               DEFW    L08EE                   ; ?DUP
1717   051C 83 12               DEFW    L1283                   ; ?branch       - forward if not a
1718   051E 07 00       L051E:  DEFW    $0007                   ; to L0526      - number.
1719   0520             
1720   0520 64 05               DEFW    L0564                   ; pop de with test
1721   0522 76 12               DEFW    L1276                   ; branch
1722   0524 E3 FF       L0524:  DEFW    $FFE3                   ; loop back to L0508
1723   0526             
1724   0526 1B 06       L0526:  DEFW    L061B                   ; stack-length
1725   0528 1A 0C               DEFW    L0C1A                   ; 0=
1726   052A 83 12               DEFW    L1283                   ; ?branch       - forward with anything
1727   052C 03 00       L052C:  DEFW    $0003                   ; to L0530      - else
1728   052E             
1729   052E B6 04       L052E:  DEFW    L04B6                   ; EXIT                          >>>
1730   0530             
1731   0530             ; ---
1732   0530             
1733   0530 78 05       L0530:  DEFW    L0578                   ; RETYPE        - [?] at relevant place
1734   0532 76 12               DEFW    L1276                   ; branch        - once corrected back
1735   0534 D3 FF       L0534:  DEFW    $FFD3                   ; to L0508      - to the loop.
1736   0536             
1737   0536             ; ----------------------------
1738   0536             ; The 'Print OK' Internal Word
1739   0536             ; ----------------------------
1740   0536             ; prints the OK message after successful execution.
1741   0536             
1742   0536 38 05       L0536:  DEFW    L0538                   ; headerless 'code field'
1743   0538             
1744   0538 3A 3E 3C    L0538:  LD      A,($3C3E)               ; fetch system variable FLAGS
1745   053B             
1746   053B CB 77               BIT     6,A                     ; test for 'COMPILER' mode.
1747   053D 20 0E               JR      NZ,L054D                ; forward if so.
1748   053F             
1749   053F CB 67               BIT     4,A                     ; test for 'INVIS' mode.
1750   0541 20 0A               JR      NZ,L054D                ; forward if so.
1751   0543             
1752   0543 CD 08 18            CALL    L1808                   ; else print the inline string.
1753   0546             
1754   0546             ; ---
1755   0546             
1756   0546 20 4F 4B            DEFM    " OK"                   ; the OK message between two spaces.
1757   0549 A0                  DEFB    ' ' + $80               ; last one inverted.
1758   054A             
1759   054A             ; ---
1760   054A             
1761   054A 3E 0D       L054A:  LD      A,$0D                   ; prepare a carriage return.
1762   054C CF                  RST     08H                     ; and PRINT also.
1763   054D             
1764   054D FD E9       L054D:  JP      (IY)                    ; to 'next'.
1765   054F             
1766   054F             ; ------------------------------
1767   054F             ; The 'XXXXXXXXXX' Internal Word
1768   054F             ; ------------------------------
1769   054F             ; to handle a Word from LINE
1770   054F             
1771   054F 51 05       L054F:  DEFW    L0551                   ; headerless 'code field'
1772   0551             
1773   0551             ; ---
1774   0551             
1775   0551 DF          L0551:  RST     18H                     ; pop address from Data Stack to DE
1776   0552             
1777   0552 1B                  DEC     DE                      ; point to the 'name length field'
1778   0553             
1779   0553 1A                  LD      A,(DE)                  ; fetch contents of the address.
1780   0554             
1781   0554 2F                  CPL                             ; complement.
1782   0555             
1783   0555 DD A6 3E            AND     (IX+$3E)                ; FLAGS
1784   0558             
1785   0558 E6 40               AND     $40                     ; isolate BIT 6 of FLAGS, set if in
1786   055A                                                     ; compiler mode.
1787   055A             
1788   055A 13                  INC     DE                      ; increment address to 'code field'
1789   055B             
1790   055B 28 04               JR      Z,L0561                 ; forward if not in compiling mode
1791   055D             
1792   055D D7                  RST     10H                     ; push word DE          - add to dict
1793   055E 11 4E 0F            LD      DE,L0F4E                ; ','                   - enclose
1794   0561             
1795   0561 C3 BF 04    L0561:  JP      L04BF                   ; next word.
1796   0564             
1797   0564             ; -----------------------
1798   0564             ; The '???' Internal Word
1799   0564             ; -----------------------
1800   0564             ; after handling a number from LINE
1801   0564             
1802   0564 66 05       L0564:  DEFW    L0566                   ; headerless 'code field'
1803   0566             
1804   0566             ; ---
1805   0566             
1806   0566 DF          L0566:  RST     18H                     ; pop word DE
1807   0567             
1808   0567 DD CB 3E 76         BIT     6,(IX+$3E)              ; test FLAGS - compiler mode ?
1809   056B             
1810   056B 20 F4               JR      NZ,L0561                ; loop back while in compiler mode.
1811   056D             
1812   056D FD E9               JP      (IY)                    ; to 'next'.
1813   056F             
1814   056F             ; -----------------
1815   056F             ; THE 'RETYPE' WORD
1816   056F             ; -----------------
1817   056F             ; Allows user to edit the input line. Turns cursor to [?].
1818   056F             
1819   056F 52 45 54 59 L056F:  DEFM    "RETYP"                 ; 'name field'
1819   0573 50 
1820   0574 C5                  DEFB    'E' + $80
1821   0575             
1822   0575 8B 05               DEFW    L058B                   ; 'link field'
1823   0577             
1824   0577 06          L0577:  DEFB    $06                     ; 'name length field'
1825   0578             
1826   0578 7A 05       L0578:  DEFW    L057A                   ; 'code field'
1827   057A             
1828   057A             ; ---
1829   057A             
1830   057A CD EA 02    L057A:  CALL    L02EA                   ; routine sets logical line.
1831   057D             
1832   057D CD 76 02            CALL    L0276                   ; routine pr_cursor
1833   0580             
1834   0580 36 BF               LD      (HL),$BF                ; the inverse [?] character
1835   0582             
1836   0582 18 10               JR      L0594                   ; forward to join the QUERY routine.
1837   0584             
1838   0584             ; ----------------
1839   0584             ; THE 'QUERY' WORD
1840   0584             ; ----------------
1841   0584             ; Clears input buffer, then accepts characters until ENTER pressed.
1842   0584             ; Buffer can be edited as usual and is limited to 22 lines.
1843   0584             
1844   0584 51 55 45 52 L0584:  DEFM    "QUER"                  ; 'name field'
1845   0588 D9                  DEFB    'Y' + $80
1846   0589             
1847   0589 05 05               DEFW    L0505                   ; 'link field'
1848   058B             
1849   058B 05          L058B:  DEFB    $05                     ; 'name length field'
1850   058C             
1851   058C 8E 05       L058C:  DEFW    L058E                   ; 'code field'
1852   058E             
1853   058E             ; ---
1854   058E             
1855   058E CD D8 02    L058E:  CALL    L02D8                   ; routine SETBUF
1856   0591             
1857   0591 CD 76 02            CALL    L0276                   ; routine pr_cursor
1858   0594             
1859   0594             ; ->
1860   0594 21 28 3C    L0594:  LD      HL,$3C28                ; fetch STATIN
1861   0597 CB C6               SET     0,(HL)                  ;
1862   0599 CB AE               RES     5,(HL)                  ; (bit 5 set by interrupt when the user
1863   059B                                                     ; presses the ENTER key)
1864   059B             
1865   059B CB 6E       L059B:  BIT     5,(HL)                  ; wait for interrupt to set the bit.
1866   059D 28 FC               JR      Z,L059B                 ; loop until.
1867   059F             
1868   059F CD 25 02            CALL    L0225                   ; routine DEL-CURSOR
1869   05A2 FD E9               JP      (IY)                    ; to 'next'.
1870   05A4             
1871   05A4             ; ---------------
1872   05A4             ; THE 'WORD' WORD
1873   05A4             ; ---------------
1874   05A4             ; WORD text
1875   05A4             ; ( delimiter -- address )
1876   05A4             ; Takes text out of the input buffer up as far as a delimiter, and copies it
1877   05A4             ; to pad, starting at the second byte there. Puts the length (not including
1878   05A4             ; the delimiter) in the first byte of the pad, and stacks the address of the
1879   05A4             ; first byte of the pad.
1880   05A4             ; At most 253 characters are taken from the input buffer. If there are more
1881   05A4             ; left before the delimiter, then the first byte of the pad shows 254.
1882   05A4             ; Initial delimiters are ignored.
1883   05A4             
1884   05A4 57 4F 52    L05A4:  DEFM    "WOR"                   ; 'name field'
1885   05A7 C4                  DEFB    'D' + $80
1886   05A8             
1887   05A8 77 05               DEFW    L0577                   ; 'link field'
1888   05AA             
1889   05AA 04          L05AA:  DEFB    $04                     ; 'name length field'
1890   05AB             
1891   05AB AD 05       L05AB:  DEFW    L05AD                   ; 'code field'
1892   05AD             
1893   05AD             ; ---
1894   05AD             
1895   05AD DF          L05AD:  RST     18H                     ; pop word DE
1896   05AE 21 FE 27            LD      HL,$27FE                ; set HL to penultimate byte of 'pad'.
1897   05B1 06 FD               LD      B,$FD                   ; the count is 253.
1898   05B3             
1899   05B3 36 20       L05B3:  LD      (HL),$20                ; insert a space in pad.
1900   05B5 2B                  DEC     HL                      ; decrement the address.
1901   05B6 10 FB               DJNZ    L05B3                   ; repeat for the 253 locations.
1902   05B8             
1903   05B8 D5                  PUSH    DE                      ; save the delimiter.
1904   05B9 EB                  EX      DE,HL                   ; save in HL also, DE is start of pad.
1905   05BA             
1906   05BA D7                  RST     10H                     ; stack data word DE
1907   05BB D1                  POP     DE                      ; retrieve the delimiter.
1908   05BC             
1909   05BC CD E1 05            CALL    L05E1                   ;
1910   05BF             
1911   05BF 04                  INC     B
1912   05C0 05                  DEC     B
1913   05C1 28 03               JR      Z,L05C6                 ;
1914   05C3             
1915   05C3 01 FF 00            LD      BC,$00FF
1916   05C6             
1917   05C6 21 01 27    L05C6:  LD      HL,$2701
1918   05C9 71                  LD      (HL),C
1919   05CA 23                  INC     HL
1920   05CB 3E FC               LD      A,$FC
1921   05CD B9                  CP      C
1922   05CE 30 01               JR      NC,L05D1                ;
1923   05D0             
1924   05D0 4F                  LD      C,A
1925   05D1             
1926   05D1 0C          L05D1:  INC     C
1927   05D2 D5                  PUSH    DE
1928   05D3 C5                  PUSH    BC
1929   05D4 EB                  EX      DE,HL
1930   05D5 ED B0               LDIR
1931   05D7 C1                  POP     BC
1932   05D8 D1                  POP     DE
1933   05D9 0D                  DEC     C
1934   05DA CD DA 07            CALL    L07DA                   ;
1935   05DD FD E9               JP      (IY)                    ; to 'next'.
1936   05DF             
1937   05DF             ; --------------------------------
1938   05DF             ; THE 'GET BUFFER TEXT' SUBROUTINE
1939   05DF             ; --------------------------------
1940   05DF             ; Called from FIND, NUMBER and XXXXX. Word may have leading spaces and is
1941   05DF             ; terminated by a space or newline (zero).
1942   05DF             ; It is also used to find the end of a comment delimited by ')'.
1943   05DF             ;
1944   05DF             ; =>
1945   05DF 1E 20       L05DF:  LD      E,$20                   ; set a space as the skip character.
1946   05E1             
1947   05E1             ; =>called with E holding delimiter.
1948   05E1             ;
1949   05E1 2A 24 3C    L05E1:  LD      HL,($3C24)              ; fetch L_HALF - start of screen buffer.
1950   05E4 22 1E 3C            LD      ($3C1E),HL              ; make INSCRN start of logical line the
1951   05E7                                                     ; same.
1952   05E7             
1953   05E7 01 00 00            LD      BC,$0000                ; initialize letter count to zero.
1954   05EA             
1955   05EA             ; -> loop
1956   05EA 23          L05EA:  INC     HL                      ; increment screen address.
1957   05EB 7E                  LD      A,(HL)                  ; fetch character to A.
1958   05EC BB                  CP      E                       ; compare to character in E.
1959   05ED 28 FB               JR      Z,L05EA                 ; loop while character matches.
1960   05EF             
1961   05EF A7                  AND     A                       ; test for zero (at $2700?)
1962   05F0 28 0E               JR      Z,L0600                 ; forward if so.
1963   05F2             
1964   05F2             ; a word has been found on the screen line.
1965   05F2             
1966   05F2 E5                  PUSH    HL                      ; save pointer to start of word.
1967   05F3             
1968   05F3 03          L05F3:  INC     BC                      ; increment the letter count.
1969   05F4 23                  INC     HL                      ; increment the screen pointer.
1970   05F5             
1971   05F5 7E                  LD      A,(HL)                  ; fetch new character
1972   05F6 A7                  AND     A                       ; test for zero.
1973   05F7 28 03               JR      Z,L05FC                 ; skip forward as at end of word.
1974   05F9             
1975   05F9 BB                  CP      E                       ; compare to the skip character.
1976   05FA 20 F7               JR      NZ,L05F3                ; loop back if still within a word.
1977   05FC             
1978   05FC D1          L05FC:  POP     DE                      ; retrieve pointer to start of word.
1979   05FD             
1980   05FD AF                  XOR     A                       ;; clear A
1981   05FE B8                  CP      B                       ;; compare to B zero
1982   05FF             
1983   05FF C9                  RET                             ; return. with carry reset for success.
1984   0600             
1985   0600             ; ---
1986   0600             
1987   0600 D5          L0600:  PUSH    DE                      ; save delimiter
1988   0601             
1989   0601 CD B0 02            CALL    L02B0                   ; routine find zerobyte
1990   0604 E2 14 06            JP      PO,L0614                ; jump if found to exit failure
1991   0607             
1992   0607 ED 5B 24 3C         LD      DE,($3C24)              ; else set DE from L_HALF
1993   060B CD FA 07            CALL    L07FA                   ; routine SPACE_FILL (DE-HL)
1994   060E 22 24 3C            LD      ($3C24),HL              ; set L_HALF to next line
1995   0611             
1996   0611 D1                  POP     DE                      ; restore delimiter
1997   0612             
1998   0612 18 CD               JR      L05E1                   ; loop back using new line.
1999   0614             
2000   0614             ; ---
2001   0614             
2002   0614             ; branch here if a word not found.
2003   0614             
2004   0614 EB          L0614:  EX      DE,HL                   ; DE addresses cursor.
2005   0615 C1                  POP     BC                      ; discard saved delimiter
2006   0616 01 00 00            LD      BC,$0000                ; set BC, to zero
2007   0619 37                  SCF                             ; signal not found
2008   061A C9                  RET                             ; return.
2009   061B             
2010   061B             ; --------------------------------
2011   061B             ; The 'stack length' Internal Word
2012   061B             ; --------------------------------
2013   061B             ; used once only from LINE to check for any extraneous text that is not a Word
2014   061B             ; or a Number.
2015   061B             
2016   061B 1D 06       L061B:  DEFW    L061D                   ; headerless 'code field'
2017   061D             
2018   061D             ; ---
2019   061D             
2020   061D CD DF 05    L061D:  CALL    L05DF                   ; get buffer
2021   0620             
2022   0620 50                  LD      D,B                     ; transfer length of word
2023   0621 59                  LD      E,C                     ; from BC to DE
2024   0622 D7                  RST     10H                     ; push word DE
2025   0623 FD E9               JP      (IY)                    ; to 'next'.
2026   0625             
2027   0625             
2028   0625             ; ----------------
2029   0625             ; THE 'VLIST' WORD
2030   0625             ; ----------------
2031   0625             ; List dictionary to screen, including words in ROM.
2032   0625             ; (no pause after 18 lines)
2033   0625             
2034   0625 56 4C 49 53 L0625:  DEFM    "VLIS"                  ; 'name field'
2035   0629 D4                  DEFB    'T' + $80
2036   062A             
2037   062A AA 05               DEFW    L05AA                   ; 'link field'
2038   062C             
2039   062C 05          L062C:  DEFB    $05                     ; 'name length field'
2040   062D             
2041   062D 2F 06       L062D:  DEFW    L062F                   ; 'code field'
2042   062F             
2043   062F             ; ---
2044   062F             
2045   062F 3E 0D       L062F:  LD      A,$0D                   ; prepare a newline
2046   0631             
2047   0631 CF                  RST     08H                     ; print it.
2048   0632             
2049   0632 0E 00               LD      C,$00                   ; set a flag for 'do all names'.
2050   0634             
2051   0634 18 0E               JR      L0644                   ; forward to FIND.
2052   0636             
2053   0636             
2054   0636             ; ---------------
2055   0636             ; THE 'FIND' WORD
2056   0636             ; ---------------
2057   0636             ; ( -- compilation address )
2058   0636             ; Leaves compilation address of first word in input buffer, if defined in
2059   0636             ; context vocabulary; else 0.
2060   0636             
2061   0636 46 49 4E    L0636:  DEFM    "FIN"                   ; 'name field'
2062   0639 C4                  DEFB    'D' + $80
2063   063A             
2064   063A 2C 06               DEFW    L062C                   ; 'link field'
2065   063C             
2066   063C 04          L063C:  DEFB    $04                     ; 'name length field'
2067   063D             
2068   063D 3F 06       L063D:  DEFW    L063F                   ; 'code field'
2069   063F             
2070   063F             ; ---
2071   063F             
2072   063F CD DF 05    L063F:  CALL    L05DF                   ; get buffer word, gets length in C.
2073   0642             
2074   0642 38 46               JR      C,L068A                 ; back if null to stack word zero
2075   0644             
2076   0644             ; ->
2077   0644             
2078   0644 2A 33 3C    L0644:  LD      HL,($3C33)              ; fetch value of system variable CONTEXT
2079   0647 7E                  LD      A,(HL)                  ; extract low byte of address.
2080   0648 23                  INC     HL                      ; increment pointer.
2081   0649 66                  LD      H,(HL)                  ; extract high byte of address.
2082   064A 6F                  LD      L,A                     ; address now in HL.
2083   064B             
2084   064B             ; The address points to the 'name length field' of the most recent word in the
2085   064B             ; Dictionary.
2086   064B             
2087   064B             
2088   064B 7E          L064B:  LD      A,(HL)                  ; fetch addressed byte.
2089   064C E6 3F               AND     $3F                     ; discount bit 6, the immediate word
2090   064E                                                     ; indicator, to give length 1-31
2091   064E             
2092   064E 28 2F               JR      Z,L067F                 ; a 'zero' length indicates this is a
2093   0650                                                     ; link like the example at the end of
2094   0650                                                     ; this ROM.
2095   0650             
2096   0650 A9                  XOR     C                       ; match against C.
2097   0651 28 04               JR      Z,L0657                 ; skip forward if lengths match.
2098   0653             
2099   0653 79                  LD      A,C                     ; test flag C
2100   0654 A7                  AND     A                       ; for value zero.
2101   0655 20 28               JR      NZ,L067F                ; forward if C not zero.
2102   0657             
2103   0657             ; else a name that matches the search length or all names are required - VLIST.
2104   0657             
2105   0657             
2106   0657 D5          L0657:  PUSH    DE                      ; preserve DE
2107   0658 E5                  PUSH    HL                      ; preserve 'name length field' pointer.
2108   0659             
2109   0659 CD E8 15            CALL    L15E8                   ; routine WORDSTART finds start of name.
2110   065C                                                     ; A is returned as zero.
2111   065C             
2112   065C B1                  OR      C                       ; test C for zero
2113   065D 28 17               JR      Z,L0676                 ; branch forward to print if in VLIST.
2114   065F             
2115   065F             ; else the search is for a specific word and a word with same length, at least,
2116   065F             ; has been found.
2117   065F             
2118   065F 41                  LD      B,C                     ; copy the length to counter B.
2119   0660             
2120   0660 1A          L0660:  LD      A,(DE)                  ; fetch first letter of match word.
2121   0661             
2122   0661 CD 07 08            CALL    L0807                   ; routine UPPERCASE
2123   0664             
2124   0664 13                  INC     DE                      ; update pointer (in lower screen)
2125   0665 AE                  XOR     (HL)                    ; match against letter (in dictionary).
2126   0666 E6 7F               AND     $7F                     ; disregard any inverted bit.
2127   0668 23                  INC     HL                      ; increment dictionary pointer.
2128   0669             
2129   0669 20 12               JR      NZ,L067D                ; exit loop to try next link if no match
2130   066B             
2131   066B 10 F3               DJNZ    L0660                   ; else loop back for all letters.
2132   066D             
2133   066D             ; Oh Frabjous day - a match.
2134   066D             
2135   066D D1                  POP     DE                      ; pop 'name length field' pointer.
2136   066E 13                  INC     DE                      ; increment to point to compilation
2137   066F                                                     ; address.
2138   066F D7                  RST     10H                     ; stack date word DE.
2139   0670             
2140   0670             ; the remaining task is to clean up the input buffer in the lower screen.
2141   0670             
2142   0670 D1                  POP     DE                      ; pop the DE - screen pointer.
2143   0671             
2144   0671 CD DA 07            CALL    L07DA                   ; clean up - backfill with spaces.
2145   0674             
2146   0674 FD E9               JP      (IY)                    ; to 'next'.
2147   0676             
2148   0676             ; -----------------------
2149   0676             ; THE 'PRINT NAME' BRANCH
2150   0676             ; -----------------------
2151   0676             ; This branch is taken from the above loop when all found words are to be
2152   0676             ; printed by VLIST. It takes its time as if the user has expanded the
2153   0676             ; dictionary then the list will scroll off the top of the screen. By waiting
2154   0676             ; for an interrupt each time, it ensures that a standard listing takes about
2155   0676             ; three seconds and there is ample opportunity to press BREAK to stop at a
2156   0676             ; certain point.
2157   0676             
2158   0676 CD FB 17    L0676:  CALL    L17FB                   ; routine print string and space
2159   0679             
2160   0679 76                  HALT                            ; wait for an interrupt.
2161   067A             
2162   067A CD E4 04            CALL    L04E4                   ; routine checks BREAK key.
2163   067D             
2164   067D E1          L067D:  POP     HL                      ; restore 'name length field' pointer
2165   067E D1                  POP     DE                      ; restore DE
2166   067F             
2167   067F 2B          L067F:  DEC     HL                      ; point to high byte of 'link field'
2168   0680 7E                  LD      A,(HL)                  ; hold it in A.
2169   0681 2B                  DEC     HL                      ; point to low byte of 'link field'
2170   0682 6E                  LD      L,(HL)                  ; transfer address of the new
2171   0683 67                  LD      H,A                     ; 'name length field' to HL pointer.
2172   0684             
2173   0684 B5                  OR      L                       ; test if address is zero - for the
2174   0685                                                     ; last entry in the linked list.
2175   0685             
2176   0685 20 C4               JR      NZ,L064B                ; loop back while this is not the
2177   0687                                                     ; last entry in the vocabulary.
2178   0687             
2179   0687 C3          L0687:  DEFB    $C3                     ; A JP instruction i.e. JP L068A
2180   0688             
2181   0688             ; Note. The intention is to jump past the headerless code word for the internal
2182   0688             ; word stk_zero. Since the word that would follow the first byte of the jump
2183   0688             ; instruction would be identical to the word it is jumping over then the word
2184   0688             ; can be omitted. Only saves one byte but this is back in 1983.
2185   0688             
2186   0688             ; ----------------------------
2187   0688             ; The 'stk-zero' Internal Word
2188   0688             ; ----------------------------
2189   0688             ; (  -- 0 )
2190   0688             
2191   0688 8A 06       L0688:  DEFW    L068A                   ; headerless 'code field'
2192   068A             
2193   068A             ; ---
2194   068A             
2195   068A 11 00 00    L068A:  LD      DE,$0000                ; load DE with the value zero.
2196   068D D7                  RST     10H                     ; stack Data Word DE
2197   068E             
2198   068E FD E9               JP      (IY)                    ; to 'next'.
2199   0690             
2200   0690             ; ------------------
2201   0690             ; THE 'EXECUTE' WORD
2202   0690             ; ------------------
2203   0690             ; ( compilation address --  )
2204   0690             ; Executes the word with the given compilation address.
2205   0690             
2206   0690 45 58 45 43 L0690:  DEFM    "EXECUT"                ; 'name field'
2206   0694 55 54 
2207   0696 C5                  DEFB    'E' + $80
2208   0697             
2209   0697 3C 06               DEFW    L063C                   ; 'link field'
2210   0699             
2211   0699 07          L0699:  DEFB    $07                     ; 'name length field'
2212   069A             
2213   069A 9C 06       L069A:  DEFW    L069C                   ; 'code field'
2214   069C             
2215   069C             ; ---
2216   069C             
2217   069C DF          L069C:  RST     18H
2218   069D             
2219   069D C3 BF 04            JP      L04BF                   ;
2220   06A0             
2221   06A0             ; -----------------
2222   06A0             ; THE 'NUMBER' WORD
2223   06A0             ; -----------------
2224   06A0             ; Takes a number from the start of the input buffer. Leaves the number and
2225   06A0             ; a non-zero address on the stack. (The address is the compilation address
2226   06A0             ; of a literal compiler, so that if you then say EXECUTE, the literal compiler
2227   06A0             ; compiles the number into the dictionary as a literal - for an integer it
2228   06A0             ; is 4102, for a floating point number it is 4181).
2229   06A0             ; If no valid number then leaves just 0 on the stack.
2230   06A0             
2231   06A0 4E 55 4D 42 L06A0:  DEFM    "NUMBE"                 ; 'name field'
2231   06A4 45 
2232   06A5 D2                  DEFB    'R' + $80
2233   06A6             
2234   06A6 99 06               DEFW    L0699                   ; 'link field'
2235   06A8             
2236   06A8 06          L06A8:  DEFB    $06                     ; 'name length field'
2237   06A9             
2238   06A9 AB 06       L06A9:  DEFW    L06AB                   ; 'code field'
2239   06AB             
2240   06AB             ; ---
2241   06AB             
2242   06AB CD DF 05    L06AB:  CALL    L05DF                   ; get buffer
2243   06AE             
2244   06AE 38 DA               JR      C,L068A                 ; if empty stack word zero.
2245   06B0             
2246   06B0 C5                  PUSH    BC
2247   06B1 D5                  PUSH    DE
2248   06B2             
2249   06B2 CD 4C 07            CALL    L074C                   ;
2250   06B5             
2251   06B5 20 05               JR      NZ,L06BC                ;
2252   06B7             
2253   06B7 11 06 10            LD      DE,$1006                ; addr literal?
2254   06BA 18 58               JR      L0714                   ;
2255   06BC             
2256   06BC             ; ---
2257   06BC             
2258   06BC DF          L06BC:  RST     18H                     ; pop word DE
2259   06BD 11 00 00            LD      DE,$0000
2260   06C0 D7                  RST     10H                     ; push word DE
2261   06C1 11 00 45            LD      DE,$4500
2262   06C4 C1                  POP     BC
2263   06C5 C5                  PUSH    BC
2264   06C6 0A                  LD      A,(BC)
2265   06C7 FE 2D               CP      $2D                     ; is it '-' ?
2266   06C9 20 03               JR      NZ,L06CE                ;
2267   06CB             
2268   06CB 16 C5               LD      D,$C5
2269   06CD 03                  INC     BC
2270   06CE D7          L06CE:  RST     10H                     ; push word DE
2271   06CF 50                  LD      D,B
2272   06D0 59                  LD      E,C
2273   06D1 2B                  DEC     HL
2274   06D2 2B                  DEC     HL
2275   06D3             
2276   06D3 CD 23 07    L06D3:  CALL    L0723                   ; routine GET_DECIMAL
2277   06D6             
2278   06D6 23                  INC     HL
2279   06D7 34                  INC     (HL)
2280   06D8 2B                  DEC     HL
2281   06D9 30 F8               JR      NC,L06D3                ;
2282   06DB             
2283   06DB FE FE               CP      $FE
2284   06DD 20 3D               JR      NZ,L071C                ;
2285   06DF             
2286   06DF CD 23 07    L06DF:  CALL    L0723                   ; routine GET_DECIMAL
2287   06E2             
2288   06E2 30 FB               JR      NC,L06DF                ;
2289   06E4             
2290   06E4 C6 30               ADD     A,$30                   ; add '0' converting to letter.
2291   06E6 CD 7B 07            CALL    L077B                   ;
2292   06E9 20 04               JR      NZ,L06EF                ;
2293   06EB             
2294   06EB 1E 00               LD      E,$00
2295   06ED 18 0E               JR      L06FD                   ;
2296   06EF             
2297   06EF E6 DF       L06EF:  AND     $DF                     ;
2298   06F1             
2299   06F1 FE 45               CP      $45                     ; is it 'E' - extended format?
2300   06F3 20 27               JR      NZ,L071C                ;
2301   06F5             
2302   06F5 E5                  PUSH    HL
2303   06F6             
2304   06F6 CD 4C 07            CALL    L074C                   ;
2305   06F9             
2306   06F9 DF                  RST     18H                     ; pop word DE
2307   06FA E1                  POP     HL
2308   06FB 20 1F               JR      NZ,L071C                ;
2309   06FD             
2310   06FD CD 40 07    L06FD:  CALL    L0740                   ;
2311   0700 28 0F               JR      Z,L0711                 ;
2312   0702             
2313   0702 23                  INC     HL
2314   0703 7E                  LD      A,(HL)
2315   0704 E6 7F               AND     $7F
2316   0706 83                  ADD     A,E
2317   0707             
2318   0707 FA 1C 07            JP      M,L071C                 ; forward +->
2319   070A             
2320   070A 28 10               JR      Z,L071C                 ; forward +->
2321   070C             
2322   070C AE                  XOR     (HL)
2323   070D E6 7F               AND     $7F
2324   070F AE                  XOR     (HL)
2325   0710 77                  LD      (HL),A
2326   0711 11 55 10    L0711:  LD      DE,L1055                ; stk_fp
2327   0714 D7          L0714:  RST     10H                     ; push word DE
2328   0715 D1                  POP     DE
2329   0716 C1                  POP     BC
2330   0717 CD DA 07            CALL    L07DA                   ;
2331   071A FD E9               JP      (IY)                    ; to 'next'.
2332   071C             
2333   071C             ; ---
2334   071C             
2335   071C             ; +->
2336   071C E1          L071C:  POP     HL
2337   071D E1                  POP     HL
2338   071E DF                  RST     18H                     ; pop word DE
2339   071F DF                  RST     18H                     ; pop word DE
2340   0720 C3 8A 06            JP      L068A                   ;
2341   0723             
2342   0723             ; ----------------------------
2343   0723             ; THE 'GET DECIMAL' SUBROUTINE
2344   0723             ; ----------------------------
2345   0723             ; Fetch character and return with carry set if after conversion is not in
2346   0723             ; range 0 to 9.
2347   0723             
2348   0723 1A          L0723:  LD      A,(DE)
2349   0724 13                  INC     DE
2350   0725 D6 30               SUB     $30                     ; subtract '0'
2351   0727 D8                  RET     C                       ; return if was less than '0'
2352   0728             
2353   0728 FE 0A               CP      $0A                     ; compare to ten.
2354   072A 3F                  CCF                             ; complement
2355   072B D8                  RET     C                       ; return - with carry set if over 9.
2356   072C             
2357   072C             ; ---------
2358   072C             ; normalize?
2359   072C             ; ---------
2360   072C             ; => from below only.
2361   072C 4F          L072C:  LD      C,A
2362   072D 7E                  LD      A,(HL)
2363   072E E6 F0               AND     $F0
2364   0730 C0                  RET     NZ
2365   0731             
2366   0731 79                  LD      A,C
2367   0732             
2368   0732             ; => (int/print_fp)
2369   0732 2B          L0732:  DEC     HL
2370   0733 2B                  DEC     HL
2371   0734 0E 03               LD      C,$03
2372   0736             
2373   0736 ED 6F       L0736:  RLD                             ;  A = xxxx3210  <--   7654<-3210 (HL)
2374   0738             
2375   0738 23                  INC     HL                      ;
2376   0739 0D                  DEC     C
2377   073A 20 FA               JR      NZ,L0736                ;
2378   073C             
2379   073C 35                  DEC     (HL)                    ; decrement exponent
2380   073D 2B                  DEC     HL                      ; point to start of BCD nibbles
2381   073E BF                  CP      A
2382   073F C9                  RET
2383   0740             
2384   0740             ; ---
2385   0740             
2386   0740             ; from ufloat to normalize 6-nibble mantissa
2387   0740             
2388   0740 06 06       L0740:  LD      B,$06                   ; six nibbles
2389   0742             
2390   0742 AF          L0742:  XOR     A
2391   0743             
2392   0743 CD 2C 07            CALL    L072C                   ;
2393   0746             
2394   0746 C0                  RET     NZ
2395   0747             
2396   0747 10 F9               DJNZ    L0742                   ;
2397   0749             
2398   0749 23                  INC     HL
2399   074A 70                  LD      (HL),B
2400   074B             
2401   074B C9                  RET
2402   074C             
2403   074C             ; ---------------------------
2404   074C             ; THE 'GET NUMBER' SUBROUTINE
2405   074C             ; ---------------------------
2406   074C             ; can be called twice by the above code for the word 'NUMBER'.
2407   074C             ; Once to get the first number encountered and sometimes, if in extended
2408   074C             ; format, the exponent as well.
2409   074C             
2410   074C D7          L074C:  RST     10H                     ; push word DE
2411   074D             
2412   074D CD B9 04            CALL    L04B9                   ; forth
2413   0750             
2414   0750 6B 08       L0750:  DEFW    L086B                   ; dup
2415   0752 96 08               DEFW    L0896                   ; C@
2416   0754 4B 10               DEFW    L104B                   ; stk-data
2417   0756 2D                  DEFB    $2D                     ;  chr '-'
2418   0757 4A 0C               DEFW    L0C4A                   ; =
2419   0759 6B 08               DEFW    L086B                   ; dup
2420   075B A9 0D               DEFW    L0DA9                   ; negate
2421   075D D2 08               DEFW    L08D2                   ; >R
2422   075F D2 0D               DEFW    L0DD2                   ; +
2423   0761 1F 0E               DEFW    L0E1F                   ; 1-
2424   0763 88 06               DEFW    L0688                   ; stk-zero
2425   0765 88 06               DEFW    L0688                   ; stk-zero
2426   0767 FF 08               DEFW    L08FF                   ; rot
2427   0769 8A 07       L0769:  DEFW    L078A                   ; convert
2428   076B FF 08               DEFW    L08FF                   ; rot
2429   076D DF 08               DEFW    L08DF                   ; R>
2430   076F 94 0D               DEFW    L0D94                   ; pos
2431   0771 FF 08               DEFW    L08FF                   ; rot
2432   0773 79 08               DEFW    L0879                   ; drop
2433   0775 85 08               DEFW    L0885                   ; swap
2434   0777 0E 1A               DEFW    L1A0E                   ; end-forth.
2435   0779             
2436   0779 DF          L0779:  RST     18H                     ; pop word DE
2437   077A 1A                  LD      A,(DE)
2438   077B             
2439   077B FE 20       L077B:  CP      $20
2440   077D C8                  RET     Z
2441   077E             
2442   077E A7                  AND     A
2443   077F C9                  RET
2444   0780             
2445   0780             ; ------------------
2446   0780             ; THE 'CONVERT' WORD
2447   0780             ; ------------------
2448   0780             ; (  ud1, addr1 -- ud2, addr2  )
2449   0780             : Accumulates digits from text into an unsigned double length
2450   0780             ; number ud1: for each digit, the double length accumulator is
2451   0780             ; multiplied by the system number base and the digit (converted
2452   0780             ; from ASCII) is added on. The text starts at addr1 + 1. addr2 is
2453   0780             ; the address of the first unconvertible character, ud2 is the
2454   0780             ; final value of the accumulator.
2455   0780             
2456   0780 43 4F 4E 56 L0780:  DEFM    "CONVER"                ; 'name field'
2456   0784 45 52 
2457   0786 D4                  DEFB    'T' + $80
2458   0787             
2459   0787 A8 06               DEFW    L06A8                   ; 'link field'
2460   0789             
2461   0789 07          L0789:  DEFB    $07                     ; 'name length field'
2462   078A             
2463   078A C3 0E       L078A:  DEFW    L0EC3                   ; 'code field' - docolon
2464   078C             
2465   078C             ; ---
2466   078C             
2467   078C 09 0E       L078C:  DEFW    L0E09                   ; 1+
2468   078E 6B 08       L078E:  DEFW    L086B                   ; dup
2469   0790 D2 08       L0790:  DEFW    L08D2                   ; >R
2470   0792 96 08       L0792:  DEFW    L0896                   ; C@
2471   0794 B8 07       L0794:  DEFW    L07B8                   ; stk_digit
2472   0796 83 12       L0796:  DEFW    L1283                   ; ?branch
2473   0798 1B 00       L0798:  DEFW    $001B                   ; to 0799 + 1B = $07B4
2474   079A             
2475   079A 85 08       L079A:  DEFW    L0885                   ; swap
2476   079C 8A 04       L079C:  DEFW    L048A                   ; get base
2477   079E 96 08       L079E:  DEFW    L0896                   ; C@
2478   07A0 A8 0C       L07A0:  DEFW    L0CA8                   ; u*
2479   07A2 79 08       L07A2:  DEFW    L0879                   ; drop
2480   07A4 FF 08       L07A4:  DEFW    L08FF                   ; rot
2481   07A6 8A 04       L07A6:  DEFW    L048A                   ; get base
2482   07A8 96 08       L07A8:  DEFW    L0896                   ; C@
2483   07AA A8 0C       L07AA:  DEFW    L0CA8                   ; U*
2484   07AC EE 0D       L07AC:  DEFW    L0DEE                   ; D+
2485   07AE DF 08       L07AE:  DEFW    L08DF                   ; R>
2486   07B0 76 12       L07B0:  DEFW    L1276                   ; branch
2487   07B2 D9 FF       L07B2:  DEFW    $FFD9                   ; loop back to L078C
2488   07B4             
2489   07B4 DF 08       L07B4:  DEFW    L08DF                   ; R>
2490   07B6 B6 04       L07B6:  DEFW    L04B6                   ; exit
2491   07B8             
2492   07B8             ; -----------------------------
2493   07B8             ; The 'stk_digit' Internal Word
2494   07B8             ; -----------------------------
2495   07B8             
2496   07B8 BA 07       L07B8:  DEFW    L07BA                   ; headerless 'code field'
2497   07BA             
2498   07BA             ; ---
2499   07BA             
2500   07BA DF          L07BA:  RST     18H                     ; pop word DE
2501   07BB             
2502   07BB 7B                  LD      A,E                     ; character to A
2503   07BC             
2504   07BC CD 07 08            CALL    L0807                   ; to_upper
2505   07BF             
2506   07BF C6 D0               ADD     A,$D0                   ; add to give carry with '0' and more.
2507   07C1             
2508   07C1 30 14               JR      NC,L07D7                ; if less than '0' push byte 0 false.
2509   07C3             
2510   07C3 FE 0A               CP      $0A                     ; compare to ten.
2511   07C5 38 06               JR      C,L07CD                 ; forward to stack bytes 0 - 9.
2512   07C7             
2513   07C7 C6 EF               ADD     A,$EF                   ;
2514   07C9 30 0C               JR      NC,L07D7                ; push word false 0.
2515   07CB             
2516   07CB C6 0A               ADD     A,$0A
2517   07CD             
2518   07CD DD BE 3F    L07CD:  CP      (IX+$3F)                ; compare to BASE
2519   07D0 30 05               JR      NC,L07D7                ; push word false 0.
2520   07D2             
2521   07D2             ; else digit is within range of number base
2522   07D2             
2523   07D2 16 00               LD      D,$00
2524   07D4 5F                  LD      E,A
2525   07D5 D7                  RST     10H                     ; push word DE
2526   07D6 37                  SCF                             ; set carry to signal true
2527   07D7             
2528   07D7 C3 21 0C    L07D7:  JP      L0C21                   ; push word 1 or 0
2529   07DA             
2530   07DA             ; ---
2531   07DA             ;       ??
2532   07DA             ; ---
2533   07DA             
2534   07DA 62          L07DA:  LD      H,D
2535   07DB 6B                  LD      L,E
2536   07DC 03                  INC     BC
2537   07DD 09                  ADD     HL,BC
2538   07DE E5                  PUSH    HL
2539   07DF DD CB 3E 66         BIT     4,(IX+$3E)              ; FLAGS
2540   07E3 CC 7F 09            CALL    Z,L097F                 ; pr_string
2541   07E6             
2542   07E6 CD B0 02            CALL    L02B0                   ; curs?
2543   07E9             
2544   07E9 D1                  POP     DE
2545   07EA A7                  AND     A
2546   07EB ED 52               SBC     HL,DE
2547   07ED 44                  LD      B,H
2548   07EE 4D                  LD      C,L
2549   07EF 2A 1E 3C            LD      HL,($3C1E)              ; INSCRN
2550   07F2 23                  INC     HL
2551   07F3 EB                  EX      DE,HL
2552   07F4 38 05               JR      C,L07FB                 ;
2553   07F6             
2554   07F6 28 02               JR      Z,L07FA                 ; forward to SPACE_FILL.
2555   07F8             
2556   07F8 ED B0               LDIR
2557   07FA             
2558   07FA             ; ------------------------
2559   07FA             ; The 'SPACE FILL' routine
2560   07FA             ; ------------------------
2561   07FA             ; -> from cls
2562   07FA             
2563   07FA A7          L07FA:  AND     A                       ; prepare to subtract two screen
2564   07FB                                                     ; pointers.
2565   07FB             
2566   07FB ED 52       L07FB:  SBC     HL,DE                   ; number of bytes in HL.
2567   07FD EB                  EX      DE,HL                   ; now in DE, HL = start of area.
2568   07FE             
2569   07FE 7A          L07FE:  LD      A,D                     ; check if the
2570   07FF B3                  OR      E                       ; counter is zero.
2571   0800 C8                  RET     Z                       ; return if so.                 >>
2572   0801             
2573   0801 36 20               LD      (HL),$20                ; insert a space character.
2574   0803 23                  INC     HL                      ; next address.
2575   0804 1B                  DEC     DE                      ; decrement byte counter.
2576   0805 18 F7               JR      L07FE                   ; loop back to exit on zero.
2577   0807             
2578   0807             ; --------------------------
2579   0807             ; THE 'UPPERCASE' SUBROUTINE
2580   0807             ; --------------------------
2581   0807             ; converts characters to uppercase.
2582   0807             
2583   0807 E6 7F       L0807:  AND     $7F                     ; ignore inverse bit 7
2584   0809 FE 61               CP      $61                     ; compare to 'a'
2585   080B D8                  RET     C                       ; return if lower
2586   080C             
2587   080C FE 7B               CP      $7B                     ; compare to 'z' + 1
2588   080E D0                  RET     NC                      ; return if higher than 'z'
2589   080F             
2590   080F E6 5F               AND     $5F                     ; make uppercase
2591   0811 C9                  RET                             ; return.
2592   0812             
2593   0812             ; --------------
2594   0812             ; THE 'VIS' WORD
2595   0812             ; --------------
2596   0812             ; Allows copy-up mechanism and 'OK'.
2597   0812             
2598   0812 56 49       L0812:  DEFM    "VI"                    ; 'name field'
2599   0814 D3                  DEFB    'S' + $80
2600   0815             
2601   0815 89 07               DEFW    L0789                   ; 'link field'
2602   0817             
2603   0817 03          L0817:  DEFB    $03                     ; 'name length field'
2604   0818             
2605   0818 1A 08       L0818:  DEFW    L081A                   ; 'code field'
2606   081A             
2607   081A             ; ---
2608   081A             
2609   081A DD CB 3E A6 L081A:  RES     4,(IX+$3E)              ; update FLAGS signal visible mode.
2610   081E FD E9               JP      (IY)                    ; to 'next'.
2611   0820             
2612   0820             ; ----------------
2613   0820             ; THE 'INVIS' WORD
2614   0820             ; ----------------
2615   0820             ; Suppresses copy-up mechanism and 'OK'.
2616   0820             
2617   0820 49 4E 56 49 L0820:  DEFM    "INVI"                  ; 'name field'
2618   0824 D3                  DEFB    'S' + $80
2619   0825             
2620   0825 17 08               DEFW    L0817                   ; 'link field'
2621   0827             
2622   0827 05          L0827:  DEFB    $05                     ; 'name length field'
2623   0828             
2624   0828 2A 08       L0828:  DEFW    L082A                   ; 'code field'
2625   082A             
2626   082A             ; ---
2627   082A             
2628   082A DD CB 3E E6 L082A:  SET     4,(IX+$3E)              ; update FLAGS signal invisible mode.
2629   082E             
2630   082E FD E9               JP      (IY)                    ; to 'next'.
2631   0830             
2632   0830             
2633   0830             ; ---------------
2634   0830             ; THE 'FAST' WORD
2635   0830             ; ---------------
2636   0830             ; Fast mode - runs without error checks.
2637   0830             ; Debugged programs run 25% faster.
2638   0830             
2639   0830 46 41 53    L0830:  DEFM    "FAS"                   ; 'name field'
2640   0833 D4                  DEFB    'T' + $80
2641   0834             
2642   0834 27 08               DEFW    L0827                   ; 'link field'
2643   0836             
2644   0836 04          L0836:  DEFB    $04                     ; 'name length field'
2645   0837             
2646   0837 39 08       L0837:  DEFW    L0839                   ; 'code field'
2647   0839             
2648   0839             ; ---
2649   0839             
2650   0839 FD 21 B9 04 L0839:  LD      IY,L04B9                ; miss memory checks on return
2651   083D             
2652   083D FD E9               JP      (IY)                    ; to 'next'.
2653   083F             
2654   083F             ; ---------------
2655   083F             ; THE 'SLOW' WORD
2656   083F             ; ---------------
2657   083F             ; ( -- )
2658   083F             ; Slow mode with error checking.
2659   083F             ; Make IY point to a return routine that performs housekeeping.
2660   083F             
2661   083F             
2662   083F 53 4C 4F    L083F:  DEFM    "SLO"                   ; 'name field'
2663   0842 D7                  DEFB    'W' + $80
2664   0843             
2665   0843 36 08               DEFW    L0836                   ; 'link field'
2666   0845             
2667   0845 04          L0845:  DEFB    $04                     ; 'name length field'
2668   0846             
2669   0846             
2670   0846 48 08       L0846:  DEFW    L0848                   ; 'code field'
2671   0848             
2672   0848             ; ---
2673   0848             
2674   0848 FD 21 C8 04 L0848:  LD      IY,L04C8                ; set vector to memory checks each pass
2675   084C             
2676   084C FD E9               JP      (IY)                    ; to 'next'.
2677   084E             
2678   084E             ; ---------------------------------
2679   084E             ; THE 'DATA STACK TO BC' SUBROUTINE
2680   084E             ; ---------------------------------
2681   084E             ; Called on twenty occasions to fetch a word from the Data Stack into the
2682   084E             ; BC register pair. Very similar to RST 18H which does the same thing with the
2683   084E             ; DE register pair as the destination on 73 occasions.
2684   084E             ; In fact, as two Z80 restarts are unused, then 40 bytes of ROM code could have
2685   084E             ; been saved by making this a restart also.
2686   084E             
2687   084E 2A 3B 3C    L084E:  LD      HL,($3C3B)              ; fetch SPARE - start of Spare Memory.
2688   0851 2B                  DEC     HL                      ; decrement to point to last stack item
2689   0852 46                  LD      B,(HL)                  ; load high byte to B.
2690   0853 2B                  DEC     HL                      ; address low byte of word.
2691   0854 4E                  LD      C,(HL)                  ; and load to C.
2692   0855 22 3B 3C            LD      ($3C3B),HL              ; update the system variable SPARE to
2693   0858                                                     ; a location two bytes less than it was.
2694   0858 C9                  RET                             ; return.
2695   0859             
2696   0859             ; -----------------------------------------
2697   0859             ; THE 'CONTINUATION OF THE RST 18H' RESTART
2698   0859             ; -----------------------------------------
2699   0859             ; complete the operation of popping a word to DE from the data stack.
2700   0859             
2701   0859 2B          L0859:  DEC     HL                      ;
2702   085A 5E                  LD      E,(HL)                  ;
2703   085B 22 3B 3C            LD      ($3C3B),HL              ; update SPARE
2704   085E C9                  RET                             ; return.
2705   085F             
2706   085F             ; -----------------------------------------
2707   085F             ; THE 'CONTINUATION OF THE RST 10H' RESTART
2708   085F             ; -----------------------------------------
2709   085F             ; complete the operation of pushing a word in DE to the data stack.
2710   085F             
2711   085F 72          L085F:  LD      (HL),D                  ;
2712   0860 23                  INC     HL                      ;
2713   0861 22 3B 3C            LD      ($3C3B),HL              ; update SPARE
2714   0864 C9                  RET                             ; return.
2715   0865             
2716   0865             ; --------------
2717   0865             ; THE 'DUP' WORD
2718   0865             ; --------------
2719   0865             ; ( n -- n, n )
2720   0865             ; Duplicates the top of the stack.
2721   0865             
2722   0865 44 55       L0865:  DEFM    "DU"                    ; 'name field'
2723   0867 D0                  DEFB    'P' + $80
2724   0868             
2725   0868 45 08               DEFW    L0845                   ; 'link field'
2726   086A             
2727   086A 03          L086A:  DEFB    $03                     ; 'name length field'
2728   086B             
2729   086B 6D 08       L086B:  DEFW    L086D                   ; 'code field'
2730   086D             
2731   086D             ; ---
2732   086D             
2733   086D DF          L086D:  RST     18H                     ; unstack Data Word DE
2734   086E D7                  RST     10H                     ; stack Data Word DE
2735   086F D7                  RST     10H                     ; stack Data Word DE
2736   0870             
2737   0870 FD E9               JP      (IY)                    ; to 'next'.
2738   0872             
2739   0872             ; ---------------
2740   0872             ; THE 'DROP' WORD
2741   0872             ; ---------------
2742   0872             ; ( n -- )
2743   0872             ; Throws away the top of the stack.
2744   0872             
2745   0872 44 52 4F    L0872:  DEFM    "DRO"                   ; 'name field'
2746   0875 D0                  DEFB    'P' + $80
2747   0876             
2748   0876 6A 08               DEFW    L086A                   ; 'link field'
2749   0878             
2750   0878 04          L0878:  DEFB    $04                     ; 'name length field'
2751   0879             
2752   0879 7B 08       L0879:  DEFW    L087B                   ; 'code field'
2753   087B             
2754   087B             ; ---
2755   087B             
2756   087B DF          L087B:  RST     18H                     ; unstack Data Word DE
2757   087C FD E9               JP      (IY)                    ; to 'next'.
2758   087E             
2759   087E             ; ---------------
2760   087E             ; THE 'SWAP' WORD
2761   087E             ; ---------------
2762   087E             ; (n1, n2 -- n2, n1)
2763   087E             
2764   087E 53 57 41    L087E:  DEFM    "SWA"                   ; 'name field'
2765   0881 D0                  DEFB    'P' + $80
2766   0882             
2767   0882 78 08               DEFW    L0878                   ; 'link field'
2768   0884             
2769   0884 04          L0884:  DEFB    $04                     ; 'name length field'
2770   0885             
2771   0885 87 08       L0885:  DEFW    L0887                   ; 'code field'
2772   0887             
2773   0887             ; ---
2774   0887             
2775   0887 DF          L0887:  RST     18H                     ; pop word DE
2776   0888 CD 4E 08            CALL    L084E                   ; stk_to_bc
2777   088B D7                  RST     10H                     ; push word DE
2778   088C 50                  LD      D,B                     ;
2779   088D 59                  LD      E,C                     ;
2780   088E D7                  RST     10H                     ; push word DE
2781   088F             
2782   088F FD E9               JP      (IY)                    ; to 'next'.
2783   0891             
2784   0891             ; -------------
2785   0891             ; THE 'C@' WORD
2786   0891             ; -------------
2787   0891             ; (address -- byte)
2788   0891             ; Fetches the contents of a given address.
2789   0891             
2790   0891 43          L0891:  DEFB    'C'                     ; 'name field'
2791   0892 C0                  DEFB    '@' + $80
2792   0893             
2793   0893 84 08               DEFW    L0884                   ; 'link field'
2794   0895             
2795   0895 02          L0895:  DEFB    $02                     ; 'name length field'
2796   0896             
2797   0896 98 08       L0896:  DEFW    L0898                   ; 'code field'
2798   0898             
2799   0898             ; ---
2800   0898             
2801   0898 DF          L0898:  RST     18H                     ; pop word DE
2802   0899 1A                  LD      A,(DE)
2803   089A 5F                  LD      E,A
2804   089B 16 00               LD      D,$00
2805   089D             
2806   089D D7                  RST     10H                     ; push word DE
2807   089E             
2808   089E FD E9               JP      (IY)                    ; to 'next'.
2809   08A0             
2810   08A0             ; -------------
2811   08A0             ; THE 'C!' WORD
2812   08A0             ; -------------
2813   08A0             ; (n, address -- )
2814   08A0             ; Stores the less significant byte on n at a given address.
2815   08A0             
2816   08A0 43          L08A0:  DEFB    'C'                     ; 'name field'
2817   08A1 A1                  DEFB    '!' + $80
2818   08A2             
2819   08A2 95 08               DEFW    L0895                   ; 'link field'
2820   08A4             
2821   08A4 02          L08A4:  DEFB    $02                     ; 'name length field'
2822   08A5             
2823   08A5 A7 08       L08A5:  DEFW    L08A7                   ; 'code field'
2824   08A7             
2825   08A7             ; ---
2826   08A7             
2827   08A7 DF          L08A7:  RST     18H                     ; pop word DE
2828   08A8 CD 4E 08            CALL    L084E                   ; stk_to_bc
2829   08AB 79                  LD      A,C
2830   08AC 12                  LD      (DE),A
2831   08AD             
2832   08AD FD E9               JP      (IY)                    ; to 'next'.
2833   08AF             
2834   08AF             ; ------------
2835   08AF             ; THE '@' WORD
2836   08AF             ; ------------
2837   08AF             ; (address -- n)
2838   08AF             ; Leaves on stack the single length integer at the given address.
2839   08AF             
2840   08AF C0          L08AF:  DEFB    '@' + $80               ; 'name field'
2841   08B0             
2842   08B0 A4 08               DEFW    L08A4                   ; 'link field'
2843   08B2             
2844   08B2 01          L08B2:  DEFB    $01                     ; 'name length field'
2845   08B3             
2846   08B3 B5 08       L08B3:  DEFW    L08B5                   ; 'code field'
2847   08B5             
2848   08B5             ; ---
2849   08B5             
2850   08B5 DF          L08B5:  RST     18H                     ; pop word DE
2851   08B6             
2852   08B6 EB                  EX      DE,HL
2853   08B7 5E                  LD      E,(HL)
2854   08B8 23                  INC     HL
2855   08B9 56                  LD      D,(HL)
2856   08BA             
2857   08BA D7                  RST     10H                     ; push word DE
2858   08BB             
2859   08BB FD E9               JP      (IY)                    ; to 'next'.
2860   08BD             
2861   08BD             ; ------------
2862   08BD             ; THE '!' WORD
2863   08BD             ; ------------
2864   08BD             ; (n,address --)
2865   08BD             ; Stores the single-length integer n at the given address in memory.
2866   08BD             
2867   08BD A1          L08BD:  DEFB    '!' + $80               ; 'name field'
2868   08BE             
2869   08BE B2 08               DEFW    L08B2                   ; 'link field'
2870   08C0             
2871   08C0 01          L08C0:  DEFB    $01                     ; 'name length field'
2872   08C1             
2873   08C1 C3 08       L08C1:  DEFW    L08C3                   ; 'code field'
2874   08C3             
2875   08C3             ; ---
2876   08C3             
2877   08C3 DF          L08C3:  RST     18H                     ; pop word DE
2878   08C4 CD 4E 08            CALL    L084E                   ; stk_to_bc
2879   08C7 EB                  EX      DE,HL
2880   08C8 71                  LD      (HL),C
2881   08C9 23                  INC     HL
2882   08CA 70                  LD      (HL),B
2883   08CB             
2884   08CB FD E9               JP      (IY)                    ; to 'next'.
2885   08CD             
2886   08CD             ; -------------
2887   08CD             ; THE '>R' WORD
2888   08CD             ; -------------
2889   08CD             ; (n -- )
2890   08CD             ; Transfers top entry on data stack to return stack.
2891   08CD             ; It can be copied back using 'I'.
2892   08CD             
2893   08CD 3E          L08CD:  DEFB    '>'                     ; 'name field'
2894   08CE D2                  DEFB    'R' + $80
2895   08CF             
2896   08CF C0 08               DEFW    L08C0                   ; 'link field'
2897   08D1             
2898   08D1 02          L08D1:  DEFB    $02                     ; 'name length field'
2899   08D2             
2900   08D2 D4 08       L08D2:  DEFW    L08D4                   ; 'code field'
2901   08D4             
2902   08D4             ; ---
2903   08D4             
2904   08D4 DF          L08D4:  RST     18H
2905   08D5 C1                  POP     BC
2906   08D6 D5                  PUSH    DE
2907   08D7 C5                  PUSH    BC
2908   08D8 FD E9               JP      (IY)                    ; to 'next'.
2909   08DA             
2910   08DA             ; -------------
2911   08DA             ; THE 'R>' WORD
2912   08DA             ; -------------
2913   08DA             ; ( -- entry from return stack)
2914   08DA             ; Transfers top entry on return stack to data stack.
2915   08DA             
2916   08DA 52          L08DA:  DEFB    'R'                     ; 'name field'
2917   08DB BE                  DEFB    '>' + $80
2918   08DC             
2919   08DC D1 08               DEFW    L08D1                   ; 'link field'
2920   08DE             
2921   08DE 02          L08DE:  DEFB    $02                     ; 'name length field'
2922   08DF             
2923   08DF E1 08       L08DF:  DEFW    L08E1                   ; 'code field'
2924   08E1             
2925   08E1             ; ---
2926   08E1             
2927   08E1 C1          L08E1:  POP     BC
2928   08E2 D1                  POP     DE
2929   08E3 C5                  PUSH    BC
2930   08E4 D7                  RST     10H                     ; push word DE
2931   08E5 FD E9               JP      (IY)                    ; to 'next'.
2932   08E7             
2933   08E7             ; ---------------
2934   08E7             ; THE '?DUP' WORD
2935   08E7             ; ---------------
2936   08E7             ; (n -- n, n)    if n!=0.
2937   08E7             ; (n -- n)       if n=0.
2938   08E7             
2939   08E7 3F 44 55    L08E7:  DEFM    "?DU"                   ; 'name field'
2940   08EA D0                  DEFB    'P' + $80
2941   08EB             
2942   08EB DE 08               DEFW    L08DE                   ; 'link field'
2943   08ED             
2944   08ED 04          L08ED:  DEFB    $04                     ; 'name length field'
2945   08EE             
2946   08EE F0 08       L08EE:  DEFW    L08F0                   ; 'code field'
2947   08F0             
2948   08F0             ; ---
2949   08F0             
2950   08F0             
2951   08F0 DF          L08F0:  RST     18H                     ; fetch word DE
2952   08F1 D7                  RST     10H                     ; push it back
2953   08F2 7A                  LD      A,D                     ; test if fetched
2954   08F3 B3                  OR      E                       ; word is zero
2955   08F4 C4 10 00            CALL    NZ,L0010                ; push word DE if non-zero
2956   08F7 FD E9               JP      (IY)                    ; to 'next'.
2957   08F9             
2958   08F9             ; --------------
2959   08F9             ; THE 'ROT' WORD
2960   08F9             ; --------------
2961   08F9             ; (n1, n2, n3 -- n2, n3, n1)
2962   08F9             
2963   08F9 52 4F       L08F9:  DEFM    "RO"                    ; 'name field'
2964   08FB D4                  DEFB    'T' + $80
2965   08FC             
2966   08FC ED 08               DEFW    L08ED                   ; 'link field'
2967   08FE             
2968   08FE 03          L08FE:  DEFB    $03                     ; 'name length field'
2969   08FF             
2970   08FF C3 0E       L08FF:  DEFW    L0EC3                   ; 'code field' - docolon
2971   0901             
2972   0901             ; ---
2973   0901             
2974   0901 D2 08       L0901:  DEFW    L08D2                   ; >R
2975   0903 85 08       L0903:  DEFW    L0885                   ; swap
2976   0905 DF 08       L0905:  DEFW    L08DF                   ; R>
2977   0907 85 08       L0907:  DEFW    L0885                   ; swap
2978   0909 B6 04       L0909:  DEFW    L04B6                   ; exit
2979   090B             
2980   090B             ; ---------------
2981   090B             ; THE 'OVER' WORD
2982   090B             ; ---------------
2983   090B             ; (n1, n2 -- n1, n2, n1)
2984   090B             
2985   090B 4F 56 45    L090B:  DEFM    "OVE"                   ; 'name field'
2986   090E D2                  DEFB    'R' + $80
2987   090F             
2988   090F FE 08               DEFW    L08FE                   ; 'link field'
2989   0911             
2990   0911 04          L0911:  DEFB    $04                     ; 'name length field'
2991   0912             
2992   0912 C3 0E       L0912:  DEFW    L0EC3                   ; 'code field' - docolon
2993   0914             
2994   0914             ; ---
2995   0914             
2996   0914 D2 08       L0914:  DEFW    L08D2                   ; >R
2997   0916 6B 08       L0916:  DEFW    L086B                   ; dup
2998   0918 DF 08       L0918:  DEFW    L08DF                   ; R>
2999   091A 85 08       L091A:  DEFW    L0885                   ; swap
3000   091C B6 04       L091C:  DEFW    L04B6                   ; exit
3001   091E             
3002   091E             ; ---------------
3003   091E             ; THE 'PICK' WORD
3004   091E             ; ---------------
3005   091E             ; (n1 -- n2)
3006   091E             ; Copies the n1-th stack entry (after dropping n1 itself) to the top.
3007   091E             ; Error 7 if n1 <= 0.
3008   091E             
3009   091E 50 49 43    L091E:  DEFM    "PIC"                   ; 'name field'
3010   0921 CB                  DEFB    'K' + $80
3011   0922             
3012   0922 11 09               DEFW    L0911                   ; 'link field'
3013   0924             
3014   0924 04          L0924:  DEFB    $04                     ; 'name length field'
3015   0925             
3016   0925 27 09               DEFW    L0927                   ; 'code field'
3017   0927             
3018   0927             ; ---
3019   0927             
3020   0927 CD 4D 09    L0927:  CALL    L094D                   ;
3021   092A FD E9               JP      (IY)                    ; to 'next'.
3022   092C             
3023   092C             ; ---------------
3024   092C             ; THE 'ROLL' WORD
3025   092C             ; ---------------
3026   092C             ; (n -- )
3027   092C             ; Extracts the nth stack value to the top of the stack, after dropping n
3028   092C             ; itself, and moves the remaining values down to fill the vacated position.
3029   092C             ; Error 7 if n <= 0.
3030   092C             
3031   092C 52 4F 4C    L092C:  DEFM    "ROL"                   ; 'name field'
3032   092F CC                  DEFB    'L' + $80
3033   0930             
3034   0930 24 09               DEFW    L0924                   ; 'link field'
3035   0932             
3036   0932 04          L0932:  DEFB    $04                     ; 'name length field'
3037   0933             
3038   0933 35 09       L0933:  DEFW    L0935                   ; 'code field'
3039   0935             
3040   0935             ; ---
3041   0935             
3042   0935 CD 4D 09    L0935:  CALL    L094D                   ;
3043   0938 EB                  EX      DE,HL
3044   0939 2A 37 3C            LD      HL,($3C37)              ; STKBOT
3045   093C ED 52               SBC     HL,DE
3046   093E D2 D7 04            JP      NC,L04D7                ; jump back to Error 2
3047   0941             
3048   0941 62                  LD      H,D
3049   0942 6B                  LD      L,E
3050   0943 23                  INC     HL
3051   0944 23                  INC     HL
3052   0945 ED B0               LDIR
3053   0947 ED 53 3B 3C         LD      ($3C3B),DE              ; SPARE
3054   094B FD E9               JP      (IY)                    ; to 'next'.
3055   094D             
3056   094D             ; ---
3057   094D             
3058   094D CD 4E 08    L094D:  CALL    L084E                   ; stk_to_bc
3059   0950 0B                  DEC     BC
3060   0951 CB 21               SLA     C
3061   0953 CB 10               RL      B
3062   0955 03                  INC     BC
3063   0956 03                  INC     BC
3064   0957 30 02               JR      NC,L095B                ; skip the error routine
3065   0959             
3066   0959 E7                  RST     20H                     ; Error 7
3067   095A 07                  DEFB    $07                     ; PICK or ROLL used with operand 0
3068   095B                                                     ; or negative
3069   095B             
3070   095B             ; ---
3071   095B             
3072   095B 2A 3B 3C    L095B:  LD      HL,($3C3B)              ; SPARE
3073   095E ED 42               SBC     HL,BC
3074   0960 E5                  PUSH    HL
3075   0961 5E                  LD      E,(HL)
3076   0962 23                  INC     HL
3077   0963 56                  LD      D,(HL)
3078   0964 D7                  RST     10H                     ; push word DE
3079   0965 E1                  POP     HL
3080   0966 C9                  RET
3081   0967             
3082   0967             ; ---------------
3083   0967             ; THE 'TYPE' WORD
3084   0967             ; ---------------
3085   0967             ; (address, n -- )
3086   0967             ; EMITs n characters from memory starting at the address.
3087   0967             
3088   0967             
3089   0967 54 59 50    L0967:  DEFM    "TYP"                   ; 'name field'
3090   096A C5                  DEFB    'E' + $80
3091   096B             
3092   096B 32 09               DEFW    L0932                   ; 'link field'
3093   096D             
3094   096D 04          L096D:  DEFB    $04                     ; 'name length field'
3095   096E             
3096   096E 70 09       L096E:  DEFW    L0970                   ; 'code field'
3097   0970             
3098   0970             ; ---
3099   0970             
3100   0970 CD 4E 08    L0970:  CALL    L084E                   ; stk_to_bc
3101   0973 DF                  RST     18H                     ; pop word DE
3102   0974 CD 7F 09            CALL    L097F                   ; routine pr_string (below)
3103   0977             
3104   0977 FD E9               JP      (IY)                    ; to 'next'.
3105   0979             
3106   0979             ; --------------------------
3107   0979             ; THE 'PRINT STRING' ROUTINE
3108   0979             ; --------------------------
3109   0979             ; The first entry point prints strings embedded in the Dictionary with the
3110   0979             ; DE pointing to the preceding length word.
3111   0979             ;
3112   0979             ; The second entry point prints a string with length in BC and start in DE.
3113   0979             ; It is called by TYPE above and to print comment fields.
3114   0979             
3115   0979             ; ->
3116   0979             
3117   0979 1A          L0979:  LD      A,(DE)
3118   097A 4F                  LD      C,A
3119   097B 13                  INC     DE
3120   097C 1A                  LD      A,(DE)
3121   097D 47                  LD      B,A
3122   097E 13                  INC     DE
3123   097F             
3124   097F             ; -->
3125   097F 78          L097F:  LD      A,B
3126   0980 B1                  OR      C
3127   0981 C8                  RET     Z
3128   0982             
3129   0982 1A                  LD      A,(DE)
3130   0983 13                  INC     DE
3131   0984 0B                  DEC     BC
3132   0985 CF                  RST     08H                     ; print_ch
3133   0986             
3134   0986 18 F7               JR      L097F                   ;
3135   0988             
3136   0988             ; -------------
3137   0988             ; THE '<#' WORD
3138   0988             ; -------------
3139   0988             ; (  --  )
3140   0988             ; Initiates formatted output.
3141   0988             
3142   0988 3C          L0988:  DEFB    '<'                     ; 'name field'
3143   0989 A3                  DEFB    '#' + $80
3144   098A             
3145   098A 6D 09               DEFW    L096D                   ; 'link field'
3146   098C             
3147   098C 02          L098C:  DEFB    $02                     ; 'name length field'
3148   098D             
3149   098D 8F 09       L098D:  DEFW    L098F                   ; 'code field'
3150   098F             
3151   098F             ; ---
3152   098F             
3153   098F 21 FF 27    L098F:  LD      HL,$27FF                ; end of pad
3154   0992 22 1A 3C            LD      ($3C1A),HL              ; update system variable HLD
3155   0995 FD E9               JP      (IY)                    ; to 'next'.
3156   0997             
3157   0997             ; -------------
3158   0997             ; THE '#>' WORD
3159   0997             ; -------------
3160   0997             ; (ud -- address, n)
3161   0997             ; Finishes formatted output, leaving the address and length (n) of the
3162   0997             ; resultant string.
3163   0997             
3164   0997 23          L0997:  DEFB    '#'                     ; 'name field'
3165   0998 BE                  DEFB    '>' + $80
3166   0999             
3167   0999 8C 09               DEFW    L098C                   ; 'link field'
3168   099B             
3169   099B 02          L099B:  DEFB    $02                     ; 'name length field'
3170   099C             
3171   099C 9E 09       L099C:  DEFW    L099E                   ; 'code field'
3172   099E             
3173   099E             ; ---
3174   099E             
3175   099E DF          L099E:  RST     18H                     ; pop word DE
3176   099F DF                  RST     18H                     ; pop word DE
3177   09A0 ED 5B 1A 3C         LD      DE,($3C1A)              ; HLD
3178   09A4 D7                  RST     10H                     ; push word DE (address)
3179   09A5 21 FF 27            LD      HL,$27FF                ; end of pad.
3180   09A8 A7                  AND     A                       ; prepare to subtract.
3181   09A9 ED 52               SBC     HL,DE                   ; find length of string.
3182   09AB EB                  EX      DE,HL                   ; transfer to DE
3183   09AC D7                  RST     10H                     ; push word DE (n)
3184   09AD             
3185   09AD FD E9               JP      (IY)                    ; to 'next'.
3186   09AF             
3187   09AF             ; ------------
3188   09AF             ; THE '.' WORD
3189   09AF             ; ------------
3190   09AF             ;
3191   09AF             
3192   09AF AE          L09AF:  DEFB    '.' + $80               ; 'name field'
3193   09B0             
3194   09B0 49 0A               DEFW    L0A49                   ; 'link field'
3195   09B2             
3196   09B2 01          L09B2:  DEFB    $01                     ; 'name length field'
3197   09B3             
3198   09B3 C3 0E       L09B3:  DEFW    L0EC3                   ; 'code field' - docolon
3199   09B5             
3200   09B5             ; ---
3201   09B5             
3202   09B5 8D 09       L09B5:  DEFW    L098D                   ; <#
3203   09B7 6B 08               DEFW    L086B                   ; dup
3204   09B9 0D 0C               DEFW    L0C0D                   ; abs
3205   09BB 88 06               DEFW    L0688                   ; stk-zero
3206   09BD E1 09               DEFW    L09E1                   ; #s
3207   09BF FF 08               DEFW    L08FF                   ; rot
3208   09C1 4A 0A               DEFW    L0A4A                   ; sign
3209   09C3             
3210   09C3 9C 09       L09C3:  DEFW    L099C                   ; #>
3211   09C5 6E 09               DEFW    L096E                   ; type
3212   09C7 73 0A               DEFW    L0A73                   ; space
3213   09C9 B6 04               DEFW    L04B6                   ; exit
3214   09CB             
3215   09CB             ; -------------
3216   09CB             ; THE 'U.' WORD
3217   09CB             ; -------------
3218   09CB             ; (un -- )
3219   09CB             ; Prints the unsigned single length integer 'un' to the television screen,
3220   09CB             ; followed by a space.
3221   09CB             
3222   09CB 55          L09CB:  DEFB    'U'                     ; 'name field'
3223   09CC AE                  DEFB    '.' + $80
3224   09CD             
3225   09CD B2 09               DEFW    L09B2                   ; 'link field'
3226   09CF             
3227   09CF 02          L09CF:  DEFB    $02                     ; 'name length field'
3228   09D0             
3229   09D0 C3 0E       L09D0:  DEFW    L0EC3                   ; 'code field' - docolon
3230   09D2             
3231   09D2             ; ---
3232   09D2             
3233   09D2 88 06       L09D2:  DEFW    L0688                   ; stk-zero
3234   09D4 8D 09       L09D4:  DEFW    L098D                   ; <#
3235   09D6 E1 09       L09D6:  DEFW    L09E1                   ; #S
3236   09D8 76 12       L09D8:  DEFW    L1276                   ; branch
3237   09DA E8 FF       L09DA:  DEFW    $FFE8                   ; -> 09C3
3238   09DC             
3239   09DC             
3240   09DC             ; -------------
3241   09DC             ; THE '#S' WORD
3242   09DC             ; -------------
3243   09DC             ; (ud -- 0,0)
3244   09DC             ; Applies # repeatedly (at least once) until the double length number left
3245   09DC             ; on the stack is 0.
3246   09DC             
3247   09DC 23          L09DC:  DEFB    '#'                     ; 'name field'
3248   09DD D3                  DEFB    'S' + $80
3249   09DE             
3250   09DE CF 09               DEFW    L09CF                   ; 'link field'
3251   09E0             
3252   09E0 02          L09E0:  DEFB    $02                     ; 'name length field'
3253   09E1             
3254   09E1 C3 0E       L09E1:  DEFW    L0EC3                   ; 'code field' - docolon
3255   09E3             
3256   09E3             ; ---
3257   09E3             
3258   09E3 F7 09       L09E3:  DEFW    L09F7                   ; #
3259   09E5 12 09               DEFW    L0912                   ; over
3260   09E7 12 09               DEFW    L0912                   ; over
3261   09E9 36 0E               DEFW    L0E36                   ; or
3262   09EB 1A 0C               DEFW    L0C1A                   ; 0=
3263   09ED 8D 12               DEFW    L128D                   ; ?branch
3264   09EF             
3265   09EF F3 FF       L09EF:  DEFW    $FFF3                   ; back to L09E3
3266   09F1             
3267   09F1 B6 04               DEFW    L04B6                   ; exit
3268   09F3             
3269   09F3             ; ------------
3270   09F3             ; THE '#' WORD
3271   09F3             ; ------------
3272   09F3             ; (ud1 -- ud2)
3273   09F3             ; used in formatted output. Generates one digit from the unsigned double
3274   09F3             ; length integer ud1 and holds it in the pad. The unsigned double length
3275   09F3             ; integer ud2 is the quotient when ud1 is divided by the number base.
3276   09F3             
3277   09F3 A3          L09F3:  DEFB    '#' + $80               ; 'name field'
3278   09F4             
3279   09F4 E0 09               DEFW    L09E0                   ; 'link field'
3280   09F6             
3281   09F6 01          L09F6:  DEFB    $01                     ; 'name length field'
3282   09F7             
3283   09F7 C3 0E       L09F7:  DEFW    L0EC3                   ; 'code field' - docolon
3284   09F9             
3285   09F9             ; ---
3286   09F9             
3287   09F9 8A 04       L09F9:  DEFW    L048A                   ; get base
3288   09FB 96 08       L09FB:  DEFW    L0896                   ; C@
3289   09FD C4 0C       L09FD:  DEFW    L0CC4                   ; div?
3290   09FF FF 08       L09FF:  DEFW    L08FF                   ; rot
3291   0A01 07 0A       L0A01:  DEFW    L0A07                   ; stk-char
3292   0A03 5C 0A       L0A03:  DEFW    L0A5C                   ; hold
3293   0A05 B6 04       L0A05:  DEFW    L04B6                   ; exit
3294   0A07             
3295   0A07             ; ----------------------------
3296   0A07             ; The 'stk-char' Internal Word
3297   0A07             ; ----------------------------
3298   0A07             ; used from above thread.
3299   0A07             
3300   0A07 09 0A       L0A07:  DEFW    L0A09                   ; headerless 'code field'
3301   0A09             
3302   0A09             ; ---
3303   0A09             
3304   0A09 DF          L0A09:  RST     18H                     ; data stack to DE
3305   0A0A 7B                  LD      A,E                     ; character to A
3306   0A0B C6 30               ADD     A,$30                   ; convert digit to ASCII
3307   0A0D FE 3A               CP      $3A                     ; compare to '9'
3308   0A0F 38 02               JR      C,L0A13                 ; forward if digit
3309   0A11 C6 07               ADD     A,$07                   ; else add for hex
3310   0A13             
3311   0A13 5F          L0A13:  LD      E,A                     ; back to E
3312   0A14 D7                  RST     10H                     ; push ASCII on data stack.
3313   0A15 FD E9               JP      (IY)                    ; to 'next'.
3314   0A17             
3315   0A17             ; --------------
3316   0A17             ; THE 'CLS' WORD
3317   0A17             ; --------------
3318   0A17             ; ( -- )
3319   0A17             ; Clears the screen and sets the print position to the top left of
3320   0A17             ; the screen.
3321   0A17             
3322   0A17 43 4C       L0A17:  DEFM    "CL"                    ; 'name field'
3323   0A19 D3                  DEFB    'S' + $80
3324   0A1A             
3325   0A1A F6 09               DEFW    L09F6                   ; 'link field'
3326   0A1C             
3327   0A1C 03          L0A1C:  DEFB    $03                     ; 'name length field'
3328   0A1D             
3329   0A1D 1F 0A               DEFW    L0A1F                   ; 'code field'
3330   0A1F             
3331   0A1F             ; ---
3332   0A1F             
3333   0A1F CD 24 0A    L0A1F:  CALL    L0A24                   ; routine CLS below.
3334   0A22             
3335   0A22 FD E9               JP      (IY)                    ; to 'next'.
3336   0A24             
3337   0A24             
3338   0A24             ; --------------------
3339   0A24             ; THE 'CLS' SUBROUTINE
3340   0A24             ; --------------------
3341   0A24             ; Called from the 'CLS' word definition above and also from the initialization
3342   0A24             ; routine.
3343   0A24             
3344   0A24 11 FF 26    L0A24:  LD      DE,$26FF                ; point destination to end of video
3345   0A27                                                     ; memory.
3346   0A27 2A 24 3C            LD      HL,($3C24)              ; set HL to first byte of input buffer
3347   0A2A                                                     ; from system variable L_HALF.
3348   0A2A                                                     ; (at initialization $26E0).
3349   0A2A             
3350   0A2A 01 20 00            LD      BC,$0020                ; set count to thirty two.
3351   0A2D             
3352   0A2D 09                  ADD     HL,BC                   ; add to the low address.
3353   0A2E 2B                  DEC     HL                      ; step back and
3354   0A2F ED B8               LDDR                            ; copy the 32 bytes.
3355   0A31             
3356   0A31             ; while BC is zero, set the plotting coordinates.
3357   0A31             
3358   0A31 ED 43 2F 3C         LD      ($3C2F),BC              ; set XCOORD and YCOORD to zero.
3359   0A35             
3360   0A35             ; set the screen position to the start of video memory.
3361   0A35             
3362   0A35 21 00 24            LD      HL,$2400                ; start of the 768 bytes of video RAM.
3363   0A38 22 1C 3C            LD      ($3C1C),HL              ; set system variable SCRPOS.
3364   0A3B             
3365   0A3B 13                  INC     DE                      ; the byte before logical line.
3366   0A3C EB                  EX      DE,HL                   ; transfer to HL.
3367   0A3D 22 24 3C            LD      ($3C24),HL              ; set L_HALF.
3368   0A40 C3 FA 07            JP      L07FA                   ; jump back to fill the locations
3369   0A43                                                     ; from DE to HL -1 with spaces.
3370   0A43             
3371   0A43             ; ---------------
3372   0A43             ; THE 'SIGN' WORD
3373   0A43             ; ---------------
3374   0A43             ; (n -- )
3375   0A43             ; In formatted output, holds a minus sign in the pad if n is negative.
3376   0A43             
3377   0A43             
3378   0A43 53 49 47    L0A43:  DEFM    "SIG"                   ; 'name field'
3379   0A46 CE                  DEFB    'N' + $80
3380   0A47             
3381   0A47 9B 09               DEFW    L099B                   ; 'link field'
3382   0A49             
3383   0A49 04          L0A49:  DEFB    $04                     ; 'name length field'
3384   0A4A             
3385   0A4A 4C 0A       L0A4A:  DEFW    L0A4C                   ; 'code field'
3386   0A4C             
3387   0A4C             ; ---
3388   0A4C             
3389   0A4C DF          L0A4C:  RST     18H                     ; pop word DE
3390   0A4D CB 12               RL      D                       ; test sign bit
3391   0A4F 1E 2D               LD      E,$2D                   ; prepare a '-'
3392   0A51 38 0C               JR      C,L0A5F                 ; forward if minus
3393   0A53 FD E9               JP      (IY)                    ; to 'next'.
3394   0A55             
3395   0A55             ; ---------------
3396   0A55             ; THE 'HOLD' WORD
3397   0A55             ; ---------------
3398   0A55             ; (character -- )
3399   0A55             ; Used in formatted output to hold the character in the pad.
3400   0A55             
3401   0A55 48 4F 4C    L0A55:  DEFM    "HOL"                   ; 'name field'
3402   0A58 C4                  DEFB    'D' + $80
3403   0A59             
3404   0A59 1C 0A       L0A59:  DEFW    L0A1C                   ; 'link field'
3405   0A5B             
3406   0A5B 04          L0A5B:  DEFB    $04                     ; 'name length field'
3407   0A5C             
3408   0A5C 5E 0A       L0A5C:  DEFW    L0A5E                   ; 'code field'
3409   0A5E             
3410   0A5E             ; ---
3411   0A5E             
3412   0A5E DF          L0A5E:  RST     18H                     ; data stack to DE
3413   0A5F             
3414   0A5F 2A 1A 3C    L0A5F:  LD      HL,($3C1A)              ; HLD
3415   0A62 2D                  DEC     L
3416   0A63 28 04               JR      Z,L0A69                 ; forward when full
3417   0A65             
3418   0A65 22 1A 3C            LD      ($3C1A),HL              ; update HLD
3419   0A68 73                  LD      (HL),E                  ; and place character in buffer
3420   0A69             
3421   0A69 FD E9       L0A69:  JP      (IY)                    ; to 'next'.
3422   0A6B             
3423   0A6B             ; ----------------
3424   0A6B             ; THE 'SPACE' WORD
3425   0A6B             ; ----------------
3426   0A6B             ; (  --  )
3427   0A6B             ; EMITs a space.
3428   0A6B             
3429   0A6B 53 50 41 43 L0A6B:  DEFM    "SPAC"                  ; 'name field'
3430   0A6F C5                  DEFB    'E' + $80
3431   0A70             
3432   0A70 5B 0A               DEFW    L0A5B                   ; 'link field'
3433   0A72             
3434   0A72 05          L0A72:  DEFB    $05                     ; 'name length field'
3435   0A73             
3436   0A73 75 0A       L0A73:  DEFW    L0A75                   ; 'code field'
3437   0A75             
3438   0A75             ; ---
3439   0A75             
3440   0A75 3E 20       L0A75:  LD      A,$20                   ; load accumulator with the ASCII
3441   0A77                                                     ; code for space.
3442   0A77 CF                  RST     08H                     ; print_ch
3443   0A78             
3444   0A78 FD E9       L0A78:  JP      (IY)                    ; to 'next'.
3445   0A7A             
3446   0A7A             ; -----------------
3447   0A7A             ; THE 'SPACES' WORD
3448   0A7A             ; -----------------
3449   0A7A             ; (n -- )
3450   0A7A             ; EMITs n spaces if n >= 1.
3451   0A7A             
3452   0A7A 53 50 41 43 L0A7A:  DEFM    "SPACE"                 ; 'name field'
3452   0A7E 45 
3453   0A7F D3                  DEFB    'S' + $80
3454   0A80             
3455   0A80 72 0A               DEFW    L0A72                   ; 'link field'
3456   0A82             
3457   0A82 06          L0A82:  DEFB    $06                     ; 'name length field'
3458   0A83             
3459   0A83 85 0A               DEFW    L0A85                   ; 'code field'
3460   0A85             
3461   0A85             ; ---
3462   0A85             
3463   0A85 DF          L0A85:  RST     18H                     ; fetch stack data to DE
3464   0A86             
3465   0A86 1B          L0A86:  DEC     DE                      ; decrement the counter.
3466   0A87 CB 7A               BIT     7,D                     ; test for a negative value
3467   0A89 20 ED               JR      NZ,L0A78                ; back to a jp iy  when done    >>
3468   0A8B             
3469   0A8B 3E 20               LD      A,$20                   ; prepare a space
3470   0A8D CF                  RST     08H                     ; print it
3471   0A8E 18 F6               JR      L0A86                   ; loop back for more.
3472   0A90             
3473   0A90             ; -------------
3474   0A90             ; THE 'CR' WORD
3475   0A90             ; -------------
3476   0A90             ; Outputs a carriage return character to the television.
3477   0A90             
3478   0A90 43          L0A90:  DEFB    'C'                     ; 'name field'
3479   0A91 D2                  DEFB    'R' + $80
3480   0A92             
3481   0A92 82 0A               DEFW    L0A82                   ; 'link field'
3482   0A94             
3483   0A94 02          L0A94:  DEFB    $02                     ; 'name length field'
3484   0A95             
3485   0A95 97 0A       L0A95:  DEFW    L0A97                   ; 'code field'
3486   0A97             
3487   0A97             ; ---
3488   0A97             
3489   0A97 3E 0D       L0A97:  LD      A,$0D                   ; prepare a CR
3490   0A99 CF                  RST     08H                     ; print it.
3491   0A9A             
3492   0A9A FD E9               JP      (IY)                    ; to 'next'.
3493   0A9C             
3494   0A9C             ; ---------------
3495   0A9C             ; THE 'EMIT' WORD
3496   0A9C             ; ---------------
3497   0A9C             ; (character -- )
3498   0A9C             ; writes the character to the television screen.
3499   0A9C             
3500   0A9C 45 4D 49    L0A9C:  DEFM    "EMI"                   ; 'name field'
3501   0A9F D4                  DEFB    'T' + $80
3502   0AA0             
3503   0AA0 94 0A               DEFW    L0A94                   ; 'link field'
3504   0AA2             
3505   0AA2 04          L0AA2:  DEFB    $04                     ; 'name length field'
3506   0AA3             
3507   0AA3 A5 0A       L0AA3:  DEFW    L0AA5                   ; 'code field'
3508   0AA5             
3509   0AA5             ; ---
3510   0AA5             
3511   0AA5 DF          L0AA5:  RST     18H                     ; pop de off data stack
3512   0AA6 7B                  LD      A,E                     ; character to A
3513   0AA7 CF                  RST     08H                     ; print it.
3514   0AA8             
3515   0AA8 FD E9               JP      (IY)                    ; to 'next'.
3516   0AAA             
3517   0AAA             
3518   0AAA             ; -------------
3519   0AAA             ; THE 'F.' WORD
3520   0AAA             ; -------------
3521   0AAA             ; (f -- )
3522   0AAA             ; print a floating point number.
3523   0AAA             ; If 1.0E-4 <= f < 1.0E9, then f is printed without an exponent and with a
3524   0AAA             ; decimal point in the appropriate place. If f is outside this range, then
3525   0AAA             ; it is printed in standard form f'En where 0 <= f' < 10 and -64 <= n <= 62.
3526   0AAA             ; Input may be either form, but only six significant digits are accepted -
3527   0AAA             ; further digits are ignored.
3528   0AAA             ; Floating point numbers are stored as 3 bytes of binary coded decimal
3529   0AAA             ; mantissa and 1 byte for sign and decimal exponents.
3530   0AAA             ;
3531   0AAA             ; e.g. the number 123.456 on Data Stack would be two words, four bytes.
3532   0AAA             ;
3533   0AAA             ;       ^       43              01000011   bits 5 - 0 are exponent
3534   0AAA             ;       |       12      BCD     ||
3535   0AAA             ;       |       34      BCD     |sign of exponent 1=positive (bit 6)
3536   0AAA             ;       |       56      BCD     sign of number 0=positive (bit 7)
3537   0AAA             ;
3538   0AAA             ; Zero 0. is a special case floating point number with all four bytes set
3539   0AAA             ; to zero.
3540   0AAA             
3541   0AAA             
3542   0AAA 46          L0AAA:  DEFB    'F'                     ; 'name field'
3543   0AAB AE                  DEFB    '.' + $80
3544   0AAC             
3545   0AAC A2 0A               DEFW    $0AA2                   ; 'link field'
3546   0AAE             
3547   0AAE 02          L0AAE:  DEFB    $02                     ; 'name length field'
3548   0AAF             
3549   0AAF B1 0A       L0AAF:  DEFW    $0AB1                   ; 'code field'
3550   0AB1             
3551   0AB1             ; ---
3552   0AB1             
3553   0AB1 2A 3B 3C    L0AB1:  LD      HL,($3C3B)              ; set pointer from system variable SPARE
3554   0AB4 2B                  DEC     HL                      ; now points to last byte of data stack.
3555   0AB5 CB 7E               BIT     7,(HL)                  ; test sign of number.
3556   0AB7 CB BE               RES     7,(HL)                  ; reset the sign bit.
3557   0AB9 28 03               JR      Z,L0ABE                 ; forward if initially positive.
3558   0ABB             
3559   0ABB 3E 2D               LD      A,$2D                   ; prepare  the '-' character.
3560   0ABD CF                  RST     08H                     ; print the minus sign.
3561   0ABE             
3562   0ABE             ; The E register is initialized to zero to denote not E-FORMAT
3563   0ABE             
3564   0ABE 1E 00       L0ABE:  LD      E,$00                   ; signal not scientific notation.
3565   0AC0             
3566   0AC0 7E                  LD      A,(HL)                  ; fetch exponent byte
3567   0AC1 3D                  DEC     A                       ; adjust to make zero $FF
3568   0AC2             
3569   0AC2 FE 49               CP      $49                     ; compare to +9   e.g.  123456000.
3570   0AC4 30 04               JR      NC,L0ACA                ; skip forward if out of range.
3571   0AC6             
3572   0AC6 FE 3C               CP      $3C                     ; compare to -4   e.g  .000123456
3573   0AC8 30 04               JR      NC,L0ACE                ; skip forward if in range.
3574   0ACA             
3575   0ACA             ; else E format printing will be used with decimal point after first digit.
3576   0ACA             
3577   0ACA 36 41       L0ACA:  LD      (HL),$41                ; make Data Stack exponent +1
3578   0ACC 3C                  INC     A                       ; restore true exponent byte
3579   0ACD 5F                  LD      E,A                     ; transfer to E.
3580   0ACE             
3581   0ACE             ; the branch was here when within range for normal printing.
3582   0ACE             
3583   0ACE 3E 40       L0ACE:  LD      A,$40                   ; test value is plus zero.
3584   0AD0 96                  SUB     (HL)                    ; subtract signed exponent.
3585   0AD1 38 09               JR      C,L0ADC                 ; forward if positive
3586   0AD3             
3587   0AD3             ; exponent is negative so decimal point comes first. e.g. .001
3588   0AD3             
3589   0AD3 47                  LD      B,A                     ; result of subtraction to B.
3590   0AD4 04                  INC     B                       ; B is now one less than count of
3591   0AD5                                                     ; leading zeros.
3592   0AD5             
3593   0AD5 3E 2E               LD      A,$2E                   ; prepare '.'
3594   0AD7             
3595   0AD7 CF          L0AD7:  RST     08H                     ; print decimal point or zero.
3596   0AD8             
3597   0AD8 3E 30               LD      A,$30                   ; prepare a zero - '0'
3598   0ADA             
3599   0ADA 10 FB               DJNZ    L0AD7                   ; loop back to print leading zeros
3600   0ADC                                                     ; unless the counter was 1.
3601   0ADC             
3602   0ADC             ; the branch was here with positive exponent (and zero)
3603   0ADC             ; now enter a loop to print each of the leading BCD digits
3604   0ADC             ; the loop will end when the exponent is <= +0 and all 6 nibbles contain zero.
3605   0ADC             
3606   0ADC 3E 40       L0ADC:  LD      A,$40                   ; set accumulator to plus 0
3607   0ADE BE                  CP      (HL)                    ; compare to exponent on data stack.
3608   0ADF 9F                  SBC     A,A                     ; $FF if more leading digits else $00.
3609   0AE0 2B                  DEC     HL                      ; address first two nibbles.
3610   0AE1 B6                  OR      (HL)                    ; combine.
3611   0AE2 2B                  DEC     HL                      ; address next two nibbles.
3612   0AE3 B6                  OR      (HL)                    ; combine.
3613   0AE4 2B                  DEC     HL                      ; address last two nibbles.
3614   0AE5 B6                  OR      (HL)                    ; combine.
3615   0AE6             
3616   0AE6 23                  INC     HL                      ; adjust the pointer to
3617   0AE7 23                  INC     HL                      ; the start of the mantissa.
3618   0AE8             
3619   0AE8 28 12               JR      Z,L0AFC                 ; forward if all digits have been
3620   0AEA                                                     ; printed.
3621   0AEA             
3622   0AEA             ; else print each binary coded decimal in turn.
3623   0AEA             
3624   0AEA AF                  XOR     A                       ; prepare to feed a zero nibble in.
3625   0AEB             
3626   0AEB CD 32 07            CALL    L0732                   ; routine shift_fp extracts the most
3627   0AEE                                                     ; significant nibble from the 3 bytes
3628   0AEE                                                     ; also decrementing the exponent.
3629   0AEE             
3630   0AEE C6 30               ADD     A,$30                   ; convert to ASCII
3631   0AF0 CF                  RST     08H                     ; print digit
3632   0AF1             
3633   0AF1 23                  INC     HL                      ; point to reduced exponent.
3634   0AF2 7E                  LD      A,(HL)                  ; fetch to accumulator and
3635   0AF3 FE 40               CP      $40                     ; compare to zero.
3636   0AF5             
3637   0AF5 20 E5               JR      NZ,L0ADC                ; loop back while more digits.
3638   0AF7             
3639   0AF7             ; else this is the place to print the mid or trailing decimal point.
3640   0AF7             
3641   0AF7 3E 2E               LD      A,$2E                   ; prepare '.'
3642   0AF9 CF                  RST     08H                     ; print it.
3643   0AFA             
3644   0AFA 18 E0               JR      L0ADC                   ; loop back for end test and any digits
3645   0AFC                                                     ; following the decimal point.
3646   0AFC             
3647   0AFC             ; ---
3648   0AFC             
3649   0AFC             ; the branch was to here when all digits of the mantissa have been printed.
3650   0AFC             
3651   0AFC 7B          L0AFC:  LD      A,E                     ; fetch the exponent format flag - from
3652   0AFD                                                     ; the E register appropriately.
3653   0AFD A7                  AND     A                       ; test for zero - normal format.
3654   0AFE 20 05               JR      NZ,L0B05                ; forward to E_FORMAT if not.
3655   0B00             
3656   0B00 3E 20               LD      A,$20                   ; else prepare a space
3657   0B02 CF                  RST     08H                     ; print it
3658   0B03             
3659   0B03 18 0B               JR      L0B10                   ; forward to delete the two words from
3660   0B05                                                     ; the data stack and exit.
3661   0B05             
3662   0B05             ; ---
3663   0B05             
3664   0B05             ; this branch deals with scientific notation. The accumulator holds the
3665   0B05             ; original exponent. $01-$3C (negative) $49-$7F (positive).
3666   0B05             
3667   0B05 D6 41       L0B05:  SUB     $41                     ; convert to signed 8-bit.
3668   0B07 6F                  LD      L,A                     ; low order byte to L.
3669   0B08 9F                  SBC     A,A                     ; $FF negative or $00 positive
3670   0B09 67                  LD      H,A                     ; set the high order byte.
3671   0B0A             
3672   0B0A 3E 45               LD      A,$45                   ; prepare a 'E'
3673   0B0C CF                  RST     08H                     ; print it
3674   0B0D             
3675   0B0D CD 0E 18            CALL    L180E                   ; routine pr_int_hl prints the signed
3676   0B10                                                     ; integer followed by a space.
3677   0B10             
3678   0B10             ; finally delete the floating point number from the Data Stack.
3679   0B10             
3680   0B10             
3681   0B10 DF          L0B10:  RST     18H                     ; unstack word DE
3682   0B11 DF                  RST     18H                     ; unstack word DE
3683   0B12             
3684   0B12 FD E9               JP      (IY)                    ; to 'next'.
3685   0B14             
3686   0B14             ; -------------
3687   0B14             ; THE 'AT' WORD
3688   0B14             ; -------------
3689   0B14             ; (line, column -- )
3690   0B14             ; Sets print position to line and column numbers on the stack.
3691   0B14             ; There are 23 lines (0 to 22) and 32 columns (0 to 31). The
3692   0B14             ; column number is taken modulo 32, and ERROR 9 if trying to print
3693   0B14             ; in the input buffer at the bottom.
3694   0B14             
3695   0B14 41          L0B14:  DEFB    'A'                     ; 'name field'
3696   0B15 D4                  DEFB    'T' + $80
3697   0B16             
3698   0B16 AE 0A               DEFW    L0AAE                   ; 'link field'
3699   0B18             
3700   0B18 02          L0B18:  DEFB    $02                     ; 'name length field'
3701   0B19             
3702   0B19 1B 0B               DEFW    L0B1B                   ; 'code field'
3703   0B1B             
3704   0B1B             ; ---
3705   0B1B             
3706   0B1B DF          L0B1B:  RST     18H                     ; pop word DE
3707   0B1C             
3708   0B1C CD 4E 08            CALL    L084E                   ; stk_to_bc
3709   0B1F             
3710   0B1F 79                  LD      A,C
3711   0B20             
3712   0B20 CD 28 0B            CALL    L0B28                   ;
3713   0B23             
3714   0B23 22 1C 3C            LD      ($3C1C),HL              ; update system variable SCRPOS
3715   0B26             
3716   0B26 FD E9               JP      (IY)                    ; to 'next'.
3717   0B28             
3718   0B28             ; ---
3719   0B28             
3720   0B28             ; plotsub
3721   0B28             
3722   0B28 C6 20       L0B28:  ADD     A,$20
3723   0B2A 6F                  LD      L,A
3724   0B2B 26 01               LD      H,$01
3725   0B2D 29                  ADD     HL,HL
3726   0B2E 29                  ADD     HL,HL
3727   0B2F 29                  ADD     HL,HL
3728   0B30 29                  ADD     HL,HL
3729   0B31 29                  ADD     HL,HL
3730   0B32 16 00               LD      D,$00
3731   0B34 7B                  LD      A,E
3732   0B35 E6 1F               AND     $1F
3733   0B37 5F                  LD      E,A
3734   0B38 19                  ADD     HL,DE
3735   0B39 ED 5B 24 3C         LD      DE,($3C24)              ; fetch start of lower half from L_HALF
3736   0B3D ED 52               SBC     HL,DE
3737   0B3F 19                  ADD     HL,DE
3738   0B40 D8                  RET     C
3739   0B41             
3740   0B41             ;
3741   0B41             
3742   0B41 E7                  RST     20H                     ; Error 9
3743   0B42 09                  DEFB    $09                     ; Erroneous 'AT' Command.
3744   0B43             
3745   0B43             ; ---------------
3746   0B43             ; THE 'PLOT' WORD
3747   0B43             ; ---------------
3748   0B43             ; (x, y, n -- )
3749   0B43             ; Plots pixel (x, y) with plot mode n.
3750   0B43             ; n =   0       unplot
3751   0B43             ;       1       plot
3752   0B43             ;       2       move
3753   0B43             ;       3       change
3754   0B43             ; If n>3, takes value modulo 4.
3755   0B43             
3756   0B43 50 4C 4F    L0B43:  DEFM    "PLO"                   ; 'name field'
3757   0B46 D4                  DEFB    'T' + $80
3758   0B47             
3759   0B47 18 0B               DEFW    L0B18                   ; 'link field'
3760   0B49             
3761   0B49 04          L0B49:  DEFB    $04                     ; 'name length field'
3762   0B4A             
3763   0B4A 4C 0B               DEFW    L0B4C                   ; 'code field'
3764   0B4C             
3765   0B4C             ; ---
3766   0B4C             
3767   0B4C CD 4E 08    L0B4C:  CALL    L084E                   ; stk_to_bc
3768   0B4F             
3769   0B4F DF                  RST     18H                     ; pop word DE
3770   0B50 DD 73 30            LD      (IX+$30),E              ; YCOORD
3771   0B53 CB 3B               SRL     E
3772   0B55 CB 11               RL      C
3773   0B57 3E 16               LD      A,$16                   ; 24
3774   0B59 93                  SUB     E
3775   0B5A             
3776   0B5A DF                  RST     18H                     ; pop word DE
3777   0B5B DD 73 2F            LD      (IX+$2F),E              ; XCOORD
3778   0B5E CB 3B               SRL     E
3779   0B60 CB 11               RL      C
3780   0B62             
3781   0B62 CD 28 0B            CALL    L0B28                   ;
3782   0B65             
3783   0B65 7E                  LD      A,(HL)
3784   0B66 E6 78               AND     $78                     ; 01111000
3785   0B68 FE 10               CP      $10
3786   0B6A 7E                  LD      A,(HL)
3787   0B6B 28 02               JR      Z,L0B6F                 ;
3788   0B6D             
3789   0B6D 3E 10               LD      A,$10
3790   0B6F             
3791   0B6F 5F          L0B6F:  LD      E,A
3792   0B70 16 87               LD      D,$87
3793   0B72 79                  LD      A,C
3794   0B73 E6 03               AND     $03
3795   0B75 47                  LD      B,A
3796   0B76 28 07               JR      Z,L0B7F                 ;
3797   0B78             
3798   0B78 2F                  CPL
3799   0B79             
3800   0B79 C6 02               ADD     A,$02
3801   0B7B CE 03               ADC     A,$03
3802   0B7D 57                  LD      D,A
3803   0B7E 43                  LD      B,E
3804   0B7F 79          L0B7F:  LD      A,C
3805   0B80 0F                  RRCA
3806   0B81 0F                  RRCA
3807   0B82 0F                  RRCA
3808   0B83 9F                  SBC     A,A
3809   0B84 CB 59               BIT     3,C
3810   0B86 20 04               JR      NZ,L0B8C                ;
3811   0B88 AB                  XOR     E
3812   0B89 07                  RLCA
3813   0B8A 9F                  SBC     A,A
3814   0B8B A8                  XOR     B
3815   0B8C             
3816   0B8C A2          L0B8C:  AND     D
3817   0B8D AB                  XOR     E
3818   0B8E 77                  LD      (HL),A
3819   0B8F FD E9               JP      (IY)                    ; to 'next'.
3820   0B91             
3821   0B91             ; ---------------
3822   0B91             ; THE 'BEEP' WORD
3823   0B91             ; ---------------
3824   0B91             ; ( m, n --  )
3825   0B91             ; Plays a note on the loudspeaker. 8 * m = period in microseconds,
3826   0B91             ; n = time in milliseconds.
3827   0B91             
3828   0B91 42 45 45    L0B91:  DEFM    "BEE"                   ; 'name field'
3829   0B94 D0                  DEFB    'P' + $80
3830   0B95             
3831   0B95 49 0B               DEFW    L0B49                   ; 'link field'
3832   0B97             
3833   0B97 04          L0B97:  DEFB    $04                     ; 'name length field'
3834   0B98             
3835   0B98 C3 0E               DEFW    L0EC3                   ; 'code field'  m, n.
3836   0B9A             
3837   0B9A             ; ---
3838   0B9A             
3839   0B9A 12 09       L0B9A:  DEFW    L0912                   ; OVER          m, n, m.
3840   0B9C 4B 10               DEFW    L104B                   ; stk-data      m, n, m, 125.
3841   0B9E 7D                  DEFB    $7D                     ;  (125)
3842   0B9F 85 08               DEFW    L0885                   ; SWAP          m, n, 125, m.
3843   0BA1 7A 0D               DEFW    L0D7A                   ; */            m, (n*125)/m
3844   0BA3 0E 1A               DEFW    L1A0E                   ; end
3845   0BA5             
3846   0BA5             ; ---
3847   0BA5             
3848   0BA5 DF          L0BA5:  RST     18H                     ; pop word DE
3849   0BA6             
3850   0BA6 CD 4E 08            CALL    L084E                   ; stk_to_bc
3851   0BA9             
3852   0BA9 21 F9 00            LD      HL,$00F9                ;
3853   0BAC 09                  ADD     HL,BC                   ;
3854   0BAD 2C                  INC     L                       ;
3855   0BAE             
3856   0BAE F3                  DI                              ; Disable Interrupts.
3857   0BAF             
3858   0BAF 3E 7F       L0BAF:  LD      A,$7F                   ; place $7FFE on address bus and read
3859   0BB1 DB FE               IN      A,($FE)                 ; from port, pushing the loudspeaker
3860   0BB3                                                     ; diaphragm in.
3861   0BB3             
3862   0BB3 0F                  RRCA                            ; test the read 'SPACE' key bit.
3863   0BB4             
3864   0BB4 30 11               JR      NC,L0BC7                ; forward if BREAK pressed.
3865   0BB6             
3866   0BB6 CD C9 0B            CALL    L0BC9                   ; routine delay_HL
3867   0BB9             
3868   0BB9 1B                  DEC     DE                      ; decrement counter.
3869   0BBA             
3870   0BBA 7A                  LD      A,D                     ; all even addresses are reserved for
3871   0BBB                                                     ; Jupiter Ace so any value does for the
3872   0BBB                                                     ; high order byte. $FE is low value.
3873   0BBB             
3874   0BBB D3 FE               OUT     ($FE),A                 ; push the loudspeaker diaphragm out.
3875   0BBD             
3876   0BBD CD C9 0B            CALL    L0BC9                   ; routine delay_HL
3877   0BC0             
3878   0BC0 B3                  OR      E                       ; test for counter DE reaching zero.
3879   0BC1 C2 AF 0B            JP      NZ,L0BAF                ; loop back if not.
3880   0BC4             
3881   0BC4 FB                  EI                              ; Enable Interrupts.
3882   0BC5             
3883   0BC5 FD E9               JP      (IY)                    ; to 'next'.
3884   0BC7             
3885   0BC7             ; ---
3886   0BC7             
3887   0BC7 E7          L0BC7:  RST     20H                     ; Error 3
3888   0BC8 03                  DEFB    $03                     ; BREAK pressed.
3889   0BC9             
3890   0BC9             ; ---------------------------
3891   0BC9             ; THE 'BEEP DELAY' SUBROUTINE
3892   0BC9             ; ---------------------------
3893   0BC9             ; called twice from the above BEEP routine.
3894   0BC9             
3895   0BC9 45          L0BC9:  LD      B,L                     ; transfer the value of
3896   0BCA 4C                  LD      C,H                     ; the HL register to BC.
3897   0BCB             
3898   0BCB 10 FE       L0BCB:  DJNZ    L0BCB                   ; self-loop for B times
3899   0BCD             
3900   0BCD 05                  DEC     B                       ; set B to $FF for future loops
3901   0BCE 0D                  DEC     C                       ; decrement outer loop counter C
3902   0BCF C2 CB 0B            JP      NZ,L0BCB                ; JUMP back if not zero           (10)
3903   0BD2             
3904   0BD2 C9                  RET                             ; return
3905   0BD3             
3906   0BD3             ; ----------------
3907   0BD3             ; THE 'INKEY' WORD
3908   0BD3             ; ----------------
3909   0BD3             ; ( -- ASCII code)
3910   0BD3             ; Reads the keyboard. Puts ASCII value on the stack if a key is pressed, 0
3911   0BD3             ; otherwise.
3912   0BD3             
3913   0BD3             
3914   0BD3 49 4E 4B 45 L0BD3:  DEFM    "INKE"                  ; 'name field'
3915   0BD7 D9                  DEFB    'Y' + $80
3916   0BD8             
3917   0BD8 97 0B               DEFW    L0B97                   ; 'link field'
3918   0BDA             
3919   0BDA 05          L0BDA:  DEFB    $05                     ; 'name length field'
3920   0BDB             
3921   0BDB DD 0B       L0BDB:  DEFW    L0BDD                   ; 'code field'
3922   0BDD             
3923   0BDD             ; ---
3924   0BDD             
3925   0BDD CD 36 03    L0BDD:  CALL    L0336                   ; routine KEY-SCAN
3926   0BE0             
3927   0BE0 5F                  LD      E,A                     ; transfer the key code to E.
3928   0BE1 16 00               LD      D,$00                   ; make high order byte zero.
3929   0BE3             
3930   0BE3 D7                  RST     10H                     ; stack Data Word DE
3931   0BE4             
3932   0BE4 FD E9               JP      (IY)                    ; to 'next'.
3933   0BE6             
3934   0BE6             ; -------------
3935   0BE6             ; THE 'IN' WORD
3936   0BE6             ; -------------
3937   0BE6             ; (port address -- data byte)
3938   0BE6             ; Inputs a data byte from an I/O port.
3939   0BE6             
3940   0BE6 49          L0BE6:  DEFB    'I'                     ; 'name field'
3941   0BE7 CE                  DEFB    'N' + $80
3942   0BE8             
3943   0BE8 DA 0B               DEFW    L0BDA                   ; 'link field'
3944   0BEA             
3945   0BEA 02          L0BEA:  DEFB    $02                     ; 'name length field'
3946   0BEB             
3947   0BEB ED 0B               DEFW    L0BED                   ; 'code field'
3948   0BED             
3949   0BED             ; ---
3950   0BED             
3951   0BED CD 4E 08    L0BED:  CALL    L084E                   ; stk_to_bc
3952   0BF0 16 00               LD      D,$00                   ; make high order byte zero.
3953   0BF2             
3954   0BF2 ED 58               IN      E,(C)                   ; read the port to E.
3955   0BF4             
3956   0BF4 D7                  RST     10H                     ; stack Data Word DE.
3957   0BF5             
3958   0BF5 FD E9       L0BF5:  JP      (IY)                    ; to 'next'.
3959   0BF7             
3960   0BF7             ; --------------
3961   0BF7             ; THE 'OUT' WORD
3962   0BF7             ; --------------
3963   0BF7             ; (data byte, port address -- )
3964   0BF7             ; Outputs a data byte to an I/O port.
3965   0BF7             
3966   0BF7 4F 55       L0BF7:  DEFM    "OU"                    ; 'name field'
3967   0BF9 D4                  DEFB    'T' + $80
3968   0BFA             
3969   0BFA EA 0B               DEFW    L0BEA                   ; 'link field'
3970   0BFC             
3971   0BFC 03          L0BFC:  DEFB    $03                     ; 'name length field'
3972   0BFD             
3973   0BFD FF 0B               DEFW    L0BFF                   ; 'code field'
3974   0BFF             
3975   0BFF             ; ---
3976   0BFF             
3977   0BFF CD 4E 08    L0BFF:  CALL    L084E                   ; stk_to_bc
3978   0C02                                                     ; all 16 bits are placed on the
3979   0C02                                                     ; Z80A address bus.
3980   0C02 DF                  RST     18H                     ; pop word DE
3981   0C03             
3982   0C03 ED 59               OUT     (C),E                   ; output byte to port address.
3983   0C05             
3984   0C05 FD E9               JP      (IY)                    ; to 'next'.
3985   0C07             
3986   0C07             ; --------------
3987   0C07             ; THE 'ABS' WORD
3988   0C07             ; --------------
3989   0C07             ; (n -- absolute value of n)
3990   0C07             
3991   0C07 41 42       L0C07:  DEFM    "AB"                    ; 'name field'
3992   0C09 D3                  DEFB    'S' + $80
3993   0C0A             
3994   0C0A FC 0B               DEFW    L0BFC                   ; 'link field'
3995   0C0C             
3996   0C0C 03          L0C0C:  DEFB    $03                     ; 'name length field'
3997   0C0D             
3998   0C0D C3 0E       L0C0D:  DEFW    L0EC3                   ; 'code field' - docolon
3999   0C0F             
4000   0C0F             ; ---
4001   0C0F             
4002   0C0F 6B 08               DEFW    L086B                   ; DUP
4003   0C11 94 0D               DEFW    L0D94                   ; pos
4004   0C13 B6 04               DEFW    L04B6                   ; EXIT
4005   0C15             
4006   0C15             ; -------------
4007   0C15             ; THE '0=' WORD
4008   0C15             ; -------------
4009   0C15             ; (n -- flag)
4010   0C15             ; flag is 1 in n = 0.
4011   0C15             
4012   0C15 30          L0C15:  DEFB    '0'                     ; 'name field'
4013   0C16 BD                  DEFB    '=' + $80
4014   0C17             
4015   0C17 0C 0C               DEFW    L0C0C                   ; 'link field'
4016   0C19             
4017   0C19 02          L0C19:  DEFB    $02                     ; 'name length field'
4018   0C1A             
4019   0C1A 1C 0C       L0C1A:  DEFW    L0C1C                   ; 'code field'
4020   0C1C             
4021   0C1C             ; ---
4022   0C1C             
4023   0C1C DF          L0C1C:  RST     18H                     ; pop word DE
4024   0C1D 7A                  LD      A,D                     ; test for
4025   0C1E B3                  OR      E                       ; zero
4026   0C1F FE 01               CP      $01                     ; sets carry if word is zero
4027   0C21             
4028   0C21             ; -> zero_or_one
4029   0C21             
4030   0C21 3E 00       L0C21:  LD      A,$00                   ; make accumulator zero.
4031   0C23 57                  LD      D,A                     ; set D to zero
4032   0C24 17                  RLA                             ; pick up carry (1/0)
4033   0C25 5F                  LD      E,A                     ; set DE to one or zero
4034   0C26 D7                  RST     10H                     ; push word DE
4035   0C27             
4036   0C27 FD E9               JP      (IY)                    ; to 'next'.
4037   0C29             
4038   0C29             ; -------------
4039   0C29             ; THE '0<' WORD
4040   0C29             ; -------------
4041   0C29             ; (n -- flag)
4042   0C29             ; flag is 1 if n is negative
4043   0C29             
4044   0C29 30          L0C29:  DEFB    '0'                     ; 'name field'
4045   0C2A BC                  DEFB    '<' + $80
4046   0C2B             
4047   0C2B 19 0C               DEFW    L0C19                   ; 'link field'
4048   0C2D             
4049   0C2D 02          L0C2D:  DEFB    $02                     ; 'name length field'
4050   0C2E             
4051   0C2E 30 0C       L0C2E:  DEFW    L0C30                   ; 'code field'
4052   0C30             
4053   0C30             ; ---
4054   0C30             
4055   0C30 DF          L0C30:  RST     18H                     ; pop word DE
4056   0C31 CB 12               RL      D                       ; test the sign bit.
4057   0C33             
4058   0C33 18 EC               JR      L0C21                   ; back to above routine to stack the
4059   0C35                                                     ; carry as one (true) or zero (false).
4060   0C35             
4061   0C35             ; -------------
4062   0C35             ; THE '0>' WORD
4063   0C35             ; -------------
4064   0C35             ; (n -- flag)
4065   0C35             ; flag is 1 if n is positive.
4066   0C35             
4067   0C35             
4068   0C35 30          L0C35:  DEFB    '0'                     ; 'name field'
4069   0C36 BE                  DEFB    '>' + $80
4070   0C37             
4071   0C37 2D 0C               DEFW    L0C2D                   ; 'link field'
4072   0C39             
4073   0C39 02          L0C39:  DEFB    $02                     ; 'name length field'
4074   0C3A             
4075   0C3A 3C 0C       L0C3A:  DEFW    L0C3C                   ; 'code field'
4076   0C3C             
4077   0C3C             ; ---
4078   0C3C             
4079   0C3C DF          L0C3C:  RST     18H                     ; pop word DE
4080   0C3D 7A                  LD      A,D
4081   0C3E B3                  OR      E
4082   0C3F 28 E0               JR      Z,L0C21                 ; to stack word one or zero
4083   0C41             
4084   0C41 CB 12               RL      D
4085   0C43 3F                  CCF
4086   0C44 18 DB               JR      L0C21                   ; to stack word one or zero
4087   0C46             
4088   0C46             ; ------------
4089   0C46             ; THE '=' WORD
4090   0C46             ; ------------
4091   0C46             ; (n1, n2 -- flag)
4092   0C46             ; flag is 1 if n1=n2.
4093   0C46             
4094   0C46 BD          L0C46:  DEFB    '=' + $80               ; 'name field'
4095   0C47             
4096   0C47 39 0C               DEFW    L0C39                   ; 'link field'
4097   0C49             
4098   0C49 01          L0C49:  DEFB    $01                     ; 'name length field'
4099   0C4A             
4100   0C4A C3 0E       L0C4A:  DEFW    L0EC3                   ; 'code field' - docolon
4101   0C4C             
4102   0C4C             ; ---
4103   0C4C             
4104   0C4C E1 0D       L0C4C:  DEFW    L0DE1                   ; -
4105   0C4E 1A 0C               DEFW    L0C1A                   ; 0=
4106   0C50 B6 04               DEFW    L04B6                   ; exit
4107   0C52             
4108   0C52             ; ------------
4109   0C52             ; THE '>' WORD
4110   0C52             ; ------------
4111   0C52             ; (n1, n2 -- flag)
4112   0C52             ; flag is 1 if n1>n2.
4113   0C52             
4114   0C52 BE          L0C52:  DEFB    '>' + $80               ; 'name field'
4115   0C53             
4116   0C53 49 0C               DEFW    L0C49                   ; 'link field'
4117   0C55             
4118   0C55 01          L0C55:  DEFB    $01                     ; 'name length field'
4119   0C56             
4120   0C56 58 0C       L0C56:  DEFW    L0C58                   ; 'code field'
4121   0C58             
4122   0C58             ; ---
4123   0C58             
4124   0C58 DF          L0C58:  RST     18H                     ; pop word DE
4125   0C59 D5                  PUSH    DE                      ;
4126   0C5A DF                  RST     18H                     ; pop word DE
4127   0C5B E1                  POP     HL                      ;
4128   0C5C             
4129   0C5C CD 99 0C            CALL    L0C99                   ;
4130   0C5F             
4131   0C5F 18 C0               JR      L0C21                   ; to stack word one or zero
4132   0C61             
4133   0C61             ; ------------
4134   0C61             ; THE '<' WORD
4135   0C61             ; ------------
4136   0C61             ; (n1, n2 -- flag)
4137   0C61             ; flag is 1 if n1 < n2.
4138   0C61             
4139   0C61 BC          L0C61:  DEFB    '<' + $80               ; 'name field'
4140   0C62             
4141   0C62 55 0C               DEFW    L0C55                   ; 'link field'
4142   0C64             
4143   0C64 01          L0C64:  DEFB    $01                     ; 'name length field'
4144   0C65             
4145   0C65 C3 0E       L0C65:  DEFW    L0EC3                   ; 'code field' - docolon
4146   0C67             
4147   0C67             ; ---
4148   0C67             
4149   0C67 85 08               DEFW    L0885                   ; swap
4150   0C69 56 0C               DEFW    L0C56                   ; >
4151   0C6B B6 04               DEFW    L04B6                   ; exit
4152   0C6D             
4153   0C6D             
4154   0C6D             ; -------------
4155   0C6D             ; THE 'U<' WORD
4156   0C6D             ; -------------
4157   0C6D             ; (un1, un2 -- flag)
4158   0C6D             ; The flag is 1 if, of the two unsigned single length integers, un1 is less
4159   0C6D             ; than un2.
4160   0C6D             
4161   0C6D 55          L0C6D:  DEFB    'U'                     ; 'name field'
4162   0C6E BC                  DEFB    '<' + $80
4163   0C6F             
4164   0C6F 64 0C               DEFW    L0C64                   ; 'link field'
4165   0C71             
4166   0C71 02          L0C71:  DEFB    $02                     ; 'name length field'
4167   0C72             
4168   0C72 74 0C       L0C72:  DEFW    L0C74                   ; 'code field'
4169   0C74             
4170   0C74             ; ---
4171   0C74             
4172   0C74 CD 4E 08    L0C74:  CALL    L084E                   ; stk_to_bc
4173   0C77             
4174   0C77 DF          L0C77:  RST     18H                     ; pop word DE
4175   0C78 EB                  EX      DE,HL
4176   0C79 A7                  AND     A
4177   0C7A ED 42               SBC     HL,BC
4178   0C7C 18 A3               JR      L0C21                   ; to stack word one or zero
4179   0C7E             
4180   0C7E             ; -------------
4181   0C7E             ; THE 'D<' WORD
4182   0C7E             ; -------------
4183   0C7E             ; (d1, d2 -- flag)
4184   0C7E             ; flag is 1 if the signed double integer, d1 < d2.
4185   0C7E             
4186   0C7E 44          L0C7E:  DEFB    'D'                     ; 'name field'
4187   0C7F BC                  DEFB    '<' + $80
4188   0C80             
4189   0C80 71 0C               DEFW    L0C71                   ; 'link field'
4190   0C82             
4191   0C82 02          L0C82:  DEFB    $02                     ; 'name length field'
4192   0C83             
4193   0C83 85 0C       L0C83:  DEFW    L0C85                   ; 'code field'
4194   0C85             
4195   0C85             ; ---
4196   0C85             
4197   0C85 DF          L0C85:  RST     18H                     ; pop word DE
4198   0C86 D5                  PUSH    DE
4199   0C87 CD 4E 08            CALL    L084E                   ; stk_to_bc
4200   0C8A DF                  RST     18H                     ; pop word DE
4201   0C8B E1                  POP     HL
4202   0C8C A7                  AND     A
4203   0C8D ED 52               SBC     HL,DE
4204   0C8F 28 E6               JR      Z,L0C77                 ;
4205   0C91             
4206   0C91 19                  ADD     HL,DE
4207   0C92 EB                  EX      DE,HL
4208   0C93             
4209   0C93 CD 99 0C            CALL    L0C99                   ;
4210   0C96             
4211   0C96 DF                  RST     18H                     ; pop word DE
4212   0C97 18 88               JR      L0C21                   ; to stack word one or zero
4213   0C99             
4214   0C99             ; ---
4215   0C99             ; THE 'sign?' SUBROUTINE
4216   0C99             ; ---
4217   0C99             
4218   0C99 7C          L0C99:  LD      A,H
4219   0C9A AA                  XOR     D
4220   0C9B FA A0 0C            JP      M,L0CA0                 ;
4221   0C9E             
4222   0C9E ED 52               SBC     HL,DE
4223   0CA0             
4224   0CA0 CB 14       L0CA0:  RL      H
4225   0CA2 C9                  RET
4226   0CA3             
4227   0CA3             ; -------------
4228   0CA3             ; THE 'U*' WORD
4229   0CA3             ; -------------
4230   0CA3             ; (un1, un2 -- double length(un1 * un2))
4231   0CA3             ; Multiplies two unsigned single length integers to give an unsigned
4232   0CA3             ; double length product.
4233   0CA3             
4234   0CA3 55          L0CA3:  DEFB    'U'                     ; 'name field'
4235   0CA4 AA                  DEFB    '*' + $80
4236   0CA5             
4237   0CA5 82 0C               DEFW    L0C82                   ; 'link field'
4238   0CA7             
4239   0CA7 02          L0CA7:  DEFB    $02                     ; 'name length field'
4240   0CA8             
4241   0CA8 AA 0C       L0CA8:  DEFW    L0CAA                   ; 'code field'
4242   0CAA             
4243   0CAA             ; => mult
4244   0CAA             
4245   0CAA DF          L0CAA:  RST     18H                     ; pop word DE
4246   0CAB CD 4E 08            CALL    L084E                   ; stk_to_bc
4247   0CAE 21 00 00            LD      HL,$0000
4248   0CB1 3E 10               LD      A,$10
4249   0CB3 29          L0CB3:  ADD     HL,HL
4250   0CB4 EB                  EX      DE,HL
4251   0CB5 ED 6A               ADC     HL,HL
4252   0CB7 EB                  EX      DE,HL
4253   0CB8 30 04               JR      NC,L0CBE                ;
4254   0CBA             
4255   0CBA 09                  ADD     HL,BC
4256   0CBB 30 01               JR      NC,L0CBE                ;
4257   0CBD             
4258   0CBD 13                  INC     DE
4259   0CBE             
4260   0CBE 3D          L0CBE:  DEC     A
4261   0CBF 20 F2               JR      NZ,L0CB3                ;
4262   0CC1             
4263   0CC1 EB                  EX      DE,HL
4264   0CC2 18 2F               JR      L0CF3                   ;
4265   0CC4             
4266   0CC4             ; ---
4267   0CC4             ; The 'div?' Internal Word
4268   0CC4             ; ---
4269   0CC4             
4270   0CC4 C6 0C       L0CC4:  DEFW    L0CC6
4271   0CC6             
4272   0CC6 DF          L0CC6:  RST     18H                     ; pop word DE
4273   0CC7 D9                  EXX
4274   0CC8 DF                  RST     18H                     ; pop word DE
4275   0CC9 D5                  PUSH    DE
4276   0CCA DF                  RST     18H                     ; pop word DE
4277   0CCB E1                  POP     HL
4278   0CCC 7C                  LD      A,H
4279   0CCD B5                  OR      L
4280   0CCE 3E 21               LD      A,$21                   ; 33
4281   0CD0 20 03               JR      NZ,L0CD5                ;
4282   0CD2             
4283   0CD2 EB                  EX      DE,HL
4284   0CD3 3E 11               LD      A,$11                   ; 17
4285   0CD5             
4286   0CD5 D9          L0CD5:  EXX
4287   0CD6 47                  LD      B,A
4288   0CD7 AF                  XOR     A
4289   0CD8 67                  LD      H,A
4290   0CD9 6F                  LD      L,A
4291   0CDA 4F                  LD      C,A
4292   0CDB             
4293   0CDB ED 6A       L0CDB:  ADC     HL,HL
4294   0CDD 9F                  SBC     A,A
4295   0CDE A7                  AND     A
4296   0CDF ED 52               SBC     HL,DE
4297   0CE1 99                  SBC     A,C
4298   0CE2 30 01               JR      NC,L0CE5                ;
4299   0CE4 19                  ADD     HL,DE
4300   0CE5             
4301   0CE5 3F          L0CE5:  CCF
4302   0CE6 D9                  EXX
4303   0CE7 EB                  EX      DE,HL
4304   0CE8 ED 6A               ADC     HL,HL
4305   0CEA EB                  EX      DE,HL
4306   0CEB ED 6A               ADC     HL,HL
4307   0CED D9                  EXX
4308   0CEE 10 EB               DJNZ    L0CDB                   ;
4309   0CF0             
4310   0CF0 EB                  EX      DE,HL
4311   0CF1 D7                  RST     10H                     ; push word DE
4312   0CF2 D9                  EXX
4313   0CF3             
4314   0CF3 E5          L0CF3:  PUSH    HL
4315   0CF4 D7                  RST     10H                     ; push word DE
4316   0CF5 D1                  POP     DE
4317   0CF6 D7                  RST     10H                     ; push word DE
4318   0CF7             
4319   0CF7 FD E9               JP      (IY)                    ; to 'next'.
4320   0CF9             
4321   0CF9             ; ---------------
4322   0CF9             ; THE '/MOD' WORD
4323   0CF9             ; ---------------
4324   0CF9             ; (n1, n2 -- remainder, quotient of n1/n2)
4325   0CF9             ; The remainder has the same sign as the dividend n1.
4326   0CF9             
4327   0CF9 2F 4D 4F    L0CF9:  DEFM    "/MO"                   ; 'name field'
4328   0CFC C4                  DEFB    'D' + $80
4329   0CFD             
4330   0CFD A7 0C               DEFW    L0CA7                   ; 'link field'
4331   0CFF             
4332   0CFF 04          L0CFF:  DEFB    $04                     ; 'name length field'
4333   0D00             
4334   0D00 C3 0E       L0D00:  DEFW    L0EC3                   ; 'code field' - docolon
4335   0D02             
4336   0D02             ; ---
4337   0D02             
4338   0D02 85 08       L0D02:  DEFW    L0885                   ; swap
4339   0D04 D2 08               DEFW    L08D2                   ; >R
4340   0D06 E9 12               DEFW    L12E9                   ; I
4341   0D08 0D 0C               DEFW    L0C0D                   ; abs
4342   0D0A 4B 10               DEFW    L104B                   ; stk_data
4343   0D0C 00                  DEFB    $00                     ; zero
4344   0D0D             ; ->
4345   0D0D FF 08       L0D0D:  DEFW    L08FF                   ; rot
4346   0D0F 6B 08               DEFW    L086B                   ; dup
4347   0D11 E9 12               DEFW    L12E9                   ; I
4348   0D13 60 0E               DEFW    L0E60                   ; xor
4349   0D15 D2 08               DEFW    L08D2                   ; >R
4350   0D17 0D 0C               DEFW    L0C0D                   ; abs
4351   0D19 8C 0D               DEFW    L0D8C                   ; U/MOD
4352   0D1B DF 08               DEFW    L08DF                   ; >R
4353   0D1D 94 0D               DEFW    L0D94                   ; pos
4354   0D1F 85 08               DEFW    L0885                   ; swap
4355   0D21 DF 08               DEFW    L08DF                   ; >R
4356   0D23 94 0D               DEFW    L0D94                   ; pos
4357   0D25 85 08               DEFW    L0885                   ; swap
4358   0D27 B6 04               DEFW    L04B6                   ; exit
4359   0D29             
4360   0D29             ; ----------------
4361   0D29             ; THE '*/MOD' WORD
4362   0D29             ; ----------------
4363   0D29             ; (n1, n2, n3 -- remainder, quotient of (n1 * n2)/n3)
4364   0D29             ; As in */, n1 * n2 is held to double length.
4365   0D29             
4366   0D29 2A 2F 4D 4F L0D29:  DEFM    "*/MO"                  ; 'name field'
4367   0D2D C4                  DEFB    'D' + $80
4368   0D2E             
4369   0D2E FF 0C               DEFW    L0CFF                   ; 'link field'
4370   0D30             
4371   0D30 05          L0D30:  DEFB    $05                     ; 'name length field'
4372   0D31             
4373   0D31 C3 0E       L0D31:  DEFW    L0EC3                   ; 'code field' - docolon
4374   0D33             
4375   0D33             ; ---
4376   0D33             
4377   0D33 FF 08               DEFW    L08FF                   ; rot
4378   0D35 D2 08               DEFW    L08D2                   ; >R
4379   0D37 E9 12               DEFW    L12E9                   ; I
4380   0D39 0D 0C               DEFW    L0C0D                   ; abs
4381   0D3B FF 08               DEFW    L08FF                   ; rot
4382   0D3D 6B 08               DEFW    L086B                   ; dup
4383   0D3F DF 08               DEFW    L08DF                   ; >R
4384   0D41 60 0E               DEFW    L0E60                   ; xor
4385   0D43 D2 08               DEFW    L08D2                   ; >R
4386   0D45 0D 0C               DEFW    L0C0D                   ; abs
4387   0D47 A8 0C               DEFW    L0CA8                   ; u*
4388   0D49 76 12               DEFW    L1276                   ; branch
4389   0D4B             
4390   0D4B C1 FF       L0D4B:  DEFW    $FFC1                   ; back to L0D0D  (in /MOD)
4391   0D4D             
4392   0D4D             
4393   0D4D             
4394   0D4D             
4395   0D4D             ; ------------
4396   0D4D             ; THE '/' WORD
4397   0D4D             ; ------------
4398   0D4D             ; (n1, n2 -- n1/n2)
4399   0D4D             ; Single length signed integer division.
4400   0D4D             
4401   0D4D AF          L0D4D:  DEFB    '/' + $80               ; 'name field'
4402   0D4E             
4403   0D4E 30 0D               DEFW    L0D30                   ; 'link field'
4404   0D50             
4405   0D50 01          L0D50:  DEFB    $01                     ; 'name length field'
4406   0D51             
4407   0D51 C3 0E       L0D51:  DEFW    L0EC3                   ; 'code field' - docolon
4408   0D53             
4409   0D53             ; ---
4410   0D53             
4411   0D53 00 0D       L0D53:  DEFW    L0D00                   ; /MOD
4412   0D55 85 08               DEFW    L0885                   ; swap
4413   0D57 79 08               DEFW    L0879                   ; drop
4414   0D59 B6 04               DEFW    L04B6                   ; exit
4415   0D5B             
4416   0D5B             ; --------------
4417   0D5B             ; THE 'MOD' WORD
4418   0D5B             ; --------------
4419   0D5B             ; (n1, n2 -- remainder n1/n2)
4420   0D5B             ; The remainder has the same sign as the dividend.
4421   0D5B             
4422   0D5B 4D 4F       L0D5B:  DEFM    "MO"                    ; 'name field'
4423   0D5D C4                  DEFB    'D' + $80
4424   0D5E             
4425   0D5E 50 0D               DEFW    L0D50                   ; 'link field'
4426   0D60             
4427   0D60 03          L0D60:  DEFB    $03                     ; 'name length field'
4428   0D61             
4429   0D61 C3 0E       L0D61:  DEFW    L0EC3                   ; 'code field' - docolon
4430   0D63             
4431   0D63             ; ---
4432   0D63             
4433   0D63 00 0D               DEFW    L0D00                   ; /MOD
4434   0D65 79 08               DEFW    L0879                   ; drop
4435   0D67 B6 04               DEFW    L04B6                   ; exit
4436   0D69             
4437   0D69             
4438   0D69             ; ------------
4439   0D69             ; THE '*' WORD
4440   0D69             ; ------------
4441   0D69             ; (n1, n2 -- n1*n2)
4442   0D69             
4443   0D69 AA          L0D69:  DEFB    '*' + $80               ; 'name field'
4444   0D6A             
4445   0D6A 60 0D               DEFW    L0D60                   ; 'link field'
4446   0D6C             
4447   0D6C 01          L0D6C:  DEFB    $01                     ; 'name length field'
4448   0D6D             
4449   0D6D C3 0E               DEFW    L0EC3                   ; 'code field' - docolon
4450   0D6F             
4451   0D6F             ; ---
4452   0D6F             
4453   0D6F A8 0C               DEFW    L0CA8                   ; u*
4454   0D71 79 08               DEFW    L0879                   ; drop
4455   0D73 B6 04               DEFW    L04B6                   ; exit
4456   0D75             
4457   0D75             
4458   0D75             ; -------------
4459   0D75             ; THE '*/' WORD
4460   0D75             ; -------------
4461   0D75             ; (n1, n2, n3 -- (n1*n2)/n3)
4462   0D75             ; The intermediate product n1*n2 is held to double length.
4463   0D75             
4464   0D75 2A          L0D75:  DEFB    '*'                     ; 'name field'
4465   0D76 AF                  DEFB    '/' + $80
4466   0D77             
4467   0D77 6C 0D               DEFW    L0D6C                   ; 'link field'
4468   0D79             
4469   0D79 02          L0D79:  DEFB    $02                     ; 'name length field'
4470   0D7A             
4471   0D7A C3 0E       L0D7A:  DEFW    L0EC3                   ; 'code field' - docolon
4472   0D7C             
4473   0D7C             ; ---
4474   0D7C             
4475   0D7C 31 0D               DEFW    L0D31                   ; */MOD
4476   0D7E 85 08               DEFW    L0885                   ; swap
4477   0D80 79 08               DEFW    L0879                   ; drop
4478   0D82 B6 04               DEFW    L04B6                   ; exit
4479   0D84             
4480   0D84             ; --------------
4481   0D84             ; THE 'U/MOD' WORD
4482   0D84             ; --------------
4483   0D84             ; (ud1, un2 -- un3, un4)
4484   0D84             ; In unsigned arithmetic throughout, divides the double length integer ud1
4485   0D84             ; by the single length integer un2 to give a single length remainder un3
4486   0D84             ; and a single length quotient un4.
4487   0D84             
4488   0D84 55 2F 4D 4F L0D84:  DEFM    "U/MO"                  ; 'name field'
4489   0D88 C4                  DEFB    'D' + $80
4490   0D89             
4491   0D89 79 0D               DEFW    L0D79                   ; 'link field'
4492   0D8B             
4493   0D8B 05          L0D8B:  DEFB    $05                     ; 'name length field'
4494   0D8C             
4495   0D8C C3 0E       L0D8C:  DEFW    L0EC3                   ; 'code field' - docolon
4496   0D8E             
4497   0D8E             ; ---
4498   0D8E             
4499   0D8E C4 0C       L0D8E:  DEFW    L0CC4                   ; div?
4500   0D90 79 08               DEFW    L0879                   ; drop
4501   0D92 B6 04               DEFW    L04B6                   ; exit
4502   0D94             
4503   0D94             ; ---
4504   0D94             
4505   0D94             ; make positive
4506   0D94             
4507   0D94 C3 0E       L0D94:  DEFW    L0EC3                   ; 'code field' - docolon
4508   0D96             
4509   0D96             ; ---
4510   0D96             
4511   0D96 2E 0C       L0D96:  DEFW    L0C2E                   ; 0<
4512   0D98 83 12               DEFW    L1283                   ; ?branch               (if false)
4513   0D9A 03 00       L0D9A:  DEFW    $0003                   ; to L0D9E
4514   0D9C             
4515   0D9C A9 0D               DEFW    L0DA9                   ; negate
4516   0D9E             
4517   0D9E B6 04       L0D9E:  DEFW    L04B6                   ; exit
4518   0DA0             
4519   0DA0             ; -----------------
4520   0DA0             ; THE 'NEGATE' WORD
4521   0DA0             ; -----------------
4522   0DA0             ; (n -- -n)
4523   0DA0             
4524   0DA0             
4525   0DA0 4E 45 47 41 L0DA0:  DEFM    "NEGAT"                 ; 'name field'
4525   0DA4 54 
4526   0DA5 C5                  DEFB    'E' +$80
4527   0DA6             
4528   0DA6 8B 0D               DEFW    L0D8B                   ; 'link field'
4529   0DA8             
4530   0DA8 06          L0DA8:  DEFB    $06                     ; 'name length field'
4531   0DA9             
4532   0DA9 AB 0D       L0DA9:  DEFW    L0DAB                   ; 'code field'
4533   0DAB             
4534   0DAB             ; ---
4535   0DAB             
4536   0DAB 01 02 00    L0DAB:  LD      BC,$0002                ;
4537   0DAE 18 0F               JR      L0DBF                   ;
4538   0DB0             
4539   0DB0             ; ------------------
4540   0DB0             ; THE 'DNEGATE' WORD
4541   0DB0             ; ------------------
4542   0DB0             ; (d -- -d)
4543   0DB0             ; Double length integer negation.
4544   0DB0             
4545   0DB0 44 4E 45 47 L0DB0:  DEFM    "DNEGAT"                ; 'name field'
4545   0DB4 41 54 
4546   0DB6 C5                  DEFB    'E' +$80
4547   0DB7             
4548   0DB7 A8 0D               DEFW    L0DA8                   ; 'link field'
4549   0DB9             
4550   0DB9 07          L0DB9:  DEFB    $07                     ; 'name length field'
4551   0DBA             
4552   0DBA BC 0D       L0DBA:  DEFW    L0DBC                   ; 'code field'
4553   0DBC             
4554   0DBC             ; ---
4555   0DBC             
4556   0DBC 01 04 00    L0DBC:  LD      BC,$0004
4557   0DBF             
4558   0DBF             ; NEGATE joins here with bc=2
4559   0DBF             
4560   0DBF 2A 3B 3C    L0DBF:  LD      HL,($3C3B)              ; SPARE
4561   0DC2 A7                  AND     A
4562   0DC3 ED 42               SBC     HL,BC
4563   0DC5             
4564   0DC5 78          L0DC5:  LD      A,B
4565   0DC6 9E                  SBC     A,(HL)
4566   0DC7 77                  LD      (HL),A
4567   0DC8 23                  INC     HL
4568   0DC9 0D                  DEC     C
4569   0DCA 20 F9               JR      NZ,L0DC5                ;
4570   0DCC             
4571   0DCC FD E9               JP      (IY)                    ; to 'next'.
4572   0DCE             
4573   0DCE             ; ------------
4574   0DCE             ; THE '+' WORD
4575   0DCE             ; ------------
4576   0DCE             ; (n1, n2 -- n1 + n2)
4577   0DCE             
4578   0DCE AB          L0DCE:  DEFB    '+' + $80               ; 'name field'
4579   0DCF             
4580   0DCF B9 0D               DEFW    L0DB9                   ; 'link field'
4581   0DD1             
4582   0DD1 01          L0DD1:  DEFB    $01                     ; 'name length field'
4583   0DD2             
4584   0DD2 D4 0D       L0DD2:  DEFW    L0DD4                   ; 'code field'
4585   0DD4             
4586   0DD4             ; ---
4587   0DD4             
4588   0DD4 DF          L0DD4:  RST     18H                     ; pop word DE
4589   0DD5 D5                  PUSH    DE                      ; save on machine stack
4590   0DD6 DF                  RST     18H                     ; pop word DE
4591   0DD7 E1                  POP     HL                      ; first number to HL
4592   0DD8             
4593   0DD8 19                  ADD     HL,DE                   ; the actual addition
4594   0DD9             
4595   0DD9 EB                  EX      DE,HL                   ; result to DE
4596   0DDA D7                  RST     10H                     ; push word DE
4597   0DDB             
4598   0DDB FD E9               JP      (IY)                    ; to 'next'.
4599   0DDD             
4600   0DDD             ; ------------
4601   0DDD             ; THE '-' WORD
4602   0DDD             ; ------------
4603   0DDD             ; (n1, n2 -- n1-n2)
4604   0DDD             ; flip the sign and do a plus.
4605   0DDD             
4606   0DDD AD          L0DDD:  DEFB    '-' + $80               ; 'name field'
4607   0DDE             
4608   0DDE D1 0D               DEFW    L0DD1                   ; 'link field'
4609   0DE0             
4610   0DE0 01          L0DE0:  DEFB    $01                     ; 'name length field'
4611   0DE1             
4612   0DE1 C3 0E       L0DE1:  DEFW    L0EC3                   ; 'code field' - docolon
4613   0DE3             
4614   0DE3             ; ---
4615   0DE3             
4616   0DE3 A9 0D       L0DE3:  DEFW    L0DA9                   ; negate
4617   0DE5 D2 0D               DEFW    L0DD2                   ; +
4618   0DE7 B6 04               DEFW    L04B6                   ; exit
4619   0DE9             
4620   0DE9             ; -------------
4621   0DE9             ; THE 'D+' WORD
4622   0DE9             ; -------------
4623   0DE9             ; (d1, d2 -- d1 + d2)
4624   0DE9             ; double length integer addition.
4625   0DE9             
4626   0DE9 44          L0DE9:  DEFB    'D'                     ; 'name field'
4627   0DEA AB                  DEFB    '+' + $80
4628   0DEB             
4629   0DEB E0 0D               DEFW    L0DE0                   ; 'link field'
4630   0DED             
4631   0DED 02          L0DED:  DEFB    $02                     ; 'name length field'
4632   0DEE             
4633   0DEE F0 0D       L0DEE:  DEFW    L0DF0                   ; 'code field'
4634   0DF0             
4635   0DF0             ; ---
4636   0DF0             
4637   0DF0 DF          L0DF0:  RST     18H                     ; pop word DE
4638   0DF1             
4639   0DF1 D5                  PUSH    DE
4640   0DF2 CD 4E 08            CALL    L084E                   ; stk_to_bc
4641   0DF5 DF                  RST     18H                     ; pop word DE
4642   0DF6 D5                  PUSH    DE
4643   0DF7 DF                  RST     18H                     ; pop word DE
4644   0DF8 EB                  EX      DE,HL
4645   0DF9 09                  ADD     HL,BC
4646   0DFA EB                  EX      DE,HL
4647   0DFB D7                  RST     10H                     ; push word DE
4648   0DFC C1                  POP     BC
4649   0DFD E1                  POP     HL
4650   0DFE ED 4A               ADC     HL,BC
4651   0E00 EB                  EX      DE,HL
4652   0E01 D7                  RST     10H                     ; push word DE
4653   0E02             
4654   0E02 FD E9               JP      (IY)                    ; to 'next'.
4655   0E04             
4656   0E04             ; -------------
4657   0E04             ; THE '1+' WORD
4658   0E04             ; -------------
4659   0E04             ; (n -- n+1)
4660   0E04             
4661   0E04 31          L0E04:  DEFB    '1'                     ; 'name field'
4662   0E05 AB                  DEFB    '+' + $80
4663   0E06             
4664   0E06 ED 0D               DEFW    L0DED                   ; 'link field'
4665   0E08             
4666   0E08 02          L0E08:  DEFB    $02                     ; 'name length field'
4667   0E09             
4668   0E09 0B 0E       L0E09:  DEFW    L0E0B                   ; 'code field'
4669   0E0B             
4670   0E0B             ; ---
4671   0E0B             
4672   0E0B DF          L0E0B:  RST     18H                     ; get word 'n' in DE
4673   0E0C 18 09               JR      L0E17                   ; forward to increment and stack
4674   0E0E             
4675   0E0E             ; -------------
4676   0E0E             ; THE '2+' WORD
4677   0E0E             ; -------------
4678   0E0E             ; (n -- n+2)
4679   0E0E             
4680   0E0E 32          L0E0E:  DEFB    '2'                     ; 'name field'
4681   0E0F AB                  DEFB    '+' + $80
4682   0E10             
4683   0E10 08 0E               DEFW    L0E08                   ; 'link field'
4684   0E12             
4685   0E12 02          L0E12:  DEFB    $02                     ; 'name length field'
4686   0E13             
4687   0E13 15 0E       L0E13:  DEFW    L0E15                   ; 'code field'
4688   0E15             
4689   0E15             ; ---
4690   0E15             
4691   0E15 DF          L0E15:  RST     18H                     ; get word 'n' in DE.
4692   0E16 13                  INC     DE                      ; increment n                   (4)
4693   0E17             ; ->
4694   0E17 13          L0E17:  INC     DE                      ; increment n                   (4)
4695   0E18 18 14               JR      L0E2E                   ; forward to push word DE and exit
4696   0E1A             
4697   0E1A             ; -------------
4698   0E1A             ; THE '1-' WORD
4699   0E1A             ; -------------
4700   0E1A             ; (n -- n-1)
4701   0E1A             
4702   0E1A             
4703   0E1A 31          L0E1A:  DEFB    '1'                     ; 'name field'
4704   0E1B AD                  DEFB    '-' + $80
4705   0E1C             
4706   0E1C 12 0E               DEFW    L0E12                   ; 'link field'
4707   0E1E             
4708   0E1E 02          L0E1E:  DEFB    $02                     ; 'name length field'
4709   0E1F             
4710   0E1F 21 0E       L0E1F:  DEFW    L0E21                   ; 'code field'
4711   0E21             
4712   0E21             ; ---
4713   0E21             
4714   0E21 DF          L0E21:  RST     18H                     ;
4715   0E22 18 09               JR      L0E2D                   ;
4716   0E24             
4717   0E24             ; -------------
4718   0E24             ; THE '2-' WORD
4719   0E24             ; -------------
4720   0E24             ; (n -- n-2)
4721   0E24             
4722   0E24             
4723   0E24 32          L0E24:  DEFB    '2'                     ; 'name field'
4724   0E25 AD          L0E25:  DEFB    '-' + $80
4725   0E26             
4726   0E26 1E 0E       L0E26:  DEFW    L0E1E                   ; 'link field'
4727   0E28             
4728   0E28 02          L0E28:  DEFB    $02                     ; 'name length field'
4729   0E29             
4730   0E29 2B 0E       L0E29:  DEFW    L0E2B                   ; 'code field'
4731   0E2B             
4732   0E2B             ; ---
4733   0E2B             
4734   0E2B             ;
4735   0E2B DF          L0E2B:  RST     18H
4736   0E2C 1B                  DEC     DE
4737   0E2D             
4738   0E2D             ; ->
4739   0E2D 1B          L0E2D:  DEC     DE
4740   0E2E             
4741   0E2E             ; ->
4742   0E2E D7          L0E2E:  RST     10H                     ; push word DE
4743   0E2F             
4744   0E2F FD E9               JP      (IY)                    ; to 'next'.
4745   0E31             
4746   0E31             ; -------------
4747   0E31             ; THE 'OR' WORD
4748   0E31             ; -------------
4749   0E31             ; (n1, n2 -- n1 OR n2)
4750   0E31             ; Bitwise Boolean operation.
4751   0E31             
4752   0E31             
4753   0E31 4F          L0E31:  DEFB    'O'                     ; 'name field'
4754   0E32 D2                  DEFB    'R' + $80
4755   0E33             
4756   0E33 28 0E               DEFW    L0E28                   ; 'link field'
4757   0E35             
4758   0E35 02          L0E35:  DEFB    $02                     ; 'name length field'
4759   0E36             
4760   0E36 38 0E       L0E36:  DEFW    L0E38                   ; 'code field'
4761   0E38             
4762   0E38             ; ---
4763   0E38             
4764   0E38 DF          L0E38:  RST     18H                     ; pop word DE
4765   0E39 CD 4E 08            CALL    L084E                   ; stk_to_bc
4766   0E3C             
4767   0E3C 7B                  LD      A,E                     ;
4768   0E3D B1                  OR      C                       ; OR low order bytes
4769   0E3E 5F                  LD      E,A                     ;
4770   0E3F             
4771   0E3F 7A                  LD      A,D                     ;
4772   0E40 B0                  OR      B                       ; OR high order bytes
4773   0E41 57                  LD      D,A                     ;
4774   0E42             
4775   0E42 D7                  RST     10H                     ; push word DE
4776   0E43             
4777   0E43 FD E9               JP      (IY)                    ; to 'next'.
4778   0E45             
4779   0E45             ; --------------
4780   0E45             ; THE 'AND' WORD
4781   0E45             ; --------------
4782   0E45             ; (n1, n2 -- n1 AND n2)
4783   0E45             ; Bitwise Boolean operation.
4784   0E45             
4785   0E45             
4786   0E45 41 4E       L0E45:  DEFM    "AN"                    ; 'name field'
4787   0E47 C4                  DEFB    'D' + $80
4788   0E48             
4789   0E48 35 0E               DEFW    L0E35                   ; 'link field'
4790   0E4A             
4791   0E4A 03          L0E4A:  DEFB    $03                     ; 'name length field'
4792   0E4B             
4793   0E4B 4D 0E               DEFW    L0E4D                   ; 'code field'
4794   0E4D             
4795   0E4D             ; ---
4796   0E4D             
4797   0E4D DF          L0E4D:  RST     18H
4798   0E4E CD 4E 08            CALL    L084E                   ; stk_to_bc
4799   0E51             
4800   0E51 7B                  LD      A,E                     ;
4801   0E52 A1                  AND     C                       ;
4802   0E53 5F                  LD      E,A                     ;
4803   0E54             
4804   0E54 7A                  LD      A,D                     ;
4805   0E55 A0                  AND     B                       ;
4806   0E56 57                  LD      D,A                     ;
4807   0E57             
4808   0E57 D7                  RST     10H                     ; push word DE
4809   0E58 FD E9               JP      (IY)                    ; to 'next'.
4810   0E5A             
4811   0E5A             ; --------------
4812   0E5A             ; THE 'XOR' WORD
4813   0E5A             ; --------------
4814   0E5A             ; (n1, n2 -- n1 XOR n2)
4815   0E5A             ; Bitwise Boolean XOR (exclusive or)
4816   0E5A             
4817   0E5A 58 4F       L0E5A:  DEFM    "XO"                    ; 'name field'
4818   0E5C D2                  DEFB    'R' + $80
4819   0E5D             
4820   0E5D 4A 0E               DEFW    L0E4A                   ; 'link field'
4821   0E5F             
4822   0E5F 03          L0E5F:  DEFB    $03                     ; 'name length field'
4823   0E60             
4824   0E60 62 0E       L0E60:  DEFW    L0E62                   ; 'code field'
4825   0E62             
4826   0E62             ; ---
4827   0E62             
4828   0E62 DF          L0E62:  RST     18H
4829   0E63 CD 4E 08            CALL    L084E                   ; stk_to_bc
4830   0E66             
4831   0E66 7B                  LD      A,E                     ;
4832   0E67 A9                  XOR     C                       ;
4833   0E68 5F                  LD      E,A                     ;
4834   0E69             
4835   0E69 7A                  LD      A,D                     ;
4836   0E6A A8                  XOR     B                       ;
4837   0E6B 57                  LD      D,A                     ;
4838   0E6C             
4839   0E6C D7                  RST     10H                     ; push word DE
4840   0E6D FD E9               JP      (IY)                    ; to 'next'.
4841   0E6F             
4842   0E6F             ; --------------
4843   0E6F             ; THE 'MAX' WORD
4844   0E6F             ; --------------
4845   0E6F             ; (n1, n2 -- max (n1, n2))
4846   0E6F             ; Calculates the larger of two numbers.
4847   0E6F             
4848   0E6F 4D 41       L0E72:  DEFM    "MA"                    ; 'name field'
4849   0E71 D8                  DEFB    'X' + $80
4850   0E72             
4851   0E72 5F 0E               DEFW    L0E5F                   ; 'link field'
4852   0E74             
4853   0E74 03          L0E74:  DEFB    $03                     ; 'name length field'
4854   0E75             
4855   0E75 C3 0E       L0E75:  DEFW    L0EC3                   ; 'code field' - docolon
4856   0E77             
4857   0E77             ; ---
4858   0E77             
4859   0E77 12 09       L0E77:  DEFW    L0912                   ; over
4860   0E79 12 09               DEFW    L0912                   ; over
4861   0E7B 65 0C               DEFW    L0C65                   ; <
4862   0E7D 71 12               DEFW    L1271                   ; branch
4863   0E7F 0F 00       L0E7F:  DEFW    $000F                   ; forward to L0E8F
4864   0E81             
4865   0E81             ; --------------
4866   0E81             ; THE 'MIN' WORD
4867   0E81             ; --------------
4868   0E81             ; (n1, n2 -- min (n1, n2))
4869   0E81             ; Calculates the smaller of two numbers.
4870   0E81             
4871   0E81 4D 49       L0E81:  DEFM    "MI"                    ; 'name field'
4872   0E83 CE                  DEFB    'N' + $80
4873   0E84             
4874   0E84 74 0E               DEFW    L0E74                   ; 'link field'
4875   0E86             
4876   0E86 03          L0E86:  DEFB    $03                     ; 'name length field'
4877   0E87             
4878   0E87 C3 0E               DEFW    L0EC3                   ; 'code field' - docolon
4879   0E89             
4880   0E89             ; ---
4881   0E89             
4882   0E89 12 09       L0E89:  DEFW    L0912                   ; over
4883   0E8B 12 09               DEFW    L0912                   ; over
4884   0E8D 56 0C               DEFW    L0C56                   ; >
4885   0E8F             ; ->
4886   0E8F 83 12       L0E8F:  DEFW    L1283                   ; ?branch
4887   0E91 03 00       L0E91:  DEFW    $0003                   ; forward to L0995
4888   0E93             
4889   0E93 85 08               DEFW    L0885                   ; swap
4890   0E95             
4891   0E95 79 08       L0995:  DEFW    L0879                   ; drop
4892   0E97 B6 04               DEFW    L04B6                   ; exit
4893   0E99             
4894   0E99             ; ------------------
4895   0E99             ; THE 'DECIMAL' WORD
4896   0E99             ; ------------------
4897   0E99             ; (  --  )
4898   0E99             ; Sets the system number base to ten.
4899   0E99             
4900   0E99 44 45 43 49 L0E99:  DEFM    "DECIMA"                ; 'name field'
4900   0E9D 4D 41 
4901   0E9F CC                  DEFB    'L' + $80
4902   0EA0             
4903   0EA0 86 0E               DEFW    L0E86                   ; 'link field'
4904   0EA2             
4905   0EA2 07          L0EA2:  DEFB    $07                     ; 'name length field'
4906   0EA3             
4907   0EA3 A5 0E               DEFW    L0EA5                   ; 'code field'
4908   0EA5             
4909   0EA5             ; ---
4910   0EA5             
4911   0EA5 DD 36 3F 0A L0EA5:  LD      (IX+$3F),$0A            ; update system variable BASE to 10
4912   0EA9             
4913   0EA9 FD E9               JP      (IY)                    ; to 'next'.
4914   0EAB             
4915   0EAB             ; ------------
4916   0EAB             ; THE ':' WORD
4917   0EAB             ; ------------
4918   0EAB             ; Introduces colon definitions.
4919   0EAB             
4920   0EAB BA          L0EAB:  DEFB    ':' + $80               ; 'name field'
4921   0EAC             
4922   0EAC A2 0E               DEFW    L0EA2                   ; 'link field'
4923   0EAE             
4924   0EAE 01          L0EAE:  DEFB    $01                     ; 'name length field'
4925   0EAF             
4926   0EAF 85 10       L0EAF:  DEFW    L1085                   ; 'code field' - create and enclose
4927   0EB1             
4928   0EB1             ; ---
4929   0EB1             
4930   0EB1 C3 0E       L0EB1:  DEFW    L0EC3                   ; do_colon
4931   0EB3             
4932   0EB3 4B 10               DEFW    L104B                   ; stk_data
4933   0EB5 0A                  DEFB    $0A                     ; ten                   marker byte?
4934   0EB6             ; ->
4935   0EB6 0E 1A       L0EB6:  DEFW    L1A0E                   ; end_forth
4936   0EB8             
4937   0EB8 21 3E 3C    L0EB8:  LD      HL,$3C3E                ; FLAGS
4938   0EBB             
4939   0EBB 7E                  LD      A,(HL)                  ; update bits 6 and 2.
4940   0EBC F6 44               OR      $44                     ; signal in compile mode, definition
4941   0EBE                                                     ; incomplete.
4942   0EBE 77                  LD      (HL),A                  ; update FLAGS.
4943   0EBF             
4944   0EBF FD E9               JP      (IY)                    ; to 'next'.
4945   0EC1             
4946   0EC1             ; ---
4947   0EC1             
4948   0EC1 E9          x0EC1   DEFB    $E9                     ;;
4949   0EC2 FF          x0Ec2   DEFB    $FF                     ;; 0ec2 + ffe9 =  0eab = ':'
4950   0EC3             
4951   0EC3             ; -------------------------------
4952   0EC3             ; THE 'ENTER' or 'DOCOLON' action
4953   0EC3             ; -------------------------------
4954   0EC3             ;
4955   0EC3             
4956   0EC3 EB          L0EC3:  EX      DE,HL                   ;
4957   0EC4 C3 BA 04            JP      L04BA                   ;
4958   0EC7             
4959   0EC7             
4960   0EC7             ; -----------------
4961   0EC7             ; THE 'CREATE' WORD
4962   0EC7             ; -----------------
4963   0EC7             ; CREATE name
4964   0EC7             ; (  --  )
4965   0EC7             ; Defines a new word with a header and an empty parameter field.
4966   0EC7             ; When executed, the new word stacks its parameter field address.
4967   0EC7             
4968   0EC7 43 52 45 41 L0EC7:  DEFM    "CREAT"                 ; 'name field'
4968   0ECB 54 
4969   0ECC C5                  DEFB    'E' + $80
4970   0ECD             
4971   0ECD AE 0E               DEFW    L0EAE                   ; 'link field'
4972   0ECF             
4973   0ECF 06          L0ECF:  DEFB    $06                     ; 'name length field'
4974   0ED0             
4975   0ED0 C3 0E       L0ED0:  DEFW    L0EC3                   ; 'code field' - docolon
4976   0ED2             
4977   0ED2             ; ---
4978   0ED2             
4979   0ED2 4B 10       L0ED2:  DEFW    L104B                   ; stk_data
4980   0ED4 20                  DEFB    $20                     ; a space               delimiter
4981   0ED5 AB 05               DEFW    L05AB                   ; word to pad
4982   0ED7 FB 0E               DEFW    L0EFB                   ; get-name              in dict
4983   0ED9 88 06               DEFW    L0688                   ; stk-zero              link
4984   0EDB 4E 0F               DEFW    L0F4E                   ; ,
4985   0EDD 80 04               DEFW    L0480                   ; current
4986   0EDF B3 08               DEFW    L08B3                   ; @
4987   0EE1 6B 08               DEFW    L086B                   ; dup
4988   0EE3 B3 08               DEFW    L08B3                   ; @
4989   0EE5 4E 0F               DEFW    L0F4E                   ; ,
4990   0EE7 60 04               DEFW    L0460                   ; here
4991   0EE9 85 08               DEFW    L0885                   ; swap
4992   0EEB C1 08               DEFW    L08C1                   ; !
4993   0EED 99 04               DEFW    L0499                   ; pad
4994   0EEF 96 08               DEFW    L0896                   ; C@            fetch 1 byte
4995   0EF1 5F 0F               DEFW    L0F5F                   ; C,
4996   0EF3 11 10               DEFW    L1011                   ; stack next word
4997   0EF5 EC 0F               DEFW    $0FEC                   ; ???
4998   0EF7 4E 0F               DEFW    L0F4E                   ; ,
4999   0EF9 B6 04       L0EF9:  DEFW    L04B6                   ; exit
5000   0EFB             
5001   0EFB             ; ----------------------------
5002   0EFB             ; The 'get_name' Internal Word
5003   0EFB             ; ----------------------------
5004   0EFB             ; Used only by the above CREATE thread.
5005   0EFB             
5006   0EFB FD 0E       L0EFB:  DEFW    L0EFD                   ; headerless 'code field'
5007   0EFD             
5008   0EFD             ; ---
5009   0EFD             
5010   0EFD CD 2E 0F    L0EFD:  CALL    L0F2E                   ; blank stack
5011   0F00             
5012   0F00 DF                  RST     18H                     ; pop word DE
5013   0F01             
5014   0F01 1A                  LD      A,(DE)
5015   0F02 3D                  DEC     A                       ; zero becomes $FF
5016   0F03 FE 3F               CP      $3F                     ; max length is 64
5017   0F05 38 02               JR      C,L0F09                 ; forward if n range 1 - 64.
5018   0F07             
5019   0F07 E7                  RST     20H                     ; Error 6
5020   0F08 06                  DEFB    $06                     ; Name of new word too short or long.
5021   0F09             
5022   0F09             ; ---
5023   0F09             
5024   0F09 C6 08       L0F09:  ADD     A,$08                   ; allow for prev/len/addr 3 missing
5025   0F0B             
5026   0F0B 4F                  LD      C,A                     ;
5027   0F0C 06 00               LD      B,$00                   ; length to BC
5028   0F0E             
5029   0F0E CD 8C 0F    L0F0E:  CALL    L0F8C                   ; check free memory.
5030   0F11             
5031   0F11 1A          x0f11   LD      A,(DE)                  ; true length to A
5032   0F12 4F                  LD      C,A                     ; and BC again
5033   0F13             
5034   0F13 2A 37 3C            LD      HL,($3C37)              ; STKBOT
5035   0F16             
5036   0F16 D5                  PUSH    DE                      ;
5037   0F17 CD 9E 0F            CALL    L0F9E                   ; routine MAKE ROOM
5038   0F1A D1                  POP     DE                      ;
5039   0F1B             
5040   0F1B 1A                  LD      A,(DE)                  ; length of word in pad
5041   0F1C 47                  LD      B,A                     ; transfer to counter.
5042   0F1D             
5043   0F1D 13          L0F1D:  INC     DE                      ; increase source
5044   0F1E 1A                  LD      A,(DE)                  ; fetch character
5045   0F1F             
5046   0F1F CD 07 08            CALL    L0807                   ; to_upper makes uppercase.
5047   0F22             
5048   0F22 77                  LD      (HL),A                  ; store in dictionary
5049   0F23 23                  INC     HL                      ; increase destination
5050   0F24 10 F7               DJNZ    L0F1D                   ; loop back for all letters.
5051   0F26             
5052   0F26 22 39 3C            LD      ($3C39),HL              ; store this location in SPARE
5053   0F29 2B                  DEC     HL                      ; step back to last letter of word.
5054   0F2A CB FE               SET     7,(HL)                  ; and 'invert' it.
5055   0F2C FD E9               JP      (IY)                    ; to 'next'.
5056   0F2E             
5057   0F2E             ; ---
5058   0F2E             
5059   0F2E             
5060   0F2E DD CB 3E 56 L0F2E:  BIT     2,(IX+$3E)              ; test FLAGS incomplete definition ?
5061   0F32 28 02               JR      Z,L0F36                 ; forward if not.
5062   0F34             
5063   0F34 E7                  RST     20H                     ; Error 12
5064   0F35 0C                  DEFB    $0C                     ; Incomplete definition in dictionary.
5065   0F36             
5066   0F36             ; ---
5067   0F36             
5068   0F36 2A 37 3C    L0F36:  LD      HL,($3C37)              ; fetch STKBOT
5069   0F39 ED 5B 39 3C         LD      DE,($3C39)              ; fetch SPARE
5070   0F3D             
5071   0F3D AF                  XOR     A                       ; clear accumulator and carry flag
5072   0F3E             
5073   0F3E ED 52               SBC     HL,DE                   ; subtract
5074   0F40             
5075   0F40 EB                  EX      DE,HL                   ;
5076   0F41 73                  LD      (HL),E                  ; place low byte at next STACK slot.
5077   0F42 23                  INC     HL                      ;
5078   0F43 72                  LD      (HL),D                  ; place high byte
5079   0F44 67                  LD      H,A                     ; make HL zero
5080   0F45 6F                  LD      L,A                     ;
5081   0F46 22 39 3C            LD      ($3C39),HL              ; update system variable SPARE to zero
5082   0F49             
5083   0F49 C9                  RET                             ; return
5084   0F4A             
5085   0F4A             ; ---------------------
5086   0F4A             
5087   0F4A             ; ------------
5088   0F4A             ; THE ',' WORD
5089   0F4A             ; ------------
5090   0F4A             ; ( n --   )
5091   0F4A             ; Encloses the single length integer in the dictionary.
5092   0F4A             
5093   0F4A AC          L0F4A:  DEFB    ',' + $80               ; 'name field'
5094   0F4B             
5095   0F4B CF 0E               DEFW    L0ECF                   ; 'link field'
5096   0F4D             
5097   0F4D 01          L0F4D:  DEFB    $01                     ; 'name length field'
5098   0F4E             
5099   0F4E C3 0E       L0F4E:  DEFW    L0EC3                   ; 'code field' - docolon
5100   0F50             
5101   0F50             ; ---
5102   0F50             
5103   0F50 83 0F       L0F50:  DEFW    L0F83                   ; allot2
5104   0F52             
5105   0F52 60 04               DEFW    L0460                   ; here
5106   0F54 29 0E               DEFW    L0E29                   ; 2-
5107   0F56 C1 08               DEFW    L08C1                   ; !
5108   0F58 B6 04               DEFW    L04B6                   ; exit
5109   0F5A             
5110   0F5A             
5111   0F5A             ; -------------
5112   0F5A             ; THE 'C,' WORD
5113   0F5A             ; -------------
5114   0F5A             ; ( n --   )
5115   0F5A             ; Encloses the less significant byte of n in the dictionary.
5116   0F5A             
5117   0F5A 43          L0F5A:  DEFB    'C'                     ; 'name field'
5118   0F5B AC                  DEFB    ',' + $80
5119   0F5C             
5120   0F5C 4D 0F               DEFW    L0F4D                   ; 'link field'
5121   0F5E             
5122   0F5E 02          L0F5E:  DEFB    $02                     ; 'name length field'
5123   0F5F             
5124   0F5F C3 0E       L0F5F:  DEFW    L0EC3                   ; 'code field' - docolon
5125   0F61             
5126   0F61             ; ---
5127   0F61             
5128   0F61 4B 10       L0F61:  DEFW    L104B                   ; stk-data
5129   0F63 01                  DEFB    $01                     ; one
5130   0F64 76 0F               DEFW    L0F76                   ; allot
5131   0F66             
5132   0F66 60 04       x0f66   DEFW    L0460                   ; here
5133   0F68 1F 0E               DEFW    L0E1F                   ; 1-
5134   0F6A A5 08               DEFW    L08A5                   ; C!
5135   0F6C B6 04               DEFW    L04B6                   ; exit
5136   0F6E             
5137   0F6E             ; ----------------
5138   0F6E             ; THE 'ALLOT' WORD
5139   0F6E             ; ----------------
5140   0F6E             ; (n -- )
5141   0F6E             ; Encloses n bytes in the dictionary, without initializing them.
5142   0F6E             
5143   0F6E 41 4C 4C 4F L0F6E:  DEFM    "ALLO"                  ; 'name field'
5144   0F72 D4                  DEFB    'T' + $80
5145   0F73             
5146   0F73 5E 0F               DEFW    L0F5E                   ; 'link field'
5147   0F75             
5148   0F75 05          L0F75:  DEFB    $05                     ; 'name length field'
5149   0F76             
5150   0F76 78 0F       L0F76:  DEFW    L0F78                   ; 'code field'
5151   0F78             
5152   0F78             ; ---
5153   0F78             
5154   0F78 CD 4E 08    L0F78:  CALL    L084E                   ; stk_to_bc
5155   0F7B 2A 37 3C            LD      HL,($3C37)              ; STKBOT
5156   0F7E CD 9E 0F            CALL    L0F9E                   ; routine MAKE ROOM
5157   0F81 FD E9               JP      (IY)                    ; to 'next'.
5158   0F83             
5159   0F83             ; --------------------------
5160   0F83             ; The 'allot2' Internal Word
5161   0F83             ; --------------------------
5162   0F83             ; Encloses 2 bytes in the dictionary, without initializing them.
5163   0F83             
5164   0F83 C3 0E       L0F83:  DEFW    L0EC3                   ; headerless 'code field' - docolon
5165   0F85             
5166   0F85             ; ---
5167   0F85             
5168   0F85 4B 10       L0F85:  DEFW    L104B                   ; stk_data
5169   0F87 02                  DEFB    $02                     ; two bytes required
5170   0F88 76 0F               DEFW    L0F76                   ; allot
5171   0F8A B6 04               DEFW    L04B6                   ; exit
5172   0F8C             
5173   0F8C             ; ----------------------------------
5174   0F8C             ; THE 'DEFAULT MEMORY CHECK' ROUTINE
5175   0F8C             ; ----------------------------------
5176   0F8C             ; called each cycle in slow mode to check free memory.
5177   0F8C             
5178   0F8C 21 1E 00    L0F8C:  LD      HL,$001E                ; Allow a thirty byte overhead.
5179   0F8F             
5180   0F8F             ; ----------------------------------
5181   0F8F             ; THE 'CHECK FREE MEMORY' SUBROUTINE
5182   0F8F             ; ----------------------------------
5183   0F8F             
5184   0F8F C5          L0F8F:  PUSH    BC                      ; save bytes to check.
5185   0F90             
5186   0F90 09                  ADD     HL,BC                   ;
5187   0F91 ED 4B 3B 3C         LD      BC,($3C3B)              ; SPARE
5188   0F95 09                  ADD     HL,BC                   ; carry indicates error - past 65535
5189   0F96             
5190   0F96 C1                  POP     BC                      ; restore number of bytes
5191   0F97 38 03               JR      C,L0F9C                 ; forward with error
5192   0F99             
5193   0F99 ED 72               SBC     HL,SP                   ; now check against the return stack
5194   0F9B                                                     ; (machine stack)
5195   0F9B D8                  RET     C                       ; return if value is less
5196   0F9C             
5197   0F9C E7          L0F9C:  RST     20H                     ; Error 1
5198   0F9D 01                  DEFB    $01                     ; Not enough memory
5199   0F9E             
5200   0F9E             ; --------------------------
5201   0F9E             ; THE 'MAKE ROOM' SUBROUTINE
5202   0F9E             ; --------------------------
5203   0F9E             
5204   0F9E EB          L0F9E:  EX      DE,HL                   ; first new location to DE
5205   0F9F 21 28 00            LD      HL,$0028                ; overhead 40 bytes.
5206   0FA2             
5207   0FA2 CD 8F 0F    L0FA2:  CALL    L0F8F                   ; check free memory.
5208   0FA5             
5209   0FA5             ; now increase the two data stack pointers.
5210   0FA5             
5211   0FA5 2A 37 3C            LD      HL,($3C37)              ; fetch value of STKBOT
5212   0FA8 09                  ADD     HL,BC                   ; add required room.
5213   0FA9 22 37 3C            LD      ($3C37),HL              ; update STKBOT.
5214   0FAC             
5215   0FAC 2A 3B 3C            LD      HL,($3C3B)              ; fetch value of SPARE
5216   0FAF E5                  PUSH    HL                      ; take a copy of 'old' value
5217   0FB0 09                  ADD     HL,BC                   ; add required room.
5218   0FB1 22 3B 3C            LD      ($3C3B),HL              ; update SPARE.
5219   0FB4             
5220   0FB4 E3                  EX      (SP),HL                 ; new SPARE value to stack,
5221   0FB5                                                     ; old SPARE value to HL.
5222   0FB5 E5                  PUSH    HL                      ; push old SPARE value.
5223   0FB6 A7                  AND     A                       ; clear carry.
5224   0FB7             
5225   0FB7 ED 52               SBC     HL,DE                   ; get length of stack and 12
5226   0FB9 44                  LD      B,H                     ;
5227   0FBA 4D                  LD      C,L                     ;
5228   0FBB E1                  POP     HL                      ; old spare
5229   0FBC D1                  POP     DE                      ; new spare
5230   0FBD C8                  RET     Z                       ; return if same.
5231   0FBE             
5232   0FBE             ; else new SPARE must be higher than old spare.
5233   0FBE             
5234   0FBE 2B                  DEC     HL                      ; point to end of data stack
5235   0FBF 1B                  DEC     DE                      ; adjust destination.
5236   0FC0 ED B8               LDDR                            ; copy the Data Stack + gap upwards.
5237   0FC2             
5238   0FC2 23          L0FC2:  INC     HL                      ; point to first new location.
5239   0FC3             
5240   0FC3 C9                  RET                             ; return.
5241   0FC4             
5242   0FC4             ; -------------------
5243   0FC4             ; THE 'VARIABLE' WORD
5244   0FC4             ; -------------------
5245   0FC4             ; VARIABLE name
5246   0FC4             ; (n -- )
5247   0FC4             ; Sets up a variable with the given name, and initializes its value to n.
5248   0FC4             
5249   0FC4 56 41 52 49 L0FC4:  DEFM    "VARIABL"               ; 'name field'
5249   0FC8 41 42 4C 
5250   0FCB C5                  DEFB    'E' + $80
5251   0FCC             
5252   0FCC 75 0F               DEFW    L0F75                   ; 'link field'
5253   0FCE             
5254   0FCE 08          L0FCE:  DEFB    $08                     ; 'name length field'
5255   0FCF             
5256   0FCF 85 10               DEFW    L1085                   ; 'code field' - create and enclose
5257   0FD1             
5258   0FD1             ; ---
5259   0FD1             
5260   0FD1 F0 0F       L0FD1:  DEFW    L0FF0                   ; push word DE
5261   0FD3 4E 0F               DEFW    L0F4E                   ; ,
5262   0FD5             
5263   0FD5 B6 04               DEFW    L04B6                   ; exit
5264   0FD7             
5265   0FD7             ; -------------------
5266   0FD7             ; THE 'CONSTANT' WORD
5267   0FD7             ; -------------------
5268   0FD7             ; CONSTANT name
5269   0FD7             ; (n -- )
5270   0FD7             ; Defines a constant with the given name and value n.
5271   0FD7             
5272   0FD7 43 4F 4E 53 L0FD7:  DEFM    "CONSTAN"               ; 'name field'
5272   0FDB 54 41 4E 
5273   0FDE D4                  DEFB    'T' + $80
5274   0FDF             
5275   0FDF CE 0F               DEFW    L0FCE                   ; 'link field'
5276   0FE1             
5277   0FE1 08          L0FE1:  DEFB    $08                     ; 'name length field'
5278   0FE2             
5279   0FE2 85 10       L0FE2:  DEFW    L1085                   ; 'code field' - create and enclose
5280   0FE4             
5281   0FE4             ; ---
5282   0FE4             
5283   0FE4 F5 0F       L0FE4:  DEFW    L0FF5                   ; pad??
5284   0FE6 4E 0F               DEFW    L0F4E                   ; ,
5285   0FE8 B6 04               DEFW    L04B6                   ; exit
5286   0FEA             
5287   0FEA             ; ---
5288   0FEA             ; ???
5289   0FEA             
5290   0FEA DC          x0fea   DEFB    $DC                     ;;
5291   0FEB FE          x0feb   DEFB    $FE                     ;;  0feb + fedc = 0Ec7 = CREATE
5292   0FEC             
5293   0FEC             ; ->
5294   0FEC 18 02       L0FEC:  JR      L0FF0                   ; skip forward
5295   0FEE             
5296   0FEE D5          x0fee   DEFB    $D5                     ;;
5297   0FEF FF          x0fef   DEFB    $FF                     ;;  0fef + ffd5 = 0fc4 = VARIABLE
5298   0FF0             
5299   0FF0             ; ---
5300   0FF0             
5301   0FF0 D7          L0FF0:  RST     10H                     ; push word DE
5302   0FF1 FD E9               JP      (IY)                    ; to 'next'.
5303   0FF3             
5304   0FF3             ; ---
5305   0FF3             
5306   0FF3 E3          x0FF3   DEFB    $E3                     ;;
5307   0FF4 FF          x0ff4   DEFB    $FF                     ;;  0ff4 + ffe3 = 0fd7 = CONSTANT
5308   0FF5             
5309   0FF5             ; --> pad
5310   0FF5             
5311   0FF5 EB          L0FF5:  EX      DE,HL
5312   0FF6 5E                  LD      E,(HL)
5313   0FF7 23                  INC     HL
5314   0FF8 56                  LD      D,(HL)
5315   0FF9 D7                  RST     10H                     ; push word DE
5316   0FFA FD E9               JP      (IY)                    ; to 'next'.
5317   0FFC             
5318   0FFC             ; ------------------
5319   0FFC             ; THE 'LITERAL' WORD
5320   0FFC             ; ------------------
5321   0FFC             ; (n -- )
5322   0FFC             ; Compiles the top of the stack into a word definition as a literal.
5323   0FFC             ; Compiles integers. decimal 4102 = $1006. c.f. $1055
5324   0FFC             
5325   0FFC 4C 49 54 45 L0FFC:  DEFM    "LITERA"                ; 'name field'
5325   1000 52 41 
5326   1002 CC                  DEFB    'L' + $80
5327   1003             
5328   1003 E1 0F               DEFW    L0FE1                   ; 'link field'
5329   1005             
5330   1005 47          L1005:  DEFB    $47                     ; 'name length field'
5331   1006             
5332   1006 08 11       L1006:  DEFW    L1108                   ; 'code field' - compile
5333   1008             
5334   1008             ; ---
5335   1008             
5336   1008 11 10       L1008:  DEFW    L1011                   ; stack next word
5337   100A 4E 0F               DEFW    L0F4E                   ; ,
5338   100C B6 04               DEFW    L04B6                   ; exit
5339   100E             
5340   100E             ; ---
5341   100E             
5342   100E 02          x100E:  DEFB    $02                     ;;
5343   100F FF          x100f   DEFB    $FF                     ;; 100f + ff02 = 0f11 nah!
5344   1010 FF          x1010   DEFB    $FF                     ;;
5345   1011             
5346   1011             ; -----------------------------------
5347   1011             ; The 'Stack Next Word' Internal Word
5348   1011             ; -----------------------------------
5349   1011             
5350   1011 13 10       L1011:  DEFW    L1013                   ; headerless 'code field'
5351   1013             
5352   1013             ; ---
5353   1013             
5354   1013 06 01       L1013:  LD      B,$01                   ; counter - one word to push
5355   1015             
5356   1015 E1          L1015:  POP     HL                      ; drop the 'Next Word' pointer.
5357   1016 5E                  LD      E,(HL)                  ; low byte to E.
5358   1017 23                  INC     HL                      ; increment pointer.
5359   1018 56                  LD      D,(HL)                  ; high byte to D.
5360   1019             
5361   1019             ; -> E B=1 (one byte op)
5362   1019             
5363   1019 23          L1019:  INC     HL                      ; increment the 'Next Word' pointer
5364   101A             
5365   101A E5          L101A:  PUSH    HL                      ; the 'Next Word' pointer goes to
5366   101B                                                     ; the Return Stack.
5367   101B D7                  RST     10H                     ; stack Data Word DE
5368   101C 10 F7               DJNZ    L1015                   ; loop back if more than one.
5369   101E             
5370   101E FD E9       L101E:  JP      (IY)                    ; to 'next'.
5371   1020             
5372   1020             
5373   1020             ; ----------------
5374   1020             ; THE 'ASCII' WORD
5375   1020             ; ----------------
5376   1020             ; Takes the next word from the input buffer, and yields the ASCII code
5377   1020             ; of its first character. If compiling, then compiles this as a literal.
5378   1020             ;
5379   1020             ; e.g.      :STARS 0 DO ASCII * EMIT LOOP ;
5380   1020             ; (--ASCII code)         (if interpreting)
5381   1020             ; (--)                   (if compiling)
5382   1020             
5383   1020 41 53 43 49 L1020:  DEFM    "ASCI"                  ; 'name field'
5384   1024 C9                  DEFB    'I' + $80
5385   1025             
5386   1025 05 10               DEFW    L1005                   ; 'link field'
5387   1027             
5388   1027 45          L1027:  DEFB    $45                     ; 'name length field' (immediate mode)
5389   1028             
5390   1028 C3 0E       L1029:  DEFW    L0EC3                   ; 'code field' - docolon
5391   102A             
5392   102A             ; ----------------
5393   102A             
5394   102A 4B 10       L102A:  DEFW    L104B                   ; stk_data
5395   102C 20                  DEFB    $20                     ; space delimiter
5396   102D AB 05               DEFW    L05AB                   ; word  to pad
5397   102F 09 0E               DEFW    L0E09                   ; 1+
5398   1031 96 08               DEFW    L0896                   ; C@
5399   1033 0E 1A               DEFW    L1A0E                   ; end-forth.
5400   1035             
5401   1035 DD CB 3E 76         BIT     6,(IX+$3E)              ; FLAGS
5402   1039 28 E3               JR      Z,L101E                 ; back to a jp (iy)
5403   103B             
5404   103B CD B9 04            CALL    L04B9                   ; forth
5405   103E             
5406   103E 11 10       L103E:  DEFW    L1011                   ; stack next word
5407   1040 4B 10               DEFW    L104B                   ; (stk_data)
5408   1042 4E 0F               DEFW    L0F4E                   ; ,
5409   1044 5F 0F               DEFW    L0F5F                   ; c,
5410   1046 B6 04               DEFW    L04B6                   ; exit
5411   1048             
5412   1048             ; ---
5413   1048             
5414   1048 01          x1048   DEFB    $01                     ;; ?
5415   1049             
5416   1049 D6          x1049   DEFB    $D6                     ;; ?
5417   104A FF          x104a   DEFB    $FF                     ;; ?  104a + ffd6 = 1020 = ASCII
5418   104B             
5419   104B             ; ----------------------------
5420   104B             ; The 'stk-data' Internal Word
5421   104B             ; ----------------------------
5422   104B             ; used succinctly to stack the following byte as a word.
5423   104B             
5424   104B 4D 10       L104B:  DEFW    L104D                   ; headerless 'code field'
5425   104D             
5426   104D             ; ---
5427   104D             
5428   104D E1          L104D:  POP     HL                      ; retrieve the 'Next Word' pointer.
5429   104E             
5430   104E 5E                  LD      E,(HL)                  ; fetch the single byte from there.
5431   104F 16 00               LD      D,$00                   ; set high order byte to zero.
5432   1051             
5433   1051 06 01               LD      B,$01                   ; set counter to 1.
5434   1053             
5435   1053 18 C4               JR      L1019                   ; back to stack one word and
5436   1055                                                     ; put the incremented pointer back on
5437   1055                                                     ; the Return Stack.
5438   1055             
5439   1055             ; --------------------------
5440   1055             ; The 'stk_fp' Internal Word
5441   1055             ; --------------------------
5442   1055             ; stack and enclose a floating point number - two words.
5443   1055             
5444   1055 08 11       L1055:  DEFW    L1108                   ; headerless 'code field' - compile
5445   1057             
5446   1057             ; ---
5447   1057             
5448   1057 64 10               DEFW    L1064                   ; stack two words.
5449   1059 85 08               DEFW    L0885                   ; swap
5450   105B 4E 0F               DEFW    L0F4E                   ; ,
5451   105D 4E 0F               DEFW    L0F4E                   ; ,
5452   105F B6 04               DEFW    L04B6                   ; exit
5453   1061             ; ---
5454   1061             
5455   1061 04          x1061   DEFB    $04                     ;;
5456   1062 FF          x1062   DEFB    $FF                     ;; 1062 + ff04 = 0f66 XX
5457   1063 FF          x1063   DEFB    $FF                     ;;
5458   1064             
5459   1064             ; -----------------------------------
5460   1064             ; The 'STACK TWO WORDS' Internal Word
5461   1064             ; -----------------------------------
5462   1064             
5463   1064 66 10       L1064:  DEFW    L1066                   ; headerless 'code field'
5464   1066             
5465   1066             ; ---
5466   1066             
5467   1066 06 02       L1066:  LD      B,$02                   ; set counter to two
5468   1068             
5469   1068 18 AB               JR      L1015                   ; back to stack 2 words
5470   106A             
5471   106A             
5472   106A             ; -----------------
5473   106A             ; THE 'DEFINER' WORD
5474   106A             ; -----------------
5475   106A             ; Used with 'DOES>' to define new defining words. i.e. words that themselves
5476   106A             ; define new words.
5477   106A             ; The format is
5478   106A             ; DEFINER name
5479   106A             ;       defining routine
5480   106A             ; DOES>
5481   106A             ;       action routine
5482   106A             ; ;
5483   106A             ; name is the name of the new defining word; when executed it will set up
5484   106A             ; the header of a new word and use its defining routine to set up the
5485   106A             ; parameter field. When this new word in its turn is executed, its parameter
5486   106A             ; field will be put on the stack and the action routine will be executed.
5487   106A             
5488   106A 44 45 46 49 L106A:  DEFM    "DEFINE"                ; 'name field'
5488   106E 4E 45 
5489   1070 D2                  DEFB    'R' + $80
5490   1071             
5491   1071 27 10               DEFW    L1027                   ; 'link field'
5492   1073             
5493   1073 07          L1073:  DEFB    $07                     ; 'name length field'
5494   1074             
5495   1074 85 10       L1074:  DEFW    L1085                   ; 'code field' - create and enclose
5496   1076             
5497   1076             ; ---
5498   1076             
5499   1076 85 10       L1076:  DEFW    L1085                   ; create and enclose
5500   1078 60 04               DEFW    L0460                   ; here
5501   107A             
5502   107A 4B 10               DEFW    L104B                   ; stk-data
5503   107C             
5504   107C 0C                  DEFB    $0C                     ; 12                    marker byte
5505   107D             
5506   107D 83 0F               DEFW    L0F83                   ; allot2
5507   107F 76 12               DEFW    L1276                   ; branch
5508   1081 34 FE       L1081:  DEFW    $FE34                   ; back to L0EB6
5509   1083             
5510   1083             ; ---
5511   1083             
5512   1083 E6          x1083   DEFB    $E6                     ;;
5513   1084 FF          x1084   DEFB    $FF                     ;; 1084 + ffe6 = 106a = DEFINER
5514   1085             
5515   1085             ; ---
5516   1085             ;; createe and fill
5517   1085             ; ----
5518   1085             ; used seven times as a code word.
5519   1085             
5520   1085 CD F0 0F    L1085:  CALL    L0FF0                   ; push word DE (save addr nxt wrd on DS)
5521   1088             
5522   1088 D0 0E               DEFW    L0ED0                   ; create
5523   108A 6B 08               DEFW    L086B                   ; dup
5524   108C B3 08               DEFW    L08B3                   ; @
5525   108E 60 04               DEFW    L0460                   ; here
5526   1090 29 0E               DEFW    L0E29                   ; 2-
5527   1092 C1 08               DEFW    L08C1                   ; !
5528   1094             
5529   1094 13 0E       L1094:  DEFW    L0E13                   ; 2+
5530   1096 9A 10               DEFW    L109A                   ; pop DE
5531   1098 B6 04               DEFW    L04B6                   ; exit
5532   109A             
5533   109A             ; -----------
5534   109A             ; pop word DE
5535   109A             ; -----------
5536   109A             ; branch to addr on stack???
5537   109A             
5538   109A 9C 10       L109A:  DEFW    L109C                   ; headerless 'code field'
5539   109C             
5540   109C             ; ---
5541   109C             
5542   109C DF          L109C:  RST     18H                     ; unstack Data Word DE
5543   109D             
5544   109D C3 C3 0E            JP      L0EC3                   ; start new thread.
5545   10A0             
5546   10A0             ; ---------------
5547   10A0             ; THE 'CALL' WORD
5548   10A0             ; ---------------
5549   10A0             ; (address -- )
5550   10A0             ; Executes Z80 machine code at address on the stack. The code is terminated
5551   10A0             ; by a jp (iy)
5552   10A0             ; e.g. in hex
5553   10A0             ; DEFINER CODE DOES> CALL ;
5554   10A0             ; CODE EI FB C, FD C, E9 C,
5555   10A0             ; The word EI will enable interrupts.
5556   10A0             
5557   10A0 43 41 4C    L10A0:  DEFM    "CAL"                   ; 'name field'
5558   10A3 CC                  DEFB    'L' + $80
5559   10A4             
5560   10A4 73 10               DEFW    L1073                   ; 'link field'
5561   10A6             
5562   10A6 04          L10A6:  DEFB    $04                     ; 'name length field'
5563   10A7             
5564   10A7 A9 10       L10A7:  DEFW    L10A9                   ; 'code field'
5565   10A9             
5566   10A9             ; ---
5567   10A9             
5568   10A9 DF          L10A9:  RST     18H
5569   10AA EB                  EX      DE,HL
5570   10AB             
5571   10AB E9                  JP      (HL)
5572   10AC             
5573   10AC             ; ----------------
5574   10AC             ; THE 'DOES>' WORD
5575   10AC             ; ----------------
5576   10AC             ; See DEFINER.
5577   10AC             
5578   10AC 44 4F 45 53 L10AC:  DEFM    "DOES"                  ; 'name field'
5579   10B0 BE                  DEFB    '>' + $80
5580   10B1             
5581   10B1 F4 10               DEFW    L10F4                   ; 'link field'
5582   10B3             
5583   10B3 45          L10B3:  DEFB    $45                     ; 'name length field' (immediate mode)
5584   10B4             
5585   10B4 08 11       L10B4:  DEFW    L1108                   ; 'code field' - compile
5586   10B6             
5587   10B6 E8 10       L10B6:  DEFW    L10E8                   ; exit
5588   10B8             
5589   10B8 D8 12               DEFW    L12D8                   ; check??
5590   10BA             
5591   10BA 0C                  DEFB    $0C                     ; 12
5592   10BB             
5593   10BB CD 10               DEFW    L10CD                   ;
5594   10BD 4B 10               DEFW    L104B                   ; stk_data
5595   10BF             
5596   10BF CD                  DEFB    $CD                     ; data                  call ?
5597   10C0             
5598   10C0 5F 0F               DEFW    L0F5F                   ; C,
5599   10C2 11 10               DEFW    L1011                   ; stack next word
5600   10C4 F0 0F               DEFW    L0FF0                   ; (push word DE)
5601   10C6 4E 0F               DEFW    L0F4E                   ; ,
5602   10C8 4B 10               DEFW    L104B                   ; stk-data
5603   10CA             
5604   10CA 0A                  DEFB    $0A                     ; ten                   marker byte.
5605   10CB             
5606   10CB B6 04               DEFW    L04B6                   ; exit
5607   10CD             
5608   10CD             ; -----------------------
5609   10CD             ; The '???' Internal Word
5610   10CD             ; -----------------------
5611   10CD             
5612   10CD C3 0E       L10CD:  DEFW    L0EC3                   ; headerless 'code field' - docolon
5613   10CF             
5614   10CF             ; ---
5615   10CF             
5616   10CF 6B 08               DEFW    L086B                   ; dup
5617   10D1 29 0E               DEFW    L0E29                   ; 2-
5618   10D3 B5 15               DEFW    L15B5                   ; namefield
5619   10D5 60 04               DEFW    L0460                   ; here
5620   10D7 E1 0D               DEFW    L0DE1                   ; -
5621   10D9 1F 0E               DEFW    L0E1F                   ; 1-
5622   10DB 4E 0F               DEFW    L0F4E                   ; ,
5623   10DD 60 04               DEFW    L0460                   ; here
5624   10DF 85 08               DEFW    L0885                   ; swap
5625   10E1 C1 08               DEFW    L08C1                   ; !
5626   10E3 B6 04               DEFW    L04B6                   ; exit
5627   10E5             
5628   10E5             ; ---
5629   10E5             
5630   10E5 05          x10e5   DEFB    $05                     ;;
5631   10E6             
5632   10E6 C5          x10e6   DEFB    $C5                     ;;
5633   10E7 FF          x10e7   DEFB    $FF                     ;; 10e7 + ffc5 = 10ac = DOES>
5634   10E8             
5635   10E8             ; ---
5636   10E8             
5637   10E8 B8 04       L10E8:  DEFW    L04B8                   ; exit?
5638   10EA             
5639   10EA             ; -------------------
5640   10EA             ; THE 'COMPILER' WORD
5641   10EA             ; -------------------
5642   10EA             ; Used with 'RUNS>' for defining new compiling words, i.e. words that are
5643   10EA             ; used within word definitions to give an immediate effect of compiling
5644   10EA             ; some information into the dictionary.
5645   10EA             ; (This is traditionally done with IMMEDIATE, but COMPILER...RUNS> works
5646   10EA             ; better with EDIT etc.)
5647   10EA             
5648   10EA 43 4F 4D 50 L10EA:  DEFM    "COMPILE"               ; 'name field'
5648   10EE 49 4C 45 
5649   10F1 D2                  DEFB    'R' + $80
5650   10F2             
5651   10F2 A6 10               DEFW    L10A6                   ; 'link field'
5652   10F4             
5653   10F4 08          L10F4:  DEFB    $08                     ; 'name length field'
5654   10F5             
5655   10F5 85 10       L10F5:  DEFW    L1085                   ; 'code field' - create and enclose
5656   10F7             
5657   10F7             ; ---
5658   10F7             
5659   10F7 08 11               DEFW    L1108                   ; compile
5660   10F9 60 11               DEFW    L1160                   ; immediate
5661   10FB 60 04               DEFW    L0460                   ; here
5662   10FD 4B 10               DEFW    L104B                   ; stk_data
5663   10FF             
5664   10FF 0B          L10FF:  DEFB    $0B                     ; 11                    marker byte
5665   1100             
5666   1100 83 0F               DEFW    L0F83                   ; allot2
5667   1102 76 12               DEFW    L1276                   ; branch
5668   1104 B1 FD       L1104:  DEFW    $FDB1                   ; back to L0EB6
5669   1106             
5670   1106             ; ---
5671   1106             
5672   1106 E3          x1106   DEFB    $E3                     ;;
5673   1107 FF          x1107   DEFB    $FF                     ;; 1107 + ffe3 = 10ea = COMPILER
5674   1108             
5675   1108             ; ---------------------
5676   1108             ; THE 'COMPILE' ROUTINE
5677   1108             ; ---------------------
5678   1108             ; Instead of executing code words as they are encountered, lay them down in
5679   1108             ; the dictionary along with any parameters.
5680   1108             
5681   1108 DD CB 3E 76 L1108:  BIT     6,(IX+$3E)              ; test FLAGS - compiler mode ?
5682   110C 20 02               JR      NZ,L1110                ; skip error if so.
5683   110E             
5684   110E E7                  RST     20H                     ; Error 4.
5685   110F 04                  DEFB    $04                     ; Compiling word used in interpret mode.
5686   1110             
5687   1110 CD F0 0F    L1110:  CALL    L0FF0                   ; push word DE (then jp (iy))
5688   1113             
5689   1113 6B 08               DEFW    L086B                   ; dup
5690   1115 B3 08               DEFW    L08B3                   ; @
5691   1117 4E 0F               DEFW    L0F4E                   ; ,
5692   1119 76 12               DEFW    L1276                   ; branch
5693   111B 78 FF       L111B:  DEFW    $FF78                   ; to L1094 - definer code
5694   111D             
5695   111D             ; ----------------
5696   111D             ; THE 'RUNS>' WORD
5697   111D             ; ----------------
5698   111D             ; See COMPILER
5699   111D             
5700   111D 52 55 4E 53 L111D:  DEFM    "RUNS"                  ; 'name field'
5701   1121 BE                  DEFB    '>' + $80
5702   1122             
5703   1122 B3 10               DEFW    L10B3                   ; 'link field'
5704   1124             
5705   1124 45          L1124:  DEFB    $45                     ; 'name length field' (immediate mode)
5706   1125             
5707   1125 08 11       L1125:  DEFW    L1108                   ; 'code field' - compile
5708   1127             
5709   1127             ; ---
5710   1127             
5711   1127 40 11       L1127:  DEFW    L1140                   ; vv
5712   1129 D8 12               DEFW    L12D8                   ; check-for
5713   112B 0B                  DEFB    $0B                     ; 11                    marker byte.
5714   112C 85 08               DEFW    L0885                   ; swap
5715   112E 5F 0F               DEFW    L0F5F                   ; c,
5716   1130 CD 10               DEFW    L10CD                   ; ?
5717   1132 11 10               DEFW    L1011                   ; stack next word
5718   1134 42 11               DEFW    L1142
5719   1136 4E 0F               DEFW    L0F4E                   ; ,
5720   1138             
5721   1138 4B 10               DEFW    L104B                   ; stk-data
5722   113A 0A                  DEFB    $0A                     ; ten.                  marker byte.
5723   113B B6 04               DEFW    L04B6                   ; exit
5724   113D             
5725   113D             ; ---
5726   113D             
5727   113D 05          x113d   DEFB    $05                     ;;
5728   113E             
5729   113E DE          x113e   DEFB    $DE                     ;;
5730   113F FF          x113f   DEFB    $FF                     ;; 113f + ffde = 111d = RUNS>
5731   1140             
5732   1140             ; ---
5733   1140             
5734   1140 B8 04       L1140:  DEFW    L04B8
5735   1142             
5736   1142 E1          L1142:  POP     HL
5737   1143 D5                  PUSH    DE
5738   1144 EB                  EX      DE,HL
5739   1145             
5740   1145 D7                  RST     10H                     ; push word DE
5741   1146 42                  LD      B,D
5742   1147 4B                  LD      C,E
5743   1148 D1                  POP     DE
5744   1149 D5                  PUSH    DE
5745   114A 1B                  DEC     DE
5746   114B 1B                  DEC     DE
5747   114C             
5748   114C CD 9E 15            CALL    L159E                   ;
5749   114F             
5750   114F D1                  POP     DE
5751   1150 C5                  PUSH    BC
5752   1151 C3 C3 0E            JP      L0EC3                   ;
5753   1154             
5754   1154             ; --------------------
5755   1154             ; THE 'IMMEDIATE' WORD
5756   1154             ; --------------------
5757   1154             ; (  --  )
5758   1154             ; The most recent word in the current vocabulary is made immediate, so that
5759   1154             ; it will execute even in compile mode.
5760   1154             
5761   1154 49 4D 4D 45 L1154:  DEFM    "IMMEDIAT"              ; 'name field'
5761   1158 44 49 41 54 
5762   115C C5                  DEFB    'E' + $80
5763   115D             
5764   115D 24 11               DEFW    L1124                   ; 'link field'
5765   115F             
5766   115F 09          L115F:  DEFB    $09                     ; 'name length field'
5767   1160             
5768   1160 C3 0E       L1160:  DEFW    L0EC3                   ; 'code field' - docolon
5769   1162             
5770   1162             ; ---
5771   1162             
5772   1162 80 04       L1162:  DEFW    L0480                   ; current
5773   1164 B3 08               DEFW    L08B3                   ; @
5774   1166 B3 08               DEFW    L08B3                   ; @
5775   1168 0E 1A               DEFW    L1A0E                   ; end-forth.
5776   116A             
5777   116A DF          L116A:  RST     18H                     ; pop word DE
5778   116B EB                  EX      DE,HL
5779   116C CB F6               SET     6,(HL)
5780   116E FD E9               JP      (IY)                    ; to 'next'.
5781   1170             
5782   1170             ; ---------------------
5783   1170             ; THE 'VOCABULARY' WORD
5784   1170             ; ---------------------
5785   1170             ; (  --  )
5786   1170             ; Defines a new vocabulary with the given name.
5787   1170             
5788   1170 56 4F 43 41 L1170:  DEFM    "VOCABULAR"             ; 'name field'
5788   1174 42 55 4C 41 
5788   1178 52 
5789   1179 D9                  DEFB    'Y' + $80
5790   117A             
5791   117A 5F 11               DEFW    L115F                   ; 'link field'
5792   117C             
5793   117C 0A          L117C:  DEFB    $0A                     ; 'name length field'
5794   117D             
5795   117D 85 10       L117D:  DEFW    L1085                   ; 'code field' - create and enclose
5796   117F             
5797   117F             ; ---
5798   117F             
5799   117F B5 11       L117F:  DEFW    L11B5                   ; set context
5800   1181 80 04               DEFW    L0480                   ; current
5801   1183 B3 08               DEFW    L08B3                   ; @
5802   1185 13 0E               DEFW    L0E13                   ; 2+
5803   1187 4E 0F               DEFW    L0F4E                   ; ,
5804   1189 88 06               DEFW    L0688                   ; stk-zero
5805   118B 5F 0F               DEFW    L0F5F                   ; C,
5806   118D 60 04               DEFW    L0460                   ; here
5807   118F 11 10               DEFW    L1011                   ; stack next word
5808   1191 35 3C               DEFW    $3C35                   ; (VOCLNK)
5809   1193 6B 08               DEFW    L086B                   ; dup
5810   1195 B3 08               DEFW    L08B3                   ; @
5811   1197 4E 0F               DEFW    L0F4E                   ; ,
5812   1199 C1 08               DEFW    L08C1                   ; !
5813   119B B6 04               DEFW    L04B6                   ; exit
5814   119D             
5815   119D             ; ----------------------
5816   119D             ; THE 'DEFINITIONS' WORD
5817   119D             ; ----------------------
5818   119D             ; (  --  )
5819   119D             ; The CONTEXT vocabulary is made the CURRENT vocabulary as well.
5820   119D             
5821   119D 44 45 46 49 L119D:  DEFM    "DEFINITION"            ; 'name field'
5821   11A1 4E 49 54 49 
5821   11A5 4F 4E 
5822   11A7 D3                  DEFB    'S' + $80
5823   11A8             
5824   11A8 7C 11               DEFW    L117C                   ; 'link field'
5825   11AA             
5826   11AA 0B          L11AA:  DEFB    $0B                     ; 'name length field'
5827   11AB             
5828   11AB AD 11       L11AB:  DEFW    L11AD                   ; 'code field'
5829   11AD             
5830   11AD             ; ---
5831   11AD             
5832   11AD 2A 33 3C    L11AD:  LD      HL,($3C33)              ; CONTEXT
5833   11B0 22 31 3C            LD      ($3C31),HL              ; CURRENT
5834   11B3 FD E9               JP      (IY)                    ; to 'next'.
5835   11B5             
5836   11B5             ; ---
5837   11B5             
5838   11B5 ED 53 33 3C L11B5:  LD      ($3C33),DE              ; CONTEXT
5839   11B9 FD E9               JP      (IY)                    ; to 'next'.
5840   11BB             
5841   11BB             ; ---
5842   11BB             
5843   11BB             ; -------------
5844   11BB             ; THE 'IF' WORD
5845   11BB             ; -------------
5846   11BB             ; (n -- )
5847   11BB             ; Used in the form
5848   11BB             ; IF ... THEN
5849   11BB             ; or
5850   11BB             ; IF ... ELSE ... THEN
5851   11BB             ; In the first form, if n is non-zero then the words between IF and THEN
5852   11BB             ; are executed; otherwise they are skipped over.
5853   11BB             ; In the second form, if n is non-zero then the words between IF and ELSE
5854   11BB             ; are executed and those between ELSE and THEN are skipped over, while if
5855   11BB             ; n is zero then the words between IF and ELSE are skipped over and those
5856   11BB             ; between ELSE and THEN are executed.
5857   11BB             
5858   11BB 49          L11BB:  DEFB    'I'                     ; 'name field'
5859   11BC C6                  DEFB    'F' + $80
5860   11BD             
5861   11BD E0 13               DEFW    L13E0                   ; 'link field'
5862   11BF             
5863   11BF 42          L11BF:  DEFB    $42                     ; 'name length field' (immediate word)
5864   11C0             
5865   11C0 08 11               DEFW    L1108                   ; 'code field' - compile
5866   11C2             
5867   11C2             ; ---
5868   11C2             
5869   11C2 83 12               DEFW    L1283                   ; ?branch
5870   11C4 60 04               DEFW    L0460                   ; here
5871   11C6             
5872   11C6 4B 10               DEFW    L104B                   ; stk_data
5873   11C8 02                  DEFB    $02                     ; 2 locations required for jump length
5874   11C9 83 0F               DEFW    L0F83                   ; allot2
5875   11CB B6 04               DEFW    L04B6                   ; exit
5876   11CD             
5877   11CD             ; ----------------
5878   11CD             ; THE 'WHILE' WORD
5879   11CD             ; ----------------
5880   11CD             ; (n -- )
5881   11CD             ; Used in BEGIN ... WHILE ... REPEAT. If n = 0 then skips over to just past
5882   11CD             ; REPEAT.
5883   11CD             
5884   11CD 57 48 49 4C L11CD:  DEFM    "WHIL"                  ; 'name field'
5885   11D1 C5                  DEFB    'E' + $80
5886   11D2             
5887   11D2 BF 11               DEFW    L11BF                   ; 'link field'
5888   11D4             
5889   11D4 45          L11D4:  DEFB    $45                     ; 'name length field' (immediate mode)
5890   11D5             
5891   11D5 08 11       L11D5:  DEFW    L1108                   ; 'code field' - compile
5892   11D7             
5893   11D7             ; ---
5894   11D7             
5895   11D7 88 12               DEFW    L1288                   ; ?branch
5896   11D9             
5897   11D9 D8 12               DEFW    L12D8                   ; check-for
5898   11DB 01                  DEFB    $01                     ;  1
5899   11DC 60 04               DEFW    L0460                   ; here
5900   11DE 4B 10               DEFW    L104B                   ; stk-data
5901   11E0 04                  DEFB    $04                     ;  four
5902   11E1 83 0F               DEFW    L0F83                   ; allot
5903   11E3 B6 04               DEFW    L04B6                   ; exit
5904   11E5             
5905   11E5             ; ---------------
5906   11E5             ; THE 'ELSE' WORD
5907   11E5             ; ---------------
5908   11E5             ; (  --  )
5909   11E5             ; Used with IF and THEN.
5910   11E5             
5911   11E5 45 4C 53    L11E5:  DEFM    "ELS"                   ; 'name field'
5912   11E8 C5                  DEFB    'E' + $80
5913   11E9             
5914   11E9 D4 11               DEFW    L11D4                   ; 'link field'
5915   11EB             
5916   11EB 44          L11EB:  DEFB    $44                     ; 'name length field' (immediate mode)
5917   11EC             
5918   11EC 08 11       L11EC:  DEFW    L1108                   ; 'code field' - compile
5919   11EE             
5920   11EE             ; ---
5921   11EE             
5922   11EE 71 12               DEFW    L1271                   ; branch
5923   11F0             
5924   11F0 D8 12               DEFW    L12D8                   ; check-for
5925   11F2 02                  DEFB    $02                     ; two
5926   11F3 83 0F               DEFW    L0F83                   ; allot2
5927   11F5 25 12               DEFW    L1225                   ; ?
5928   11F7 60 04               DEFW    L0460                   ; here
5929   11F9 29 0E               DEFW    L0E29                   ; 2-
5930   11FB 4B 10               DEFW    L104B                   ; stk-data
5931   11FD 02                  DEFB    $02                     ; two
5932   11FE B6 04               DEFW    L04B6                   ; exit
5933   1200             
5934   1200             ; ---------------
5935   1200             ; THE 'THEN' WORD
5936   1200             ; ---------------
5937   1200             ; Used with IF.
5938   1200             
5939   1200 54 48 45    L1200:  DEFM    "THE"                   ; 'name field'
5940   1203 CE                  DEFB    'N' + $80
5941   1204             
5942   1204 EB 11               DEFW    L11EB                   ; 'link field'
5943   1206             
5944   1206 44          L1206:  DEFB    $44                     ; 'name length field' (immediate mode)
5945   1207             
5946   1207 08 11       L1207:  DEFW    L1108                   ; 'code field' - compile
5947   1209             
5948   1209             ; ---
5949   1209             
5950   1209 A4 12               DEFW    L12A4                   ; end?
5951   120B             
5952   120B D8 12               DEFW    L12D8                   ; check-for
5953   120D 02                  DEFB    $02
5954   120E 25 12               DEFW    L1225                   ; ?
5955   1210 B6 04               DEFW    L04B6                   ; exit
5956   1212             
5957   1212             ; ---------------
5958   1212             ; THE 'BEGIN' WORD
5959   1212             ; ---------------
5960   1212             ; (  --  )
5961   1212             ; Used with either UNTIL or WHILE...REPEAT.
5962   1212             
5963   1212 42 45 47 49 L1212:  DEFM    "BEGI"                  ; 'name field'
5964   1216 CE                  DEFB    'N' + $80
5965   1217             
5966   1217 06 12               DEFW    L1206                   ; 'link field'
5967   1219             
5968   1219 45          L1219:  DEFB    $45                     ; 'name length field' (immediate mode)
5969   121A             
5970   121A 08 11       L121A:  DEFW    L1108                   ; 'code field' - compile
5971   121C             
5972   121C             ; ---
5973   121C             
5974   121C 9F 12               DEFW    L129F
5975   121E 60 04               DEFW    L0460                   ; here
5976   1220 4B 10               DEFW    L104B                   ; stk_data
5977   1222 01                  DEFB    $01                     ; 1
5978   1223 B6 04               DEFW    L04B6                   ; exit
5979   1225             
5980   1225             ; -----------------------
5981   1225             ; The '???' Internal Word
5982   1225             ; -----------------------
5983   1225             
5984   1225 C3 0E       L1225:  DEFW    L0EC3                   ; headerless 'code field' - docolon
5985   1227             
5986   1227             ; ---
5987   1227             
5988   1227 6B 08               DEFW    L086B                   ; dup
5989   1229 60 04               DEFW    L0460                   ; here
5990   122B 85 08               DEFW    L0885                   ; swap
5991   122D E1 0D               DEFW    L0DE1                   ; -
5992   122F 1F 0E               DEFW    L0E1F                   ; 1-
5993   1231 85 08               DEFW    L0885                   ; swap
5994   1233 C1 08               DEFW    L08C1                   ; !
5995   1235 B6 04               DEFW    L04B6                   ; exit
5996   1237             
5997   1237             ; -----------------------
5998   1237             ; The '???' Internal Word
5999   1237             ; -----------------------
6000   1237             
6001   1237 C3 0E       L1237:  DEFW    L0EC3                   ; headerless 'code field' - docolon
6002   1239             
6003   1239             ; ---
6004   1239             
6005   1239 60 04               DEFW    L0460                   ; here
6006   123B E1 0D               DEFW    L0DE1                   ; -
6007   123D 1F 0E               DEFW    L0E1F                   ; 1-
6008   123F 4E 0F               DEFW    L0F4E                   ; ,
6009   1241 B6 04               DEFW    L04B6                   ; exit
6010   1243             
6011   1243             
6012   1243             ; -----------------
6013   1243             ; THE 'REPEAT' WORD
6014   1243             ; -----------------
6015   1243             ; (  --  )
6016   1243             ; Used in construction BEGIN ... WHILE .. REPEAT.
6017   1243             ; Causes a jump back to just after BEGIN.
6018   1243             
6019   1243             
6020   1243 52 45 50 45 L1243:  DEFM    "REPEA"                 ; 'name field'
6020   1247 41 
6021   1248 D4                  DEFB    'T' + $80
6022   1249             
6023   1249 19 12               DEFW    L1219                   ; 'link field'
6024   124B             
6025   124B 46          L124B:  DEFB    $46                     ; 'name length field' (immediate mode)
6026   124C             
6027   124C 08 11       L124C:  DEFW    L1108                   ; 'code field' - compile
6028   124E             
6029   124E             ; ---
6030   124E             
6031   124E 76 12       L124E   DEFW    L1276                   ; branch
6032   1250 D8 12       L1250:  DEFW    L12D8                   ; check_for
6033   1252 04                  DEFB    $04                     ; four
6034   1253 85 08               DEFW    L0885                   ; swap
6035   1255 37 12               DEFW    L1237                   ; ?
6036   1257 25 12               DEFW    L1225                   ; ?
6037   1259 B6 04               DEFW    L04B6                   ; exit
6038   125B             
6039   125B             ; ----------------
6040   125B             ; THE 'UNTIL' WORD
6041   125B             ; ----------------
6042   125B             ; (n -- )
6043   125B             ; Used in BEGIN ... UNTIL.
6044   125B             ; Loops back to BEGIN if n = 0
6045   125B             
6046   125B 55 4E 54 49 L125B:  DEFM    "UNTI"                  ; 'name field'
6047   125F CC                  DEFB    'L' + $80
6048   1260             
6049   1260 4B 12               DEFW    L124B                   ; 'link field'
6050   1262             
6051   1262 45          L1262:  DEFB    $45                     ; 'name length field' (immediate mode)
6052   1263             
6053   1263 08 11       L1263:  DEFW    L1108                   ; 'code field' - compile
6054   1265             
6055   1265             ; ---
6056   1265             
6057   1265 8D 12               DEFW    L128D                   ; ?branch
6058   1267 D8 12               DEFW    L12D8                   ; check_for
6059   1269 01                  DEFB    $01                     ;
6060   126A 37 12               DEFW    L1237                   ; ?
6061   126C B6 04               DEFW    L04B6                   ; exit
6062   126E             
6063   126E             ; ---
6064   126E             
6065   126E 02          x126E   DEFB    $02                     ;;
6066   126F             
6067   126F 75          x126F   DEFB    $75                     ;;
6068   1270 FF          x1270   DEFB    $FF                     ;; 1270 + ff75 = 11e5 = ELSE
6069   1271             
6070   1271             ; ---
6071   1271             
6072   1271             
6073   1271 78 12       L1271:  DEFW    L1278                   ; ?
6074   1273             
6075   1273             ; ---
6076   1273 02          x1273   DEFB    $02                     ;;
6077   1274             
6078   1274 CE          x1274   DEFB    $CE                     ;;
6079   1275 FF          x1275   DEFB    $FF                     ;; 1275 + ffce = 1243 = REPEAT
6080   1276             
6081   1276             ; --------------------------
6082   1276             ; The 'branch' Internal Word
6083   1276             ; --------------------------
6084   1276             
6085   1276 78 12       L1276:  DEFW    L1278                   ; headerless 'code field'
6086   1278             
6087   1278             ; ---
6088   1278             
6089   1278 E1          L1278:  POP     HL                      ; drop next word pointer
6090   1279 5E                  LD      E,(HL)                  ; read the 16-bit offset
6091   127A 23                  INC     HL                      ; that is
6092   127B 56                  LD      D,(HL)                  ; stored there.
6093   127C             
6094   127C 19          L127C:  ADD     HL,DE                   ; add to current address.
6095   127D             
6096   127D C3 BA 04            JP      L04BA                   ; jump back into address loop so that
6097   1280                                                     ; a new address gets stacked as IP.
6098   1280             
6099   1280             ; ---
6100   1280             
6101   1280 02          x1280   DEFB    $02                     ;;
6102   1281             
6103   1281 39          x1281   DEFB    $39                     ;;
6104   1282 FF          x1282   DEFB    $FF                     ;; 1282 + ff39 = 11bb = IF
6105   1283             
6106   1283             ; ---
6107   1283             
6108   1283 8F 12       L1283:  DEFW    L128F                   ; from IF, convert, line, min, etc.
6109   1285             
6110   1285             ; ---
6111   1285             
6112   1285 02          x1285   DEFB    $02                     ;;
6113   1286             
6114   1286 46          x1286   DEFB    $46                     ;;
6115   1287 FF          x1287   DEFB    $FF                     ;; 1287 + ff46 = 11cd = WHILE
6116   1288             
6117   1288             ; ---
6118   1288             
6119   1288 8F 12       L1288:  DEFW    L128F                   ; from WHILE
6120   128A             
6121   128A             ; ---
6122   128A             
6123   128A 02          x128A   DEFB    $02                     ;;
6124   128B             
6125   128B CF          x128B   DEFB    $CF                     ;;
6126   128C FF          x128C   DEFB    $FF                     ;; 128c + ffcf = 125b = UNTIL
6127   128D             
6128   128D             ; ---------------------------
6129   128D             ; The '?branch' Internal Word
6130   128D             ; ---------------------------
6131   128D             
6132   128D 8F 12       L128D:  DEFW    L128F                   ; headerless 'code field'
6133   128F             
6134   128F             ; ---
6135   128F             
6136   128F CD 4E 08    L128F:  CALL    L084E                   ; stk_to_bc
6137   1292             
6138   1292 78                  LD      A,B                     ; test for
6139   1293 B1                  OR      C                       ; zero
6140   1294             
6141   1294             ; -> from +loop
6142   1294 28 E2       L1294:  JR      Z,L1278                 ; make the jump to "branch" if zero.
6143   1296             
6144   1296 E1                  POP     HL                      ; else drop the pointer.
6145   1297 23                  INC     HL                      ; step over.
6146   1298 23                  INC     HL                      ; the jump bytes
6147   1299 C3 BA 04            JP      L04BA                   ; jump back into address loop so that
6148   129C                                                     ; a new address gets stacked as IP.
6149   129C             
6150   129C             ; ---
6151   129C             
6152   129C 00          x129C   DEFB    $00                     ;;
6153   129D 74          x129D   DEFB    $74                     ;;
6154   129E FF          x129E   DEFB    $FF                     ;; 129e + ff74 = 1212 = BEGIN
6155   129F             
6156   129F             ; ---
6157   129F             
6158   129F B9 04       L129F:  DEFW    L04B9                   ; forth
6159   12A1             
6160   12A1             ; ---
6161   12A1             
6162   12A1 00          x12A1   DEFB    $00                     ;;
6163   12A2 5D          x12A2   DEFB    $5D                     ;;
6164   12A3 FF          x12A3   DEFB    $FF                     ;; 12a3 + ff5d = 1200 = THEN
6165   12A4             
6166   12A4             ; ---
6167   12A4             
6168   12A4 B9 04       L12A4:  DEFW    L04B9
6169   12A6             
6170   12A6             ; -------------
6171   12A6             ; THE 'DO' WORD
6172   12A6             ; -------------
6173   12A6             ; (limit, initial value -- )
6174   12A6             ; Sets up a DO loop, initializing the loop counter to the initial value.
6175   12A6             ; The limit and loop counter are stored on the return stack.
6176   12A6             ; See LOOP and +LOOP.
6177   12A6             
6178   12A6 44          L12A6:  DEFB    'D'                     ; 'name field'
6179   12A7 CF                  DEFB    'O' + $80
6180   12A8             
6181   12A8 62 12               DEFW    L1262                   ; 'link field'
6182   12AA             
6183   12AA 42          L12AA:  DEFB    $42                     ; 'name length field' (immediate mode)
6184   12AB             
6185   12AB 08 11       L12AB:  DEFW    L1108                   ; 'code field' - compile
6186   12AD             
6187   12AD             ; ---
6188   12AD             
6189   12AD 23 13               DEFW    L1323                   ; shuffle
6190   12AF 60 04               DEFW    L0460                   ; here
6191   12B1 4B 10               DEFW    L104B                   ; stk_data
6192   12B3 03                  DEFB    $03                     ; 3                     marker byte.
6193   12B4 B6 04               DEFW    L04B6                   ; exit
6194   12B6             
6195   12B6             ; ---------------
6196   12B6             ; THE 'LOOP' WORD
6197   12B6             ; ---------------
6198   12B6             ; (  --  )
6199   12B6             ; Like +LOOP (below) but the number added onto the loop counter is 1.
6200   12B6             
6201   12B6 4C 4F 4F    L12B6:  DEFM    "LOO"                   ; 'name field'
6202   12B9 D0                  DEFB    'P' + $80
6203   12BA             
6204   12BA AA 12               DEFW    L12AA                   ; 'link field'
6205   12BC             
6206   12BC 44          L12BC:  DEFB    $44                     ; 'name length field' (immediate mode)
6207   12BD             
6208   12BD 08 11       L12BD:  DEFW    L1108                   ; 'code field' - compile
6209   12BF             
6210   12BF             ; ---
6211   12BF             
6212   12BF 32 13               DEFW    L1332                   ; shuffle more
6213   12C1             
6214   12C1 D8 12       L12C1:  DEFW    L12D8                   ; check-for
6215   12C3 03                  DEFB    $03                     ; 3                     marker byte
6216   12C4 37 12               DEFW    L1237                   ; ?
6217   12C6 B6 04               DEFW    L04B6                   ; exit
6218   12C8             
6219   12C8             ; ----------------
6220   12C8             ; THE '+LOOP' WORD
6221   12C8             ; ----------------
6222   12C8             ; (n -- )
6223   12C8             ; Used with DO. Adds n to the loop counter, and loops back if the loop counter
6224   12C8             ; is now less than the limit (if n >= 0) or greater than the limit (if n < 0).
6225   12C8             
6226   12C8 2B 4C 4F 4F L12C8:  DEFM    "+LOO"                  ; 'name field'
6227   12CC D0                  DEFB    'P' + $80
6228   12CD             
6229   12CD BC 12               DEFW    L12BC                   ; 'link field'
6230   12CF             
6231   12CF 45          L12CF:  DEFB    $45                     ; 'name length field' (immediate mode)
6232   12D0             
6233   12D0 08 11       L12D0:  DEFW    L1108                   ; 'code field' - compile
6234   12D2             
6235   12D2             ; ---
6236   12D2             
6237   12D2 3C 13       L12D2:  DEFW    L133C                   ; ?
6238   12D4 76 12               DEFW    L1276                   ; branch
6239   12D6             
6240   12D6 EA FF       L12D6:  DEFW    $FFEA                   ; back to L12C1
6241   12D8             
6242   12D8             ; -----------------------------
6243   12D8             ; The 'check-for' Internal Word
6244   12D8             ; -----------------------------
6245   12D8             ; Checks for expected marker byte which indicates stack is balanced and that
6246   12D8             ; a previous mandatory word was present.
6247   12D8             
6248   12D8 DA 12       L12D8:  DEFW    L12DA                   ; headerless 'code field'
6249   12DA             
6250   12DA             ; ---
6251   12DA             
6252   12DA DF          L12DA:  RST     18H                     ; pop word DE
6253   12DB E1                  POP     HL                      ;
6254   12DC 7E                  LD      A,(HL)                  ;
6255   12DD 23                  INC     HL                      ;
6256   12DE E5                  PUSH    HL                      ;
6257   12DF 93                  SUB     E                       ;
6258   12E0 B2                  OR      D                       ;
6259   12E1             
6260   12E1 28 4A               JR      Z,L132D                 ; to next via jp (iy).
6261   12E3             
6262   12E3             ; else...
6263   12E3             
6264   12E3 E7                  RST     20H                     ; Error 5
6265   12E4 05                  DEFB    $05                     ; Word is not properly structured.
6266   12E5             
6267   12E5             ; ------------
6268   12E5             ; THE 'I' WORD
6269   12E5             ; ------------
6270   12E5             ; ( -- loop counter)
6271   12E5             ; Copies the top of the return stack to the data stack. This will be either
6272   12E5             ; the loop counter for the innermost DO...LOOP, or the number most recently
6273   12E5             ; transferred by >R.
6274   12E5             
6275   12E5             
6276   12E5 C9          L12E5:  DEFB    'I' + $80               ; 'name field'
6277   12E6             
6278   12E6 AA 11               DEFW    L11AA                   ; 'link field'
6279   12E8             
6280   12E8 01          L12E8:  DEFB    $01                     ; 'name length field'
6281   12E9             
6282   12E9 EB 12       L12E9:  DEFW    L12EB                   ; 'code field'
6283   12EB             
6284   12EB             ; ---
6285   12EB             
6286   12EB C1          L12EB:  POP     BC                      ; pop return address
6287   12EC D1                  POP     DE                      ; pop the loop counter to DE.
6288   12ED D5                  PUSH    DE                      ; now restore the stack
6289   12EE C5                  PUSH    BC                      ; exactly as it was.
6290   12EF             
6291   12EF D7                  RST     10H                     ; push Data Word DE - inner loop counter
6292   12F0             
6293   12F0 FD E9               JP      (IY)                    ; to 'next'.
6294   12F2             
6295   12F2             ; -------------
6296   12F2             ; THE 'I'' WORD
6297   12F2             ; -------------
6298   12F2             ; ( -- limit)
6299   12F2             ; Copies the second number down on the return stack to the data stack
6300   12F2             ; (so in a DO loop it copies  the limit of the loop).
6301   12F2             
6302   12F2 49          L12F2:  DEFB    'I'                     ; 'name field'
6303   12F3 A7                  DEFB    $A7                     ; "'" + $80
6304   12F4             
6305   12F4 E8 12               DEFW    L12E8                   ; 'link field'
6306   12F6             
6307   12F6 02          L12F6:  DEFB    $02                     ; 'name length field'
6308   12F7             
6309   12F7 F9 12       L12F7:  DEFW    L12F9                   ; 'code field'
6310   12F9             
6311   12F9             ; ---
6312   12F9             
6313   12F9 21 04 00    L12F9:  LD      HL,$0004                ; two bytes per entry.
6314   12FC 18 09               JR      L1307                   ; forward to use the 'J' indexing
6315   12FE                                                     ; routine
6316   12FE             
6317   12FE             ; ------------
6318   12FE             ; THE 'J' WORD
6319   12FE             ; ------------
6320   12FE             ; ( -- loop counter)
6321   12FE             ; Copies the third entry on the return stack to the data stack.
6322   12FE             ; This will be either the loop counter for the second innermost DO loop
6323   12FE             ; or the number put on the return stack by the most recent >R.
6324   12FE             
6325   12FE CA          L12FE:  DEFB    'J' + $80               ; 'name field'
6326   12FF             
6327   12FF F6 12               DEFW    L12F6                   ; 'link field'
6328   1301             
6329   1301 01          L1301:  DEFB    $01                     ; 'name length field'
6330   1302             
6331   1302 04 13       L1302:  DEFW    L1304                   ; 'code field'
6332   1304             
6333   1304             ; ---
6334   1304             
6335   1304 21 06 00    L1304:  LD      HL,$0006                ; two bytes per entry
6336   1307             
6337   1307             ; -> I' joins here with HL=4
6338   1307             
6339   1307 39          L1307:  ADD     HL,SP                   ; index the stack pointer.
6340   1308 5E                  LD      E,(HL)                  ; low order byte to E
6341   1309 23                  INC     HL                      ; address high byte.
6342   130A 56                  LD      D,(HL)                  ; DE now holds a copy of the required
6343   130B                                                     ; entry from the Return Stack
6344   130B             
6345   130B D7                  RST     10H                     ; stack Data Word DE
6346   130C             
6347   130C FD E9               JP      (IY)                    ; to 'next'.
6348   130E             
6349   130E             ; ----------------
6350   130E             ; THE 'LEAVE' WORD
6351   130E             ; ----------------
6352   130E             ; (  --  )
6353   130E             ; Forces termination of a DO loop at the next LOOP or +LOOP by setting the
6354   130E             ; loop counter equal to the limit.
6355   130E             
6356   130E 4C 45 41 56 L130E:  DEFM    "LEAV"                  ; 'name field'
6357   1312 C5                  DEFB    'E' + $80
6358   1313             
6359   1313 01 13               DEFW    L1301                   ; 'link field'
6360   1315             
6361   1315 05          L1315:  DEFB    $05                     ; 'name length field'
6362   1316             
6363   1316 18 13       L1316:  DEFW    L1318                   ; 'code field'
6364   1318             
6365   1318             ; ---
6366   1318             
6367   1318 C1          L1318:  POP     BC                      ; pop return address to BC.
6368   1319 E1                  POP     HL                      ; pop the loop counter.
6369   131A E1                  POP     HL                      ; now the limit.
6370   131B E5                  PUSH    HL                      ; push unaltered limit.
6371   131C E5                  PUSH    HL                      ; push counter - now limit.
6372   131D C5                  PUSH    BC                      ; restore return address.
6373   131E             
6374   131E FD E9               JP      (IY)                    ; to 'next'.
6375   1320             
6376   1320             ; ---
6377   1320             
6378   1320             
6379   1320 00          x1320   DEFB    $00                     ;;
6380   1321 84          x1321   DEFB    $84                     ;;
6381   1322 FF          x1322   DEFB    $FF                     ;; 1322 + ff84 = 12a6 = DO
6382   1323             
6383   1323             ; -----------------------
6384   1323             ; The '???' Internal Word
6385   1323             ; -----------------------
6386   1323             
6387   1323 25 13       L1323:  DEFW    L1325                   ; headerless 'code field'
6388   1325             
6389   1325             ; ---
6390   1325             
6391   1325 CD 4E 08    L1325:  CALL    L084E                   ; stk_to_bc
6392   1328 DF                  RST     18H                     ; pop word DE
6393   1329 E1                  POP     HL
6394   132A D5                  PUSH    DE
6395   132B             
6396   132B C5          L132B:  PUSH    BC
6397   132C E5                  PUSH    HL
6398   132D             
6399   132D FD E9       L132D:  JP      (IY)                    ; to 'next'.
6400   132F             
6401   132F             ; ---
6402   132F             
6403   132F 02          x132F   DEFB    $02                     ;;
6404   1330 85          x1330   DEFB    $85                     ;;
6405   1331 FF          x1331   DEFB    $FF                     ;; 1331 + ff85 = 12b6 = LOOP
6406   1332             
6407   1332             ; -----------------------
6408   1332             ; The '???' Internal Word
6409   1332             ; -----------------------
6410   1332             
6411   1332 34 13       L1332:  DEFW    L1334                   ; headerless 'code field'
6412   1334             
6413   1334             ; ---
6414   1334             
6415   1334 11 01 00    L1334:  LD      DE,$0001
6416   1337 18 06               JR      L133F                   ; forward =>
6417   1339             
6418   1339             ; ---
6419   1339             
6420   1339 02          x1339   DEFB    $02
6421   133A 8D          x133A   DEFB    $8D
6422   133B FF          x133B   DEFB    $FF
6423   133C             
6424   133C             ; -----------------------
6425   133C             ; The '???' Internal Word
6426   133C             ; -----------------------
6427   133C             ; loop counter + n
6428   133C             ; Note. ADC HL,DE is used in preference to ADD HL,DE as affects P/O flag
6429   133C             
6430   133C 3E 13       L133C:  DEFW    L133E                   ; headerless 'code field'
6431   133E             
6432   133E             ; ---
6433   133E             
6434   133E DF          L133E:  RST     18H                     ; pop word DE - number to be added (n)
6435   133F             ; =>
6436   133F C1          L133F:  POP     BC                      ; pop return address to BC.
6437   1340 E1                  POP     HL                      ; loop counter to HL.
6438   1341 A7                  AND     A                       ; clear carry.
6439   1342 ED 5A               ADC     HL,DE                   ; add the number specified.
6440   1344 7A                  LD      A,D                     ; save MSB of (n) in A.
6441   1345 D1                  POP     DE                      ; now pop the limit to DE.
6442   1346 37                  SCF                             ; set carry.
6443   1347 EA 58 13            JP      PE,L1358                ; jump forward with overflow.
6444   134A             
6445   134A D5                  PUSH    DE                      ; push limit
6446   134B E5                  PUSH    HL                      ; push adjusted counter.
6447   134C 07                  RLCA                            ; now test sign of number (n)
6448   134D 30 01               JR      NC,L1350                ;
6449   134F             
6450   134F EB                  EX      DE,HL
6451   1350             
6452   1350 CD 99 0C    L1350:  CALL    L0C99                   ;
6453   1353             
6454   1353 3F                  CCF
6455   1354             
6456   1354 30 02               JR      NC,L1358                ;
6457   1356             
6458   1356 E1                  POP     HL
6459   1357 E1                  POP     HL
6460   1358             
6461   1358 C5          L1358:  PUSH    BC
6462   1359 9F                  SBC     A,A
6463   135A C3 94 12            JP      L1294                   ; jump to branch on zero.
6464   135D             
6465   135D             ; ------------
6466   135D             ; THE '(' WORD
6467   135D             ; ------------
6468   135D             ; Starts a comment terminated by ')'
6469   135D             
6470   135D A8          L135D:  DEFB    '(' + $80               ; 'name field'
6471   135E             
6472   135E D4 13               DEFW    L13D4                   ; 'link field'
6473   1360             
6474   1360 41          L1360:  DEFB    $41                     ; 'name length field' (immediate mode)
6475   1361             
6476   1361 08 11       L1361:  DEFW    L1108                   ; 'code field' - compile
6477   1363             
6478   1363             ; ---
6479   1363             
6480   1363 79 13       L1363:  DEFW    L1379                   ;
6481   1365 4B 10               DEFW    L104B                   ; stk_data
6482   1367             
6483   1367 29                  DEFB    $29                     ; character ')'         - delimiter
6484   1368             
6485   1368 60 04       L1368:  DEFW    L0460                   ; here
6486   136A 85 08               DEFW    L0885                   ; swap
6487   136C 83 0F               DEFW    L0F83                   ; allot2
6488   136E 9F 13               DEFW    L139F                   ; find)
6489   1370 85 08               DEFW    L0885                   ; swap
6490   1372 C1 08               DEFW    L08C1                   ; !
6491   1374             
6492   1374 B6 04               DEFW    L04B6                   ; exit
6493   1376             
6494   1376             ; ---
6495   1376             
6496   1376 FF          x1376   DEFB    $FF                     ;;
6497   1377 E5          x1377   DEFB    $E5                     ;;
6498   1378 FF          x1378   DEFB    $FF                     ;; 1378 + ffe5 = 135d = '('
6499   1379             
6500   1379             ; -----------------------
6501   1379             ; The '???' Internal Word
6502   1379             ; -----------------------
6503   1379             
6504   1379 7B 13       L1379:  DEFW    L137B                   ; headerless 'code field'
6505   137B             
6506   137B             ; ---
6507   137B             
6508   137B E1          L137B:  POP     HL
6509   137C 5E                  LD      E,(HL)
6510   137D 23                  INC     HL
6511   137E 56                  LD      D,(HL)
6512   137F             
6513   137F 13                  INC     DE
6514   1380             
6515   1380 C3 7C 12            JP      L127C                   ;
6516   1383             
6517   1383             ; -------------
6518   1383             ; THE '."' WORD
6519   1383             ; -------------
6520   1383             ; (  --  )
6521   1383             ; Prints the following string terminated by ".
6522   1383             
6523   1383 2E          L1383:  DEFB    '.'                     ; 'name field'
6524   1384 A2                  DEFB    '"' + $80
6525   1385             
6526   1385 60 13               DEFW    L1360                   ; 'link field'
6527   1387             
6528   1387 42          L1387:  DEFB    $42                     ; 'name length field' (immediate mode)
6529   1388             
6530   1388 08 11       L1388:  DEFW    L1108                   ; 'code field' - compile
6531   138A             
6532   138A             ; ---
6533   138A             
6534   138A 96 13       L138A:  DEFW    L1396                   ; pr_embedded string.
6535   138C 4B 10               DEFW    L104B                   ; stk_data
6536   138E 22                  DEFB    $22                     ; '"'                   - delimiter
6537   138F             
6538   138F 76 12               DEFW    L1276                   ; branch
6539   1391 D6 FF       L1391:  DEFW    $FFD6                   ; back to 1368 (1392+$FFD6)
6540   1393                                                     ; same routine as for matching comments
6541   1393             
6542   1393             ; ---
6543   1393             
6544   1393 FF          x1393   DEFB    $FF                     ;;
6545   1394 EE          x1394   DEFB    $EE                     ;;
6546   1395 FF          x1395   DEFB    $FF                     ;; 1395 + ffee = 1383 = ."
6547   1396             
6548   1396             ; -----------------------
6549   1396             ; The '???' Internal Word
6550   1396             ; -----------------------
6551   1396             ; print string embedded in Dictionary
6552   1396             
6553   1396 98 13       L1396:  DEFW    L1398                   ; headerless 'code field'
6554   1398             
6555   1398             ; ---
6556   1398             
6557   1398 D1          L1398:  POP     DE
6558   1399 CD 79 09            CALL    L0979                   ; pr_string1
6559   139C D5                  PUSH    DE
6560   139D FD E9               JP      (IY)                    ; to 'next'.
6561   139F             
6562   139F             ; -----------------------
6563   139F             ; The '???' Internal Word
6564   139F             ; -----------------------
6565   139F             ; enclose comment
6566   139F             ; comments may be multiple
6567   139F             ; e.g. : SV ( system) ( variables) CLS BEGIN 0 0 AT 15360 80 TYPE 0 UNTIL ;
6568   139F             
6569   139F             
6570   139F A1 13       L139F:  DEFW    L13A1                   ; headerless 'code field'
6571   13A1             
6572   13A1             ; ---
6573   13A1             
6574   13A1 DF          L13A1:  RST     18H                     ; pop word DE
6575   13A2 D5                  PUSH    DE                      ; save delimiter.
6576   13A3             
6577   13A3 CD E1 05            CALL    L05E1                   ; find the ')' delimiter
6578   13A6             
6579   13A6 62                  LD      H,D
6580   13A7 6B                  LD      L,E
6581   13A8 09                  ADD     HL,BC
6582   13A9 7E                  LD      A,(HL)
6583   13AA E1                  POP     HL                      ; pop the delimiter.
6584   13AB BD                  CP      L
6585   13AC 28 0A               JR      Z,L13B8                 ; forward with a match.         =->
6586   13AE             
6587   13AE EB                  EX      DE,HL                   ;
6588   13AF D7                  RST     10H                     ; push word DE
6589   13B0 11 78 05            LD      DE,$0578                ; addr retype?
6590   13B3             
6591   13B3 CD 15 18            CALL    L1815                   ; pr2
6592   13B6             
6593   13B6 18 E9               JR      L13A1                   ; loop back
6594   13B8             
6595   13B8             ; ---
6596   13B8             ; =->
6597   13B8             
6598   13B8 D5          L13B8:  PUSH    DE
6599   13B9 C5                  PUSH    BC
6600   13BA 2A 37 3C            LD      HL,($3C37)              ; STKBOT
6601   13BD             
6602   13BD CD 9E 0F            CALL    L0F9E                   ; routine MAKE ROOM
6603   13C0             
6604   13C0 C1                  POP     BC
6605   13C1 D1                  POP     DE
6606   13C2 D5                  PUSH    DE
6607   13C3 C5                  PUSH    BC
6608   13C4 EB                  EX      DE,HL
6609   13C5 ED B0               LDIR                            ; copy comment to dictionary.
6610   13C7 C1                  POP     BC
6611   13C8 50                  LD      D,B
6612   13C9 59                  LD      E,C
6613   13CA D7                  RST     10H                     ; push word DE
6614   13CB D1                  POP     DE
6615   13CC             
6616   13CC CD DA 07            CALL    L07DA                   ;
6617   13CF             
6618   13CF FD E9               JP      (IY)                    ; to 'next'.
6619   13D1             
6620   13D1             ; ------------
6621   13D1             ; THE '[' WORD
6622   13D1             ; ------------
6623   13D1             ; (  --  )
6624   13D1             ; Enters interpret mode.
6625   13D1             
6626   13D1 DB          L13D1:  DEFB    '[' + $80               ; 'name field'
6627   13D2             
6628   13D2 CF 12               DEFW    L12CF                   ; 'link field'
6629   13D4             
6630   13D4 41          L13D4:  DEFB    $41                     ; 'name length field' (immediate mode)
6631   13D5             
6632   13D5 D7 13       L13D5:  DEFW    L13D7                   ; 'code field'
6633   13D7             
6634   13D7             ; ---
6635   13D7             
6636   13D7 DD CB 3E B6 L13D7:  RES     6,(IX+$3E)              ; FLAGS
6637   13DB FD E9               JP      (IY)                    ; to 'next'.
6638   13DD             
6639   13DD             ; ------------
6640   13DD             ; THE ']' WORD
6641   13DD             ; ------------
6642   13DD             ; (  --  )
6643   13DD             ; Enters compile mode.
6644   13DD             
6645   13DD DD          L13DD:  DEFB    ']' + $80               ; 'name field'
6646   13DE             
6647   13DE 15 13               DEFW    L1315                   ; 'link field'
6648   13E0             
6649   13E0 01          L13E0:  DEFB    $01                     ; 'name length field'
6650   13E1             
6651   13E1 E3 13       L13E1:  DEFW    L13E3                   ; 'code field'
6652   13E3             
6653   13E3             ; ---
6654   13E3             
6655   13E3 DD CB 3E F6 L13E3:  SET     6,(IX+$3E)              ; FLAGS
6656   13E7 FD E9               JP      (IY)                    ; to 'next'.
6657   13E9             
6658   13E9             
6659   13E9             ; ---------------
6660   13E9             ; THE 'EXIT' WORD
6661   13E9             ; ---------------
6662   13E9             ; (  --  )
6663   13E9             ; Exits immediately from the word in whose definition it is contained.
6664   13E9             ; Cannot be used between DO and LOOP or +LOOP, nor between >R and R>.
6665   13E9             
6666   13E9 45 58 49    L13E9:  DEFM    "EXI"                   ; 'name field'
6667   13EC D4                  DEFB    'T' + $80
6668   13ED             
6669   13ED 87 13               DEFW    L1387                   ; 'link field'
6670   13EF             
6671   13EF 04          L13EF:  DEFB    $04                     ; 'name length field'
6672   13F0             
6673   13F0 B8 04       L13F0:  DEFW    L04B8                   ; 'code field'
6674   13F2             
6675   13F2             ; -------------------
6676   13F2             ; THE 'REDEFINE' WORD
6677   13F2             ; -------------------
6678   13F2             ; REDEFINE name
6679   13F2             ; (  --  )
6680   13F2             ; Takes word 'name' and replaces it with the most recent word in the
6681   13F2             ; dictionary. Updates entire dictionary to take changes into account.
6682   13F2             ; Most commonly used as
6683   13F2             ;  EDIT name
6684   13F2             ;  REDEFINE name
6685   13F2             
6686   13F2 52 45 44 45 L13F2:  DEFM    "REDEFIN"               ; 'name field'
6686   13F6 46 49 4E 
6687   13F9 C5                  DEFB    'E' + $80
6688   13FA             
6689   13FA EF 13               DEFW    L13EF                   ; 'link field'
6690   13FC             
6691   13FC 08          L13FC:  DEFB    $08                     ; 'name length field'
6692   13FD             
6693   13FD FF 13       L13FD:  DEFW    L13FF                   ; 'code field'
6694   13FF             
6695   13FF             ; ---
6696   13FF             
6697   13FF CD 2E 0F    L13FF:  CALL    L0F2E                   ; blank stack
6698   1402             
6699   1402 2A 31 3C            LD      HL,($3C31)              ; CURRENT
6700   1405             
6701   1405 5E                  LD      E,(HL)
6702   1406 23                  INC     HL
6703   1407 56                  LD      D,(HL)
6704   1408             
6705   1408 EB                  EX      DE,HL                   ; transfer value to HL
6706   1409 23                  INC     HL
6707   140A 22 05 27            LD      ($2705),HL              ; store in pad
6708   140D             
6709   140D E5                  PUSH    HL                      ; (*)
6710   140E             
6711   140E CD C0 15            CALL    L15C0                   ; get 'name field' address
6712   1411             
6713   1411 22 0D 27            LD      ($270D),HL              ; name field addr
6714   1414 ED 43 07 27         LD      ($2707),BC              ; parameter field addr
6715   1418 ED 53 0B 27         LD      ($270B),DE              ; length field value
6716   141C             
6717   141C 2A 37 3C            LD      HL,($3C37)              ; STKBOT
6718   141F ED 52               SBC     HL,DE
6719   1421 C2 DA 14            JP      NZ,L14DA                ; forward if not matched to Error 11.
6720   1424             
6721   1424 D1                  POP     DE                      ; (*)
6722   1425             
6723   1425 D7                  RST     10H                     ; push word DE
6724   1426             
6725   1426 CD B9 04            CALL    L04B9                   ; forth
6726   1429             
6727   1429 10 16       L1429:  DEFW    L1610                   ; prvcur
6728   142B 3D 06               DEFW    L063D                   ; find
6729   142D 0E 1A               DEFW    L1A0E                   ; end-forth.
6730   142F             
6731   142F             ; ---
6732   142F             
6733   142F DF          L1425:  RST     18H                     ; pop word DE
6734   1430 21 AF C3            LD      HL,$C3AF
6735   1433 19                  ADD     HL,DE
6736   1434 D2 CF 14            JP      NC,L14CF                ;
6737   1437             
6738   1437 EB                  EX      DE,HL
6739   1438 22 03 27            LD      ($2703),HL
6740   143B             
6741   143B CD C0 15            CALL    L15C0                   ; get 'name field' address
6742   143E             
6743   143E 22 01 27            LD      ($2701),HL
6744   1441             
6745   1441 E5          L1441:  PUSH    HL
6746   1442 ED 53 09 27         LD      ($2709),DE
6747   1446 78                  LD      A,B
6748   1447 B1                  OR      C
6749   1448 ED 5B 07 27         LD      DE,($2707)
6750   144C 28 04               JR      Z,L1452                 ;
6751   144E             
6752   144E 7A                  LD      A,D
6753   144F B3                  OR      E
6754   1450 28 7D               JR      Z,L14CF                 ;
6755   1452             
6756   1452 E1          L1452:  POP     HL
6757   1453 ED 4B 0D 27         LD      BC,($270D)
6758   1457 ED 42               SBC     HL,BC
6759   1459 EB                  EX      DE,HL
6760   145A 19                  ADD     HL,DE
6761   145B 22 07 27            LD      ($2707),HL
6762   145E 2A 0B 27            LD      HL,($270B)
6763   1461 19                  ADD     HL,DE
6764   1462 ED 4B 09 27         LD      BC,($2709)
6765   1466 A7                  AND     A
6766   1467 ED 42               SBC     HL,BC
6767   1469 22 0B 27            LD      ($270B),HL
6768   146C 01 2E 00            LD      BC,$002E                ; 46d
6769   146F 09                  ADD     HL,BC
6770   1470 CB 7C               BIT     7,H
6771   1472 20 0B               JR      NZ,L147F                ;
6772   1474             
6773   1474 ED 4B 3B 3C         LD      BC,($3C3B)              ; SPARE
6774   1478 09                  ADD     HL,BC
6775   1479 38 54               JR      C,L14CF                 ;
6776   147B             
6777   147B ED 72               SBC     HL,SP
6778   147D 30 50               JR      NC,L14CF                ;
6779   147F             
6780   147F 2A 03 27    L147F:  LD      HL,($2703)
6781   1482 E5                  PUSH    HL
6782   1483 2B                  DEC     HL
6783   1484 2B                  DEC     HL
6784   1485 46                  LD      B,(HL)
6785   1486 2B                  DEC     HL
6786   1487 4E                  LD      C,(HL)
6787   1488 2A 05 27            LD      HL,($2705)
6788   148B E5                  PUSH    HL
6789   148C 2B                  DEC     HL
6790   148D 2B                  DEC     HL
6791   148E 70                  LD      (HL),B
6792   148F 2B                  DEC     HL
6793   1490 71                  LD      (HL),C
6794   1491 E1                  POP     HL
6795   1492 19                  ADD     HL,DE
6796   1493 C1                  POP     BC
6797   1494 A7                  AND     A
6798   1495 ED 42               SBC     HL,BC
6799   1497 22 05 27            LD      ($2705),HL
6800   149A ED 5B 01 27         LD      DE,($2701)
6801   149E 2A 09 27            LD      HL,($2709)
6802   14A1 A7                  AND     A
6803   14A2 ED 52               SBC     HL,DE
6804   14A4 44                  LD      B,H
6805   14A5 4D                  LD      C,L
6806   14A6 D5                  PUSH    DE
6807   14A7 C5                  PUSH    BC
6808   14A8             
6809   14A8 CD DC 14            CALL    L14DC                   ; RECLAIM
6810   14AB             
6811   14AB 2A 0B 27            LD      HL,($270B)
6812   14AE C1                  POP     BC
6813   14AF 09                  ADD     HL,BC
6814   14B0 44                  LD      B,H
6815   14B1 4D                  LD      C,L
6816   14B2 E1                  POP     HL
6817   14B3 C5                  PUSH    BC
6818   14B4             
6819   14B4 CD 9E 0F            CALL    L0F9E                   ; routine MAKE ROOM
6820   14B7             
6821   14B7 EB                  EX      DE,HL                   ;
6822   14B8 2A 0D 27            LD      HL,($270D)              ;
6823   14BB ED 4B 0B 27         LD      BC,($270B)              ;
6824   14BF 09                  ADD     HL,BC                   ;
6825   14C0 C1                  POP     BC                      ;
6826   14C1 C5                  PUSH    BC                      ;
6827   14C2 E5                  PUSH    HL                      ;
6828   14C3             
6829   14C3 ED B0               LDIR                            ;
6830   14C5             
6831   14C5 D1                  POP     DE
6832   14C6 C1                  POP     BC
6833   14C7             
6834   14C7 CD DC 14            CALL    L14DC                   ; RECLAIM
6835   14CA CD F8 14            CALL    L14F8                   ;
6836   14CD             
6837   14CD FD E9               JP      (IY)                    ; to 'next'.
6838   14CF             
6839   14CF             ; ---
6840   14CF             
6841   14CF 2A 31 3C    L14CF:  LD      HL,($3C31)              ; CURRENT
6842   14D2 ED 5B 05 27         LD      DE,($2705)
6843   14D6 1B                  DEC     DE
6844   14D7 73                  LD      (HL),E
6845   14D8 23                  INC     HL
6846   14D9 72                  LD      (HL),D
6847   14DA             
6848   14DA E7          L14DA:  RST     20H                     ; Error 11
6849   14DB 0B                  DEFB    $0B                     ; Error in REDEFINE or FORGET
6850   14DC             
6851   14DC             ; ---------------------------
6852   14DC             ; THE 'RECLAIMING' SUBROUTINE
6853   14DC             ; ---------------------------
6854   14DC             
6855   14DC 2A 37 3C    L14DC:  LD      HL,($3C37)              ; fetch STKBOT
6856   14DF A7                  AND     A                       ; clear carry flag
6857   14E0 ED 42               SBC     HL,BC                   ; subtract number of bytes to reclaim.
6858   14E2 22 37 3C            LD      ($3C37),HL              ; update STKBOT
6859   14E5             
6860   14E5 2A 3B 3C            LD      HL,($3C3B)              ; fetch SPARE
6861   14E8 ED 42               SBC     HL,BC                   ; subtract number of bytes to reclaim.
6862   14EA 22 3B 3C            LD      ($3C3B),HL              ; update SPARE
6863   14ED             
6864   14ED ED 52               SBC     HL,DE                   ; subtract
6865   14EF C8                  RET     Z                       ; return if same address.
6866   14F0             
6867   14F0 C5                  PUSH    BC                      ;
6868   14F1 44                  LD      B,H                     ;
6869   14F2 4D                  LD      C,L                     ;
6870   14F3 E1                  POP     HL                      ;
6871   14F4 19                  ADD     HL,DE                   ;
6872   14F5             
6873   14F5 ED B0               LDIR                            ;
6874   14F7             
6875   14F7 C9                  RET                             ;
6876   14F8             
6877   14F8             ; ---
6878   14F8             ;
6879   14F8             ; ---
6880   14F8             
6881   14F8 01 31 3C    L14F8:  LD      BC,$3C31                ; CURRENT
6882   14FB             
6883   14FB CD 57 15            CALL    L1557                   ;
6884   14FE CD 57 15            CALL    L1557                   ;
6885   1501             
6886   1501 01 40 3C            LD      BC,$3C40                ; addr. of "FORTH" in RAM.
6887   1504             
6888   1504 2A 37 3C    L1504:  LD      HL,($3C37)              ; STKBOT
6889   1507 37                  SCF                             ;
6890   1508 ED 42               SBC     HL,BC                   ;
6891   150A D8                  RET     C                       ;
6892   150B             
6893   150B 0A          L150B:  LD      A,(BC)                  ;
6894   150C 17                  RLA                             ;
6895   150D 03                  INC     BC                      ;
6896   150E 30 FB               JR      NC,L150B                ;
6897   1510             
6898   1510 03                  INC     BC                      ;
6899   1511 03                  INC     BC                      ;
6900   1512 CD 57 15            CALL    L1557                   ;
6901   1515 03                  INC     BC                      ;
6902   1516 CD 57 15            CALL    L1557                   ;
6903   1519             
6904   1519 CD FB 15    L1519:  CALL    L15FB                   ; routine INDEXER
6905   151C             
6906   151C             ; -------------------------------------------------------
6907   151C             
6908   151C C3 0E               DEFW    L0EC3                   ; DE value
6909   151E 1C          L151E:  DEFB    $1C                     ; to L153A
6910   151F             
6911   151F 85 10               DEFW    L1085                   ; DE value
6912   1521 16          L1521:  DEFB    $16                     ; to L1537
6913   1522             
6914   1522 08 11               DEFW    L1108                   ; DE value
6915   1524 13          L1524:  DEFB    $13                     ; to L1537
6916   1525             
6917   1525 B5 11               DEFW    L11B5                   ; DE value
6918   1527 18          L1527:  DEFB    $18                     ; to L153F
6919   1528             
6920   1528 00 00               DEFW    $0000                   ; zero end marker
6921   152A             
6922   152A             ; -------------------------------------------------------
6923   152A             
6924   152A 21 F9 FF    L152A:  LD      HL,$FFF9
6925   152D 09                  ADD     HL,BC
6926   152E             
6927   152E 4E                  LD      C,(HL)
6928   152F 23                  INC     HL
6929   1530 46                  LD      B,(HL)
6930   1531 2B                  DEC     HL
6931   1532             
6932   1532 09                  ADD     HL,BC
6933   1533             
6934   1533 44                  LD      B,H
6935   1534 4D                  LD      C,L
6936   1535 18 CD               JR      L1504                   ;
6937   1537             
6938   1537             ; -------------------------------------------------------
6939   1537             
6940   1537 CD 57 15    L1537:  CALL    L1557                   ;
6941   153A             
6942   153A             ; ->
6943   153A             
6944   153A CD 48 15    L153A:  CALL    L1548                   ;
6945   153D 18 C5               JR      L1504                   ;
6946   153F             
6947   153F             ; ---
6948   153F             
6949   153F CD 57 15    L153F:  CALL    L1557                   ;
6950   1542 03                  INC     BC                      ;
6951   1543 CD 57 15            CALL    L1557                   ;
6952   1546 18 BC               JR      L1504                   ;
6953   1548             
6954   1548             ; -------------------------------------------------------
6955   1548             
6956   1548             ; XXX?
6957   1548             
6958   1548 CD 57 15    L1548:  CALL    L1557                   ;
6959   154B 21 B6 04            LD      HL,L04B6                ;
6960   154E A7                  AND     A                       ;
6961   154F ED 52               SBC     HL,DE                   ;
6962   1551 C8                  RET     Z                       ;
6963   1552             
6964   1552 CD 9E 15            CALL    L159E                   ;
6965   1555             
6966   1555 18 F1               JR      L1548                   ;
6967   1557             
6968   1557             ; ---
6969   1557             ; often called twice
6970   1557             ; ---
6971   1557             
6972   1557             
6973   1557 0A          L1557:  LD      A,(BC)                  ; lo byte
6974   1558 5F                  LD      E,A                     ;
6975   1559 03                  INC     BC                      ;
6976   155A 0A                  LD      A,(BC)                  ; hi byte
6977   155B 57                  LD      D,A                     ;
6978   155C 0B                  DEC     BC                      ; BC now unchanged, DE contents
6979   155D             
6980   155D CD 68 15            CALL    L1568                   ; routine below. header?
6981   1560             
6982   1560 EB                  EX      DE,HL                   ; value to DE
6983   1561 7B                  LD      A,E                     ;
6984   1562 02                  LD      (BC),A                  ; lo byte
6985   1563 03                  INC     BC                      ;
6986   1564 7A                  LD      A,D                     ;
6987   1565 02                  LD      (BC),A                  ; hi byte
6988   1566 03                  INC     BC                      ;
6989   1567 C9                  RET                             ; to next - BC+=2
6990   1568             
6991   1568             ; ---
6992   1568             
6993   1568 2A 01 27    L1568:  LD      HL,($2701)              ; first bytes of pad.
6994   156B A7                  AND     A                       ;
6995   156C ED 52               SBC     HL,DE                   ; subtract the DE value read from
6996   156E                                                     ; memory
6997   156E 62                  LD      H,D                     ;
6998   156F 6B                  LD      L,E                     ; transfer that DE to HL as well
6999   1570             
7000   1570 D0                  RET     NC                      ; return if HL was higher than DE
7001   1571             
7002   1571 2A 09 27            LD      HL,($2709)              ; tape header
7003   1574 ED 52               SBC     HL,DE
7004   1576 30 0C               JR      NC,L1584                ; forward if higher to
7005   1578             
7006   1578 2A 0D 27            LD      HL,($270D)
7007   157B ED 52               SBC     HL,DE
7008   157D 38 13               JR      C,L1592                 ; forward if lower to
7009   157F             
7010   157F 2A 0B 27            LD      HL,($270B)              ;
7011   1582 19                  ADD     HL,DE
7012   1583 C9                  RET                             ; return
7013   1584             
7014   1584             ; ---
7015   1584             
7016   1584 2A 03 27    L1584:  LD      HL,($2703)
7017   1587 ED 52               SBC     HL,DE
7018   1589 2A 07 27            LD      HL,($2707)
7019   158C D8                  RET     C
7020   158D             
7021   158D 2A 05 27            LD      HL,($2705)
7022   1590 19                  ADD     HL,DE
7023   1591 C9                  RET
7024   1592             
7025   1592             ; ---
7026   1592             
7027   1592 2A 01 27    L1592:  LD      HL,($2701)
7028   1595 19                  ADD     HL,DE
7029   1596 ED 5B 0D 27         LD      DE,($270D)
7030   159A A7                  AND     A
7031   159B ED 52               SBC     HL,DE
7032   159D C9                  RET
7033   159E             
7034   159E             ; ---
7035   159E             
7036   159E 1B          L159E:  DEC     DE
7037   159F 1A                  LD      A,(DE)
7038   15A0 17                  RLA
7039   15A1 D0                  RET     NC
7040   15A2             
7041   15A2 1B          L15A2:  DEC     DE
7042   15A3 1B                  DEC     DE
7043   15A4 1A                  LD      A,(DE)
7044   15A5 6F                  LD      L,A                     ; low byte
7045   15A6 26 00               LD      H,$00                   ; make high byte zero
7046   15A8 3C                  INC     A                       ; test offset for $FF.
7047   15A9 20 06               JR      NZ,L15B1                ; forward if not.
7048   15AB             
7049   15AB 0A                  LD      A,(BC)
7050   15AC 6F                  LD      L,A
7051   15AD 03                  INC     BC
7052   15AE 0A                  LD      A,(BC)
7053   15AF 67                  LD      H,A
7054   15B0 03                  INC     BC
7055   15B1             
7056   15B1 09          L15B1:  ADD     HL,BC
7057   15B2             
7058   15B2 44                  LD      B,H
7059   15B3 4D                  LD      C,L
7060   15B4 C9                  RET
7061   15B5             
7062   15B5             ; ---
7063   15B5             ;
7064   15B5             ; ---
7065   15B5             
7066   15B5             
7067   15B5 B7 15       L15B5:  DEFW    L15B7
7068   15B7             
7069   15B7             ; ---
7070   15B7             
7071   15B7 DF          L15B7:  RST     18H                     ; pop word DE
7072   15B8             
7073   15B8 EB                  EX      DE,HL
7074   15B9             
7075   15B9 CD E7 15            CALL    L15E7                   ; WORDSTART1
7076   15BC             
7077   15BC EB                  EX      DE,HL
7078   15BD             
7079   15BD D7                  RST     10H                     ; push word DE
7080   15BE FD E9               JP      (IY)                    ; to 'next'.
7081   15C0             
7082   15C0             ; ---
7083   15C0             ;
7084   15C0             ; ---
7085   15C0             
7086   15C0 E5          L15C0:  PUSH    HL
7087   15C1 5E                  LD      E,(HL)
7088   15C2 23                  INC     HL
7089   15C3 56                  LD      D,(HL)
7090   15C4             
7091   15C4 CD FB 15    L15C4:  CALL    L15FB                   ; routine INDEXER
7092   15C7             
7093   15C7             ; -------------------------------------------------------
7094   15C7             
7095   15C7 08 11               DEFW    L1108
7096   15C9 0B          L15C9:  DEFB    $0B                     ; to L15D4 - find parameter field
7097   15CA             
7098   15CA 85 10               DEFW    L1085
7099   15CC 08          L15CC:  DEFB    $08                     ; to L15D4 - find parameter field
7100   15CD             
7101   15CD 00 00               DEFW    $0000                   ; zero end_marker.
7102   15CF             
7103   15CF             ; -------------------------------------------------------
7104   15CF             
7105   15CF 01 00 00    L15CF:  LD      BC,$0000                ; zero indicates no parameter field.
7106   15D2 18 07               JR      L15DB                   ; forward to consider total length.
7107   15D4             
7108   15D4             ; -------------------------------------------------------
7109   15D4             
7110   15D4 E1          L15D4:  POP     HL                      ; retrieve the code field address
7111   15D5 E5                  PUSH    HL                      ; save it again
7112   15D6             
7113   15D6 23                  INC     HL                      ; step past the
7114   15D7 23                  INC     HL                      ; address word
7115   15D8 4E                  LD      C,(HL)                  ; and get following address
7116   15D9 23                  INC     HL                      ; which if in RAM could be the
7117   15DA 46                  LD      B,(HL)                  ; parameter field to              BC.
7118   15DB             
7119   15DB             ; ->
7120   15DB             
7121   15DB E1          L15DB:  POP     HL                      ; retrieve the code field address
7122   15DC E5                  PUSH    HL                      ; and save it again
7123   15DD             
7124   15DD 2B                  DEC     HL                      ; the name length field
7125   15DE 2B                  DEC     HL                      ; link field high order byte
7126   15DF 2B                  DEC     HL                      ; link field low order byte
7127   15E0 2B                  DEC     HL                      ; possible length field high
7128   15E1 56                  LD      D,(HL)                  ; save in D
7129   15E2 2B                  DEC     HL                      ; possible length field low
7130   15E3 5E                  LD      E,(HL)                  ; save in E
7131   15E4 19                  ADD     HL,DE                   ; add this length
7132   15E5 EB                  EX      DE,HL                   ; and save result in              DE.
7133   15E6             
7134   15E6 E1                  POP     HL                      ; retrieve code field address
7135   15E7             
7136   15E7             ; ->
7137   15E7             ; indexes the header information of a FORTH word
7138   15E7             
7139   15E7 2B          L15E7:  DEC     HL                      ; point to name length field
7140   15E8             
7141   15E8             ; =>
7142   15E8 7C          L15E8:  LD      A,H                     ; fetch high order byte of the
7143   15E9                                                     ; header address.
7144   15E9 FE 3C               CP      $3C                     ; compare to RAM location
7145   15EB 7E                  LD      A,(HL)                  ; fetch length byte.
7146   15EC CB B7               RES     6,A                     ; reset the immediate mode bit
7147   15EE 38 02               JR      C,L15F2                 ; forward if definition is in ROM.
7148   15F0             
7149   15F0 C6 02               ADD     A,$02                   ; else add extra for 'length field'
7150   15F2             
7151   15F2 2B          L15F2:  DEC     HL                      ; step past the
7152   15F3 2B                  DEC     HL                      ; link to previous word.
7153   15F4             
7154   15F4 2B          L15F4:  DEC     HL                      ; now address last letter on name.
7155   15F5 3D                  DEC     A                       ; decrement the length
7156   15F6 20 FC               JR      NZ,L15F4                ; loop back until at first letter  HL.
7157   15F8             
7158   15F8 C9                  RET                             ; return.
7159   15F9             
7160   15F9             ; -------
7161   15F9             ; INDEXER
7162   15F9             ; -------
7163   15F9             
7164   15F9             ; indexerloop
7165   15F9             
7166   15F9 23          L15F9:  INC     HL                      ; step past the
7167   15FA E5                  PUSH    HL                      ; offset byte.
7168   15FB             
7169   15FB             ; -> Call Entry point
7170   15FB             
7171   15FB E1          L15FB:  POP     HL                      ; drop return address - points to byte
7172   15FC                                                     ; after the call.
7173   15FC 7E                  LD      A,(HL)                  ; read low-order byte
7174   15FD 23                  INC     HL                      ; increment address once
7175   15FE E5                  PUSH    HL                      ; push return address
7176   15FF             
7177   15FF 66                  LD      H,(HL)                  ; read high-order byte.
7178   1600 6F                  LD      L,A                     ; now HL holds the read word
7179   1601 B4                  OR      H                       ; test for two zeros.
7180   1602 C8                  RET     Z                       ; two zeros - return
7181   1603                                                     ; (ret addr is second NOP)
7182   1603             
7183   1603 ED 52               SBC     HL,DE                   ; compare to value passed in DE
7184   1605             
7185   1605 E1                  POP     HL                      ; now increment the
7186   1606 23                  INC     HL                      ; return address on machine stack.
7187   1607             
7188   1607 20 F0               JR      NZ,L15F9                ; loop back if read word is not
7189   1609                                                     ; equal to DE
7190   1609             
7191   1609 D5                  PUSH    DE                      ; else preserve DE
7192   160A             
7193   160A 16 00               LD      D,$00                   ; a 1 byte relative jump.
7194   160C 5E                  LD      E,(HL)                  ; read one-byte offset.
7195   160D 19                  ADD     HL,DE                   ; add to read address.
7196   160E             
7197   160E D1                  POP     DE                      ; restore DE
7198   160F             
7199   160F E9                  JP      (HL)                    ; >>>
7200   1610             
7201   1610             ; ---
7202   1610             
7203   1610 C3 0E       L1610:  DEFW    L0EC3                   ; 'code field' - docolon
7204   1612             
7205   1612 1F 0E               DEFW    L0E1F                   ; 1-
7206   1614 29 0E               DEFW    L0E29                   ; 2-
7207   1616 B3 08               DEFW    L08B3                   ; @
7208   1618 80 04               DEFW    L0480                   ; current
7209   161A B3 08               DEFW    L08B3                   ; @
7210   161C C1 08               DEFW    L08C1                   ; !
7211   161E B6 04               DEFW    L04B6                   ; exit
7212   1620             
7213   1620             ; ---------------------------------
7214   1620             ; THE 'FIND WORD IN RAM' SUBROUTINE
7215   1620             ; ---------------------------------
7216   1620             ; This subroutine is used by FORGET, EDIT and LIST.
7217   1620             ; First use the standard FORTH word find to get address of word (in pad).
7218   1620             ; If word does not exist then returned value will be zero.
7219   1620             ; The lowest word in RAM is the FORTH word at L3C51 so a check is made
7220   1620             ; against this address.
7221   1620             
7222   1620 CD B9 04    L1620:  CALL    L04B9                   ; forth
7223   1623 3D 06               DEFW    L063D                   ; find
7224   1625             
7225   1625 0E 1A       L1625:  DEFW    L1A0E                   ; end-forth.
7226   1627             
7227   1627 DF                  RST     18H                     ; pop word DE
7228   1628             
7229   1628 21 AF C3            LD      HL,$C3AF                ; i.e $0000 - $3C51
7230   162B             
7231   162B 19                  ADD     HL,DE                   ; add to test value.
7232   162C D8                  RET     C                       ; carry signals that word exists in RAM.
7233   162D                                                     ; return the address in DE.
7234   162D             
7235   162D             ; else generate an error code.
7236   162D             
7237   162D E7                  RST     20H                     ; Error 13
7238   162E 0D                  DEFB    $0D                     ; Error word not found or is in ROM.
7239   162F             
7240   162F             ; -----------------
7241   162F             ; THE 'FORGET' WORD
7242   162F             ; -----------------
7243   162F             ; FORGET name.
7244   162F             ; Erases the word 'name' and all subsequently defined names from the dictionary.
7245   162F             
7246   162F 46 4F 52 47 L162F:  DEFM    "FORGE"                 ; 'name field'
7246   1633 45 
7247   1634 D4                  DEFB    'T' + $80
7248   1635             
7249   1635 FC 13               DEFW    L13FC                   ; 'link field'
7250   1637             
7251   1637 06          L1637:  DEFB    $06                     ; 'name length field'
7252   1638             
7253   1638 3A 16       L1638:  DEFW    L163A                   ; 'code field'
7254   163A             
7255   163A             ; ---
7256   163A             
7257   163A 2A 31 3C    L163A:  LD      HL,($3C31)              ; CURRENT
7258   163D ED 5B 33 3C         LD      DE,($3C33)              ; CONTEXT
7259   1641 A7                  AND     A
7260   1642 ED 52               SBC     HL,DE
7261   1644             
7262   1644 C2 DA 14            JP      NZ,L14DA                ;
7263   1647             
7264   1647 CD 20 16            CALL    L1620                   ; findramword
7265   164A             
7266   164A 21 FB FF            LD      HL,$FFFB
7267   164D 19                  ADD     HL,DE
7268   164E 22 39 3C            LD      ($3C39),HL              ; SPARE
7269   1651 DD CB 3E D6         SET     2,(IX+$3E)              ; FLAGS
7270   1655             
7271   1655 E7                  RST     20H                     ; Invoke error routine.
7272   1656 FF                  DEFB    $FF                     ; No error
7273   1657             
7274   1657             ; ---------------
7275   1657             ; THE 'EDIT' WORD
7276   1657             ; ---------------
7277   1657             ; EDIT name
7278   1657             ; Lists word 'name' at bottom of the screen to be edited. Lists 18 lines at
7279   1657             ; a time, then waits for editing until ENTER is pressed.
7280   1657             ; A new version of the word is entered at the end of the dictionary.
7281   1657             ; While editing, cursor up and cursor down are needed to move the cursor
7282   1657             ; from one line to another. DELETE LINE deletes one line.
7283   1657             
7284   1657 45 44 49    L1657:  DEFM    "EDI"                   ; 'name field'
7285   165A D4                  DEFB    'T' + $80
7286   165B             
7287   165B 37 16               DEFW    L1637                   ; 'link field'
7288   165D             
7289   165D 04          L165D:  DEFB    $04                     ; 'name length field'
7290   165E             
7291   165E 60 16       L165E:  DEFW    L1660                   ; 'code field'
7292   1660             
7293   1660             ; ---
7294   1660             
7295   1660 CD 20 16    L1660:  CALL    L1620                   ; findramword
7296   1663             
7297   1663 DD CB 3E DE         SET     3,(IX+$3E)              ; update FLAGS output -> input buffer
7298   1667 18 0C               JR      L1675                   ; forward to list routine the difference
7299   1669                                                     ; being that the listing will go to the
7300   1669                                                     ; lower screen.
7301   1669             
7302   1669             ; ---------------
7303   1669             ; THE 'LIST' WORD
7304   1669             ; ---------------
7305   1669             ; LIST name
7306   1669             ; (  --  )
7307   1669             ; Lists word 'name' on the screen. It must have been defined by :, DEFINER,
7308   1669             ; or COMPILER. Lists about 18 lines at a time and waits for key depression
7309   1669             ; (shifted space breaks).
7310   1669             
7311   1669 4C 49 53    L1669:  DEFM    "LIS"                   ; 'name field'
7312   166C D4                  DEFB    'T' + $80
7313   166D             
7314   166D 5D 16               DEFW    L165D                   ; 'link field'
7315   166F             
7316   166F 04          L166F:  DEFB    $04                     ; 'name length field'
7317   1670             
7318   1670 72 16       L1670:  DEFW    L1672                   ; 'code field'
7319   1672             
7320   1672             ; ---
7321   1672             
7322   1672 CD 20 16    L1672:  CALL    L1620                   ; findramword
7323   1675             
7324   1675             ; edit path joins here but carriage returns are printed as zeros.
7325   1675             
7326   1675 3E 0D       L1675:  LD      A,$0D                   ; prepare a carriage return.
7327   1677 CF                  RST     08H                     ; print_ch
7328   1678             
7329   1678 DD CB 3E 5E         BIT     3,(IX+$3E)              ; test FLAGS output->input buffer?
7330   167C             
7331   167C D5                  PUSH    DE
7332   167D             
7333   167D C4 D8 02            CALL    NZ,L02D8                ; call if so to initialize buffer
7334   1680             
7335   1680 C1                  POP     BC                      ; LD DE,(BC)
7336   1681             
7337   1681 0A                  LD      A,(BC)
7338   1682 5F                  LD      E,A
7339   1683 03                  INC     BC
7340   1684 0A                  LD      A,(BC)
7341   1685 57                  LD      D,A
7342   1686 0B                  DEC     BC
7343   1687             
7344   1687 CD FB 15            CALL    L15FB                   ; routine INDEXER
7345   168A             
7346   168A             ; -------------------------------------------------------
7347   168A             
7348   168A C3 0E       L168A:  DEFW    L0EC3                   ; DE value
7349   168C 0B          L168C:  DEFB    $0B                     ; offset to L1697
7350   168D             
7351   168D 08 11       L168D:  DEFW    L1108                   ; DE value
7352   168F 0D          L168F:  DEFB    $0D                     ; offset to L169C
7353   1690             
7354   1690 85 10       L1690:  DEFW    L1085                   ; DE value
7355   1692 1F          L1692:  DEFB    $1F                     ; offset to L16B1
7356   1693             
7357   1693 00 00               DEFW    $0000                   ; zero end-marker
7358   1695             
7359   1695             ; -------------------------------------------------------
7360   1695             
7361   1695 E7          L1695:  RST     20H                     ; Error 14
7362   1696 0E                  DEFB    $0E                     ; Word unlistable.
7363   1697             
7364   1697             ; Only words defined by ':', 'DEFINER' or 'COMPILER' are listable.
7365   1697             
7366   1697             ; -------------------------------------------------------
7367   1697             
7368   1697             ; ':'
7369   1697 21 02 00    L1697:  LD      HL,$0002
7370   169A 18 18               JR      L16B4                   ;
7371   169C             ; ---
7372   169C             
7373   169C D5          L169C:  PUSH    DE
7374   169D 21 02 00            LD      HL,$0002
7375   16A0 09                  ADD     HL,BC
7376   16A1 7E                  LD      A,(HL)
7377   16A2 23                  INC     HL
7378   16A3 66                  LD      H,(HL)
7379   16A4 6F                  LD      L,A
7380   16A5 2B                  DEC     HL
7381   16A6 2B                  DEC     HL
7382   16A7 2B                  DEC     HL
7383   16A8             
7384   16A8 6E                  LD      L,(HL)
7385   16A9 7D                  LD      A,L
7386   16AA 07                  RLCA
7387   16AB 9F                  SBC     A,A
7388   16AC 67                  LD      H,A
7389   16AD             
7390   16AD CD 0E 18            CALL    L180E                   ; pr_int_hl?
7391   16B0             
7392   16B0 D1                  POP     DE
7393   16B1             
7394   16B1 21 04 00    L16B1:  LD      HL,$0004
7395   16B4             
7396   16B4             
7397   16B4 09          L16B4:  ADD     HL,BC
7398   16B5 E5                  PUSH    HL
7399   16B6 C5                  PUSH    BC
7400   16B7             
7401   16B7 CD E4 17            CALL    L17E4                   ;
7402   16BA             
7403   16BA D1                  POP     DE
7404   16BB C1                  POP     BC
7405   16BC             
7406   16BC CD E4 17            CALL    L17E4                   ;
7407   16BF             
7408   16BF DD 36 14 01         LD      (IX+$14),$01            ; LISTWSx
7409   16C3             
7410   16C3 DD 36 16 10 L16C3:  LD      (IX+$16),$10            ; LISTWSx
7411   16C7             
7412   16C7 CD 08 17    L16C7:  CALL    L1708                   ; index_table
7413   16CA             
7414   16CA 38 06               JR      C,L16D2                 ;
7415   16CC             
7416   16CC DD 35 16            DEC     (IX+$16)                ; LISTWSx
7417   16CF F2 C7 16            JP      P,L16C7                 ;
7418   16D2             
7419   16D2 DD CB 3E 5E L16D2:  BIT     3,(IX+$3E)              ; FLAGS
7420   16D6 20 10               JR      NZ,L16E8                ; branch forward  =->
7421   16D8             
7422   16D8 38 28               JR      C,L1702                 ;
7423   16DA             
7424   16DA 21 26 3C            LD      HL,$3C26                ; KEYCOD
7425   16DD 36 00               LD      (HL),$00                ;
7426   16DF             
7427   16DF 7E          L16DF:  LD      A,(HL)                  ;
7428   16E0 A7                  AND     A                       ;
7429   16E1 28 FC               JR      Z,L16DF                 ; loop back while zero
7430   16E3             
7431   16E3 CD E4 04            CALL    L04E4                   ; check break
7432   16E6             
7433   16E6 18 DB               JR      L16C3                   ; loop back
7434   16E8             
7435   16E8             ; =->
7436   16E8             
7437   16E8 F5          L16E8:  PUSH    AF
7438   16E9 DD CB 3E 9E         RES     3,(IX+$3E)              ; FLAGS
7439   16ED C5                  PUSH    BC
7440   16EE             
7441   16EE CD B9 04            CALL    L04B9                   ; forth
7442   16F1             
7443   16F1 78 05               DEFW    L0578                   ; retype        - allow user to retype
7444   16F3 06 05               DEFW    L0506                   ; line          - interpret buffer
7445   16F5 0E 1A               DEFW    L1A0E                   ; end-forth.
7446   16F7             
7447   16F7             
7448   16F7 DD CB 3E DE         SET     3,(IX+$3E)              ; FLAGS
7449   16FB             
7450   16FB CD D8 02            CALL    L02D8                   ;
7451   16FE             
7452   16FE C1                  POP     BC
7453   16FF F1                  POP     AF
7454   1700 30 C1               JR      NC,L16C3                ;
7455   1702             
7456   1702 DD CB 3E 9E L1702:  RES     3,(IX+$3E)              ; FLAGS
7457   1706 FD E9               JP      (IY)                    ; to 'next'.
7458   1708             
7459   1708             ; -------------------------------------------------------
7460   1708             
7461   1708             ; called once
7462   1708             
7463   1708 3A 14 3C    L1708:  LD      A,($3C14)               ; LISTWS2
7464   170B 32 15 3C            LD      ($3C15),A               ; LISTWS3
7465   170E             
7466   170E DD 36 13 05         LD      (IX+$13),$05            ; LISTWS
7467   1712             
7468   1712 0A          L1712:  LD      A,(BC)
7469   1713 5F                  LD      E,A
7470   1714 03                  INC     BC
7471   1715 0A                  LD      A,(BC)
7472   1716 57                  LD      D,A
7473   1717 03                  INC     BC
7474   1718             
7475   1718 CD FB 15    L1718:  CALL    L15FB                   ; routine INDEXER
7476   171B             
7477   171B             ; -------------------------------------------------------
7478   171B             
7479   171B 83 12       L171B:  DEFW    L1283                   ;
7480   171D 40          L171D:  DEFB    $40                     ; offset to L175D
7481   171E             
7482   171E 71 12       L171E:  DEFW    L1271                   ;
7483   1720 44          L1720:  DEFB    $44                     ; offset to L1764
7484   1721             
7485   1721 A4 12       L1721:  DEFW    L12A4                   ;
7486   1723 48          L1723:  DEFB    $48                     ; offset to L176B
7487   1724             
7488   1724 9F 12       L1724:  DEFW    L129F                   ;
7489   1726 37          L1726:  DEFB    $37                     ; offset to L175D
7490   1727             
7491   1727 8D 12       L1727:  DEFW    L128D                   ;
7492   1729 42          L1729:  DEFB    $42                     ; offset to L176B
7493   172A             
7494   172A 88 12       L172A:  DEFW    L1288                   ;
7495   172C 38          L172C:  DEFB    $38                     ; offset to L1764
7496   172D             
7497   172D 76 12       L172D:  DEFW    L1276                   ;
7498   172F 3C          L172F:  DEFB    $3C                     ; offset to L176B
7499   1730             
7500   1730 23 13       L1730:  DEFW    L1323                   ;
7501   1732 2B          L1732:  DEFB    $2B                     ; offset to L175D
7502   1733             
7503   1733 32 13       L1733:  DEFW    L1332                   ;
7504   1735 36          L1735:  DEFB    $36                     ; offset to L176B
7505   1736             
7506   1736 3C 13       L1736:  DEFW    L133C                   ;
7507   1738 33          L1738:  DEFB    $33                     ; offset to L176B
7508   1739             
7509   1739 E8 10       L1739:  DEFW    L10E8                   ;
7510   173B 29          L173B:  DEFB    $29                     ; offset to L1764
7511   173C             
7512   173C 40 11       L173C:  DEFW    L1140                   ;
7513   173E 26          L173E:  DEFB    $26                     ; offset to L1764
7514   173F             
7515   173F 11 10       L173F:  DEFW    L1011                   ;
7516   1741 3B          L1741:  DEFB    $3B                     ; offset to L177C
7517   1742             
7518   1742 64 10       L1742:  DEFW    L1064                   ;
7519   1744 47          L1744:  DEFB    $47                     ; offset to L178B
7520   1745             
7521   1745 4B 10       L1745:  DEFW    L104B                   ;
7522   1747 51          L1747:  DEFB    $51                     ; offset to L1798
7523   1748             
7524   1748 79 13       L1748:  DEFW    L1379                   ;
7525   174A 62          L174A:  DEFB    $62                     ; offset to L17AC
7526   174B             
7527   174B 96 13       L174B:  DEFW    L1396                   ;
7528   174D 63          L174D:  DEFB    $63                     ; offset to L17B0
7529   174E             
7530   174E B6 04       L174E:  DEFW    L04B6                   ;
7531   1750 54          L1750:  DEFB    $54                     ; offset to L17A4
7532   1751             
7533   1751 00 00       L1751:  DEFW    $0000                   ; zero end-marker
7534   1753             
7535   1753             ; -------------------------------------------------------
7536   1753             
7537   1753             ; default action
7538   1753             
7539   1753 CD E1 17    L1753:  CALL    L17E1                   ;
7540   1756             
7541   1756 DD 35 13    L1756:  DEC     (IX+$13)                ; LISTWS
7542   1759 20 B7               JR      NZ,L1712                ;
7543   175B A7                  AND     A
7544   175C C9                  RET
7545   175D             
7546   175D             ; ---
7547   175D             
7548   175D 2A 14 3C    L175D:  LD      HL,($3C14)              ; LISTWS2
7549   1760 65                  LD      H,L
7550   1761 2C                  INC     L
7551   1762 18 0C               JR      L1770                   ;
7552   1764             
7553   1764             ; ---
7554   1764             
7555   1764 2A 14 3C    L1764:  LD      HL,($3C14)              ; LISTWS2
7556   1767 65                  LD      H,L
7557   1768 25                  DEC     H
7558   1769 18 05               JR      L1770                   ;
7559   176B             
7560   176B             ; ---
7561   176B             
7562   176B 2A 14 3C    L176B:  LD      HL,($3C14)              ; LISTWS2
7563   176E 2D                  DEC     L
7564   176F 65                  LD      H,L
7565   1770             
7566   1770 22 14 3C    L1770:  LD      ($3C14),HL              ; LISTWS2
7567   1773 DD 36 13 01         LD      (IX+$13),$01            ; LISTWS
7568   1777 DD 35 16            DEC     (IX+$16)                ; LISTWSx
7569   177A 18 D7               JR      L1753                   ;
7570   177C             
7571   177C             ; ---
7572   177C             
7573   177C CD DA 17    L177C:  CALL    L17DA                   ;
7574   177F             
7575   177F D7                  RST     10H                     ; push word DE
7576   1780 11 B3 09            LD      DE,$09B3                ; '.' addr
7577   1783             
7578   1783 CD C1 17    L1783:  CALL    L17C1                   ; routine INDENT
7579   1786 CD 15 18            CALL    L1815                   ; pr2
7580   1789             
7581   1789 18 CB               JR      L1756                   ;
7582   178B             
7583   178B             ; ---
7584   178B             
7585   178B CD DA 17    L178B:  CALL    L17DA                   ;
7586   178E D7                  RST     10H                     ; push word DE
7587   178F CD DA 17            CALL    L17DA                   ;
7588   1792 D7                  RST     10H                     ; push word DE
7589   1793 11 AF 0A            LD      DE,$0AAF                ; 'F.' addr
7590   1796 18 EB               JR      L1783                   ;
7591   1798             
7592   1798             ; ---
7593   1798             
7594   1798 0A          L1798:  LD      A,(BC)
7595   1799 F5                  PUSH    AF
7596   179A             
7597   179A CD E1 17            CALL    L17E1                   ;
7598   179D             
7599   179D F1                  POP     AF
7600   179E CF                  RST     08H                     ; print_ch
7601   179F             
7602   179F 3E 20               LD      A,$20                   ; a space character
7603   17A1 CF                  RST     08H                     ; print_ch
7604   17A2             
7605   17A2 18 B2               JR      L1756                   ;
7606   17A4             
7607   17A4             ; ---
7608   17A4             
7609   17A4 CD 08 18    L17A4:  CALL    L1808                   ; pr_inline
7610   17A7             
7611   17A7 0D                  DEFB    $0D                     ; newline
7612   17A8 3B                  DEFB    ';'                     ; ;
7613   17A9 8D                  DEFB    $8D                     ; inverted newline
7614   17AA             
7615   17AA 37                  SCF                             ;
7616   17AB C9                  RET                             ;
7617   17AC             
7618   17AC             ; ---
7619   17AC             
7620   17AC 3E 29       L17AC:  LD      A,$29                   ; character ')' - end of comment.
7621   17AE 18 02               JR      L17B2                   ;
7622   17B0             
7623   17B0 3E 22       L17B0:  LD      A,$22                   ; character '"' - quote
7624   17B2             
7625   17B2 F5          L17B2:  PUSH    AF
7626   17B3 C5                  PUSH    BC
7627   17B4 CD E1 17            CALL    L17E1                   ;
7628   17B7 D1                  POP     DE
7629   17B8 CD 79 09            CALL    L0979                   ; pr_string1
7630   17BB 42                  LD      B,D
7631   17BC 4B                  LD      C,E
7632   17BD F1                  POP     AF
7633   17BE             
7634   17BE CF                  RST     08H                     ; print_ch
7635   17BF             
7636   17BF A7                  AND     A
7637   17C0 C9                  RET
7638   17C1             
7639   17C1             ; -------------------------------------------------------
7640   17C1             
7641   17C1 3A 15 3C    L17C1:  LD      A,($3C15)               ; LISTWS3
7642   17C4 A7                  AND     A
7643   17C5 F8                  RET     M
7644   17C6             
7645   17C6 C5                  PUSH    BC                      ; preserve BC
7646   17C7 47                  LD      B,A                     ; transfer count to B
7647   17C8             
7648   17C8 3E 0D               LD      A,$0D                   ; carriage return.
7649   17CA CF                  RST     08H                     ; print_ch
7650   17CB             
7651   17CB 04                  INC     B                       ; test indentation.
7652   17CC 05                  DEC     B                       ;
7653   17CD 28 05               JR      Z,L17D4                 ;
7654   17CF             
7655   17CF 3E 20       L17CF:  LD      A,$20                   ; a space character
7656   17D1 CF                  RST     08H                     ; print_ch
7657   17D2             
7658   17D2 10 FB               DJNZ    L17CF                   ;
7659   17D4             
7660   17D4 DD 36 15 FF L17D4:  LD      (IX+$15),$FF            ; LISTWS3
7661   17D8             
7662   17D8 C1                  POP     BC                      ; restore BC
7663   17D9 C9                  RET                             ; return.
7664   17DA             
7665   17DA             ; ---
7666   17DA             
7667   17DA 0A          L17DA:  LD      A,(BC)
7668   17DB 5F                  LD      E,A
7669   17DC 03                  INC     BC
7670   17DD 0A                  LD      A,(BC)
7671   17DE 57                  LD      D,A
7672   17DF 03          L17DF:  INC     BC
7673   17E0 C9                  RET
7674   17E1             
7675   17E1             ; ---
7676   17E1             
7677   17E1 CD C1 17    L17E1:  CALL    L17C1                   ; routine INDENT
7678   17E4             
7679   17E4 EB          L17E4:  EX      DE,HL
7680   17E5 2B                  DEC     HL
7681   17E6 7E                  LD      A,(HL)
7682   17E7 CB 7F               BIT     7,A
7683   17E9 20 05               JR      NZ,L17F0                ;
7684   17EB             
7685   17EB CD E8 15            CALL    L15E8                   ; routine WORDSTART
7686   17EE             
7687   17EE 18 0B               JR      L17FB                   ;
7688   17F0             
7689   17F0             ; ---
7690   17F0             
7691   17F0 EB          L17F0:  EX      DE,HL
7692   17F1             
7693   17F1 CD A2 15            CALL    L15A2                   ;
7694   17F4             
7695   17F4 13                  INC     DE
7696   17F5 1A                  LD      A,(DE)
7697   17F6 6F                  LD      L,A
7698   17F7 13                  INC     DE
7699   17F8 1A                  LD      A,(DE)
7700   17F9 67                  LD      H,A
7701   17FA 19                  ADD     HL,DE
7702   17FB             
7703   17FB             ; pr_string_sp
7704   17FB             
7705   17FB 7E          L17FB:  LD      A,(HL)
7706   17FC E6 7F               AND     $7F
7707   17FE CF                  RST     08H                     ; print_ch
7708   17FF CB 7E               BIT     7,(HL)
7709   1801 23                  INC     HL
7710   1802 28 F7               JR      Z,L17FB                 ;
7711   1804             
7712   1804 3E 20               LD      A,$20
7713   1806 CF                  RST     08H                     ; print_ch
7714   1807 C9                  RET
7715   1808             
7716   1808             ; ---------------------------------------
7717   1808             ; THE 'INLINE PRINT STRING SPACE' ROUTINE
7718   1808             ; ---------------------------------------
7719   1808             ;
7720   1808             
7721   1808 E3          L1808:  EX      (SP),HL
7722   1809 CD FB 17            CALL    L17FB                   ; pr_string_sp
7723   180C E3                  EX      (SP),HL
7724   180D C9                  RET
7725   180E             
7726   180E             ; ---------------------------
7727   180E             ; THE 'PRINT INTEGER' ROUTINE
7728   180E             ; ---------------------------
7729   180E             ; in HL
7730   180E             
7731   180E             ; -> called twice
7732   180E 11 B3 09    L180E:  LD      DE,$09B3                ; '.' addr
7733   1811 D5                  PUSH    DE                      ; but save it as we need DE?
7734   1812             
7735   1812 EB                  EX      DE,HL                   ; transfer HL to DE.
7736   1813 D7                  RST     10H                     ; push word DE, was HL, on Data Stack.
7737   1814 D1                  POP     DE                      ; restore L09B3 again
7738   1815             
7739   1815             ; -> called twice.
7740   1815 C5          L1815:  PUSH    BC                      ; preserve BC.
7741   1816             
7742   1816 CD BF 04            CALL    L04BF                   ; executes '.' word
7743   1819             
7744   1819             ; the '.' exits so expects another word here
7745   1819             
7746   1819             
7747   1819 1B 18       L1819:  DEFW    L181B
7748   181B             
7749   181B 1D 18       L181B:  DEFW    L181D
7750   181D             
7751   181D C1          L181D   POP     BC                      ;
7752   181E C1                  POP     BC                      ; restore BC.
7753   181F             
7754   181F C9                  RET                             ; return.
7755   1820             
7756   1820             ; ---------------------------------
7757   1820             ; THE 'CASSETTE INTERFACE' ROUTINES
7758   1820             ; ---------------------------------
7759   1820             
7760   1820             ; ---
7761   1820             ; tape???
7762   1820             ; ---
7763   1820             
7764   1820 FD E5       L1820:  PUSH    IY
7765   1822             
7766   1822 E5                  PUSH    HL
7767   1823 FD E1               POP     IY
7768   1825             
7769   1825 21 92 18            LD      HL,L1892
7770   1828 E5                  PUSH    HL
7771   1829             
7772   1829 21 00 E0            LD      HL,$E000
7773   182C CB 79               BIT     7,C
7774   182E 28 02               JR      Z,L1832                 ;
7775   1830 26 FC               LD      H,$FC
7776   1832 13          L1832:  INC     DE
7777   1833 FD 2B               DEC     IY
7778   1835 F3                  DI
7779   1836 AF                  XOR     A
7780   1837             
7781   1837 06 97       L1837:  LD      B,$97
7782   1839             
7783   1839 10 FE       L1839:  DJNZ    L1839                   ;
7784   183B D3 FE               OUT     ($FE),A
7785   183D EE 08               XOR     $08
7786   183F 2C                  INC     L
7787   1840 20 01               JR      NZ,L1843                ;
7788   1842 24                  INC     H
7789   1843 20 F2       L1843:  JR      NZ,L1837                ;
7790   1845 06 2B               LD      B,$2B
7791   1847 10 FE       L1847:  DJNZ    L1847                   ;
7792   1849 D3 FE               OUT     ($FE),A
7793   184B 69                  LD      L,C
7794   184C 01 08 3B            LD      BC,$3B08
7795   184F 10 FE       L184F:  DJNZ    L184F                   ;
7796   1851 79                  LD      A,C
7797   1852 D3 FE               OUT     ($FE),A
7798   1854 06 38               LD      B,$38
7799   1856 C3 8A 18            JP      L188A                   ;
7800   1859             
7801   1859 79          L1859:  LD      A,C
7802   185A CB 78               BIT     7,B
7803   185C             
7804   185C 10 FE       L185C:  DJNZ    L185C                   ;
7805   185E             
7806   185E 30 04               JR      NC,L1864                ;
7807   1860             
7808   1860 06 3D               LD      B,$3D
7809   1862 10 FE       L1862:  DJNZ    L1862                   ;
7810   1864             
7811   1864 D3 FE       L1864:  OUT     ($FE),A
7812   1866 06 3A               LD      B,$3A
7813   1868 C2 59 18            JP      NZ,L1859                ;
7814   186B 05                  DEC     B
7815   186C AF                  XOR     A
7816   186D CB 15       L186D:  RL      L
7817   186F C2 5C 18            JP      NZ,L185C                ;
7818   1872 1B                  DEC     DE
7819   1873 FD 23               INC     IY
7820   1875 06 2E               LD      B,$2E
7821   1877             
7822   1877 3E 7F               LD      A,$7F
7823   1879 DB FE               IN      A,($FE)
7824   187B 1F                  RRA
7825   187C D0                  RET     NC
7826   187D             
7827   187D 7A                  LD      A,D
7828   187E FE FF               CP      $FF
7829   1880 D0                  RET     NC
7830   1881             
7831   1881 B3                  OR      E
7832   1882 28 0B               JR      Z,L188F                 ;
7833   1884             
7834   1884 FD 6E 00            LD      L,(IY+$00)
7835   1887 7C          L1887:  LD      A,H
7836   1888 AD                  XOR     L
7837   1889 67                  LD      H,A
7838   188A AF          L188A:  XOR     A
7839   188B 37                  SCF
7840   188C C3 6D 18            JP      L186D                   ; JUMP back
7841   188F             
7842   188F             ; ---
7843   188F             
7844   188F 6C          L188F:  LD      L,H
7845   1890 18 F5               JR      L1887                   ;
7846   1892             
7847   1892 FD E1       L1892:  POP     IY                      ; restore the original IY value so that
7848   1894                                                     ; words can be used gain.
7849   1894             
7850   1894 08                  EX      AF,AF'                  ;;
7851   1895 06 3B               LD      B,$3B                   ;
7852   1897             
7853   1897 10 FE       L1897:  DJNZ    L1897                   ; self-loop for delay.
7854   1899             
7855   1899 AF                  XOR     A
7856   189A D3 FE               OUT     ($FE),A
7857   189C             
7858   189C 3E 7F               LD      A,$7F                   ; read the port $7FFE
7859   189E DB FE               IN      A,($FE)                 ; keyrows SPACE to V.
7860   18A0 1F                  RRA
7861   18A1 FB                  EI                              ; Enable Interrupts.
7862   18A2             
7863   18A2 D2 F0 04            JP      NC,L04F0                ; jump if SPACE pressed to Error 3
7864   18A5                                                     ; 'BREAK pressed'.
7865   18A5             
7866   18A5 08                  EX      AF,AF'                  ;;
7867   18A6 C9                  RET                             ; return.
7868   18A7             
7869   18A7             ; ---
7870   18A7             ; READ BYTES FROM TAPE
7871   18A7             ; ---
7872   18A7             
7873   18A7 F3          L18A7:  DI
7874   18A8 FD E5               PUSH    IY
7875   18AA E5                  PUSH    HL
7876   18AB FD E1               POP     IY
7877   18AD 21 92 18            LD      HL,L1892
7878   18B0 E5                  PUSH    HL
7879   18B1 61                  LD      H,C
7880   18B2 08                  EX      AF,AF'                  ; save carry
7881   18B3 AF                  XOR     A
7882   18B4 4F                  LD      C,A
7883   18B5             
7884   18B5 C0          L18B5:  RET     NZ
7885   18B6             
7886   18B6 2E 00       L18B6:  LD      L,$00
7887   18B8 06 B8       L18B8:  LD      B,$B8
7888   18BA             
7889   18BA CD 11 19            CALL    L1911                   ;
7890   18BD             
7891   18BD 30 F6               JR      NC,L18B5                ;
7892   18BF             
7893   18BF 3E DF               LD      A,$DF
7894   18C1 B8                  CP      B
7895   18C2 30 F2               JR      NC,L18B6                ;
7896   18C4             
7897   18C4 2C                  INC     L
7898   18C5 20 F1               JR      NZ,L18B8                ;
7899   18C7             
7900   18C7 06 CF       L18C7:  LD      B,$CF
7901   18C9             
7902   18C9 CD 15 19            CALL    L1915                   ;
7903   18CC             
7904   18CC 30 E7               JR      NC,L18B5                ;
7905   18CE             
7906   18CE 78                  LD      A,B
7907   18CF FE D8               CP      $D8
7908   18D1 30 F4               JR      NC,L18C7                ;
7909   18D3             
7910   18D3 CD 15 19            CALL    L1915                   ;
7911   18D6 D0                  RET     NC
7912   18D7             
7913   18D7 CD FC 18            CALL    L18FC                   ;
7914   18DA D0                  RET     NC
7915   18DB             
7916   18DB 3F                  CCF
7917   18DC C0                  RET     NZ
7918   18DD             
7919   18DD 18 11               JR      L18F0                   ;
7920   18DF             
7921   18DF             ; ---
7922   18DF             
7923   18DF 08          L18DF:  EX      AF,AF'
7924   18E0 30 05               JR      NC,L18E7                ;
7925   18E2 FD 75 00            LD      (IY+$00),L
7926   18E5 18 05               JR      L18EC                   ;
7927   18E7             
7928   18E7             ; ---
7929   18E7             
7930   18E7 FD 7E 00    L18E7:  LD      A,(IY+$00)
7931   18EA AD                  XOR     L
7932   18EB C0                  RET     NZ
7933   18EC             
7934   18EC FD 23       L18EC:  INC     IY
7935   18EE 1B                  DEC     DE
7936   18EF 08                  EX      AF,AF'
7937   18F0             
7938   18F0 CD FC 18    L18F0:  CALL    L18FC                   ;
7939   18F3             
7940   18F3 D0                  RET     NC
7941   18F4             
7942   18F4 7A                  LD      A,D
7943   18F5 B3                  OR      E
7944   18F6 20 E7               JR      NZ,L18DF                ;
7945   18F8             
7946   18F8 7C                  LD      A,H
7947   18F9 FE 01               CP      $01
7948   18FB C9          L18FB:  RET
7949   18FC             
7950   18FC             ; ---
7951   18FC             
7952   18FC 2E 01       L18FC:  LD      L,$01
7953   18FE 06 C7       L18FE:  LD      B,$C7
7954   1900             
7955   1900 CD 11 19            CALL    L1911                   ;
7956   1903             
7957   1903 D0                  RET     NC
7958   1904             
7959   1904 3E E2               LD      A,$E2
7960   1906 B8                  CP      B
7961   1907 CB 15               RL      L
7962   1909 D2 FE 18            JP      NC,L18FE                ;
7963   190C             
7964   190C 7C                  LD      A,H
7965   190D AD                  XOR     L
7966   190E 67                  LD      H,A
7967   190F 37                  SCF
7968   1910 C9                  RET
7969   1911             
7970   1911             ; ---
7971   1911             
7972   1911 CD 15 19    L1911:  CALL    L1915                   ;
7973   1914 D0                  RET     NC
7974   1915             
7975   1915 3E 14       L1915:  LD      A,$14
7976   1917 3D          L1917:  DEC     A
7977   1918             
7978   1918 20 FD               JR      NZ,L1917                ;
7979   191A             
7980   191A A7                  AND     A
7981   191B             
7982   191B 04          L191B:  INC     B
7983   191C C8                  RET     Z
7984   191D             
7985   191D 3E 7F               LD      A,$7F
7986   191F DB FE               IN      A,($FE)
7987   1921 1F                  RRA
7988   1922 D0                  RET     NC
7989   1923             
7990   1923 A9                  XOR     C
7991   1924 E6 10               AND     $10
7992   1926 28 F3               JR      Z,L191B                 ;
7993   1928             
7994   1928 79                  LD      A,C
7995   1929 2F                  CPL
7996   192A 4F                  LD      C,A
7997   192B 37                  SCF
7998   192C C9                  RET
7999   192D             
8000   192D             ; ---------------
8001   192D             ; THE 'SAVE' WORD
8002   192D             ; ---------------
8003   192D             ; SAVE name.
8004   192D             ; Saves entire dictionary in RAM on a dictionary type cassette file with the
8005   192D             ; given name. Makes a noise on the internal loudspeaker.
8006   192D             
8007   192D 53 41 56    L192D:  DEFM    "SAV"                   ; 'name field'
8008   1930 C5                  DEFB    'E' + $80
8009   1931             
8010   1931 6F 16               DEFW    L166F                   ; 'link field'
8011   1933             
8012   1933 04          L1933:  DEFB    $04                     ; 'name length field'
8013   1934             
8014   1934 C3 0E       L1934:  DEFW    L0EC3                   ; 'code field' - docolon
8015   1936             
8016   1936             ; ---
8017   1936             
8018   1936 10 1A               DEFW    L1A10                   ; word to pad
8019   1938 4F 1A               DEFW    L1A4F                   ;  prep some sort of header?
8020   193A B6 04               DEFW    L04B6                   ; exit
8021   193C             
8022   193C             ; ----------------
8023   193C             ; THE 'BSAVE' WORD
8024   193C             ; ----------------
8025   193C             ; BSAVE name
8026   193C             ; (m, n -- )
8027   193C             ; Save n bytes to bytes type cassette file 'name' starting at
8028   193C             ; address m.
8029   193C             ;
8030   193C             
8031   193C 42 53 41 56 L193C:  DEFM    "BSAV"                  ; 'name field'
8032   1940 C5                  DEFB    'E' + $80
8033   1941             
8034   1941 33 19               DEFW    L1933                   ; 'link field'
8035   1943             
8036   1943 05          L1943:  DEFB    $05                     ; 'name length field'
8037   1944             
8038   1944 C3 0E       L1944:  DEFW    L0EC3                   ; 'code field' - docolon
8039   1946             
8040   1946             ; ---
8041   1946             
8042   1946 3D 1A       L1946:  DEFW    L1A3D                   ; prep_header
8043   1948 4F 1A               DEFW    L1A4F                   ; prep some sort of header?
8044   194A B6 04               DEFW    L04B6                   ; exit
8045   194C             
8046   194C             
8047   194C             ; ----------------
8048   194C             ; THE 'BLOAD' WORD
8049   194C             ; ----------------
8050   194C             ; BLOAD name
8051   194C             ; (m, n -- )
8052   194C             ; Load at most n bytes of bytes type cassette file 'name' starting at
8053   194C             ; address m. ERROR 10 if the file has more than m bytes.
8054   194C             ;
8055   194C 42 4C 4F 41 L194C:  DEFM    "BLOA"                  ; 'name field'
8056   1950 C4                  DEFB    'D' + $80
8057   1951             
8058   1951 43 19               DEFW    L1943                   ; 'link field'
8059   1953             
8060   1953 05          L1953:  DEFB    $05                     ; 'name length field'
8061   1954             
8062   1954 C3 0E       L1954:  DEFW    L0EC3                   ; 'code field' - docolon
8063   1956             
8064   1956             ; ---
8065   1956             
8066   1956 3D 1A               DEFW    L1A3D                   ; prep_header
8067   1958 74 1A               DEFW    L1A74                   ; ld-bytes??
8068   195A B8 1A               DEFW    L1AB8                   ; tapeFF
8069   195C B6 04               DEFW    L04B6                   ; exit
8070   195E             
8071   195E             ; -----------------
8072   195E             ; THE 'VERIFY' WORD
8073   195E             ; -----------------
8074   195E             ; VERIFY name
8075   195E             ; (  --  )
8076   195E             ; Verifies dictionary on tape against dictionary in RAM.
8077   195E             
8078   195E 56 45 52 49 L195E:  DEFM    "VERIF"                 ; 'name field'
8078   1962 46 
8079   1963 D9                  DEFB    'Y' + $80
8080   1964             
8081   1964 53 19               DEFW    L1953                   ; 'link field'
8082   1966             
8083   1966 06          L1966:  DEFB    $06                     ; 'name length field'
8084   1967             
8085   1967 C3 0E       L1967:  DEFW    L0EC3                   ; 'code field' - docolon
8086   1969             
8087   1969             ; ---
8088   1969             
8089   1969 10 1A       L1969:  DEFW    L1A10                   ; word to pad
8090   196B 71 12               DEFW    L1271                   ; branch
8091   196D 0F 00       L196D:  DEFW    $000F                   ; 15 bytes forward to L197D
8092   196F             
8093   196F             
8094   196F             ; ------------------
8095   196F             ; THE 'BVERIFY' WORD
8096   196F             ; ------------------
8097   196F             ; BVERIFY name
8098   196F             ; (m, n -- )
8099   196F             ; Verify at most n bytes of bytes type cassette file 'name' against
8100   196F             ; RAM starting at address m. ERROR 10 if the file has more than m bytes.
8101   196F             ; For BLOAD and BVERIFY, if m = 0, then starts at the address the bytes
8102   196F             ; were saved from. If n = 0, then doesn't care about the length.
8103   196F             ;
8104   196F             
8105   196F 42 56 45 52 L196F:  DEFM    "BVERIF"                ; 'name field'
8105   1973 49 46 
8106   1975 D9                  DEFB    'Y' + $80
8107   1976             
8108   1976 66 19               DEFW    L1966                   ; 'link field'
8109   1978             
8110   1978 07          L1978:  DEFB    $07                     ; 'name length field'
8111   1979             
8112   1979 C3 0E       L1979:  DEFW    L0EC3                   ; 'code field' - docolon
8113   197B             
8114   197B             ; ---
8115   197B             
8116   197B 3D 1A       L197B:  DEFW    L1A3D                   ; prep_header
8117   197D             
8118   197D             ; ->
8119   197D             
8120   197D 74 1A       L197D:  DEFW    L1A74                   ; ld_bytes
8121   197F BE 1A               DEFW    L1ABE                   ; tape00
8122   1981 B6 04               DEFW    L04B6                   ; exit
8123   1983             
8124   1983             ; ---------------
8125   1983             ; THE 'LOAD' WORD
8126   1983             ; ---------------
8127   1983             ; LOAD name
8128   1983             ; (  --  )
8129   1983             ; Searches for a dictionary cassette file 'name' and loads it in, adding it
8130   1983             ; to end of old dictionary. Writes to the screen all files found on tape.
8131   1983             ; For best results turn the tone control on the tape recorder right down
8132   1983             ; (as bass as possible) and the volume control to about three-quarters
8133   1983             ; maximum.
8134   1983             
8135   1983 4C 4F 41    L1983:  DEFM    "LOA"                   ; 'name field'
8136   1986 C4                  DEFB    'D' + $80
8137   1987             
8138   1987 78 19               DEFW    L1978                   ; 'link field'
8139   1989             
8140   1989 04          L1989:  DEFB    $04                     ; 'name length field'
8141   198A             
8142   198A C3 0E       L198A:  DEFW    L0EC3                   ; 'code field' - docolon
8143   198C             
8144   198C             ; ---
8145   198C             
8146   198C 10 1A       L198C:  DEFW    L1A10                   ; word to pad
8147   198E             
8148   198E 0E 1A               DEFW    L1A0E                   ; end-forth.
8149   1990             
8150   1990 2A 37 3C            LD      HL,($3C37)              ; STKBOT
8151   1993 22 0E 23            LD      ($230E),HL
8152   1996 EB                  EX      DE,HL
8153   1997 21 CC FF            LD      HL,$FFCC
8154   199A 39                  ADD     HL,SP
8155   199B A7                  AND     A
8156   199C ED 52               SBC     HL,DE
8157   199E 22 0C 23            LD      ($230C),HL
8158   19A1             
8159   19A1 CD B9 04            CALL    L04B9                   ; forth
8160   19A4             
8161   19A4 74 1A       L19A4:  DEFW    L1A74                   ; ld_bytes
8162   19A6 B8 1A               DEFW    L1AB8                   ; tapeFF
8163   19A8 0E 1A               DEFW    L1A0E                   ; end-forth.
8164   19AA             
8165   19AA ED 4B 37 3C         LD      BC,($3C37)              ; STKBOT
8166   19AE 21 50 3C            LD      HL,$3C50
8167   19B1 22 01 27            LD      ($2701),HL
8168   19B4 23                  INC     HL
8169   19B5 22 09 27            LD      ($2709),HL
8170   19B8 2A 25 23            LD      HL,($2325)
8171   19BB 09                  ADD     HL,BC
8172   19BC 22 37 3C            LD      ($3C37),HL              ; STKBOT
8173   19BF 21 AF C3            LD      HL,$C3AF
8174   19C2 09                  ADD     HL,BC
8175   19C3 22 0B 27            LD      ($270B),HL
8176   19C6 ED 5B 29 23         LD      DE,($2329)
8177   19CA 19                  ADD     HL,DE
8178   19CB ED 5B 4C 3C         LD      DE,($3C4C)
8179   19CF 22 4C 3C            LD      ($3C4C),HL
8180   19D2 C5                  PUSH    BC
8181   19D3 D5                  PUSH    DE
8182   19D4             
8183   19D4             
8184   19D4 ED 73 0D 27 L19D4:  LD      ($270D),SP
8185   19D8 CD 04 15            CALL    L1504                   ;
8186   19DB C1                  POP     BC
8187   19DC E1                  POP     HL
8188   19DD CB 7E       L19DD:  BIT     7,(HL)
8189   19DF 23                  INC     HL
8190   19E0 28 FB               JR      Z,L19DD                 ;
8191   19E2 23                  INC     HL
8192   19E3 23                  INC     HL
8193   19E4 71                  LD      (HL),C
8194   19E5 23                  INC     HL
8195   19E6 70                  LD      (HL),B
8196   19E7 2A 37 3C            LD      HL,($3C37)              ; STKBOT
8197   19EA 01 0C 00            LD      BC,$000C                ; allow twelve bytes for underflow.
8198   19ED 09                  ADD     HL,BC
8199   19EE 22 3B 3C            LD      ($3C3B),HL              ; SPARE
8200   19F1 FD E9               JP      (IY)                    ; to 'next'.
8201   19F3             
8202   19F3             ; ---
8203   19F3             
8204   19F3 C3 0E       L19F3:  DEFW    L0EC3                   ; 'code field' - docolon
8205   19F5 4B 10               DEFW    L104B                   ; stk_data
8206   19F7 20                  DEFB    $20                     ; a space delimiter
8207   19F8 AB 05               DEFW    L05AB                   ; word          (to pad)
8208   19FA 0E 1A               DEFW    L1A0E                   ; end-forth.
8209   19FC             
8210   19FC             ; ---
8211   19FC             
8212   19FC CD 2E 0F    L19FC:  CALL    L0F2E                   ; blank stack
8213   19FF             
8214   19FF DF          L19FF:  RST     18H                     ; pop word DE
8215   1A00             
8216   1A00 3E 20               LD      A,$20                   ;
8217   1A02 12                  LD      (DE),A                  ;
8218   1A03 11 0C 27            LD      DE,$270C                ;
8219   1A06 21 FF 27            LD      HL,$27FF                ;
8220   1A09             
8221   1A09 CD FA 07            CALL    L07FA                   ; routine SPACE_FILL
8222   1A0C             
8223   1A0C FD E9               JP      (IY)                    ; to 'next'.
8224   1A0E             
8225   1A0E             ; ---
8226   1A0E             
8227   1A0E             
8228   1A0E FB 18       L1A0E:  DEFW    L18FB                   ; location of RET instruction.
8229   1A10             
8230   1A10             ; ---
8231   1A10             
8232   1A10 C3 0E       L1A10:  DEFW    L0EC3                   ; 'code field' - docolon
8233   1A12 F3 19               DEFW    L19F3                   ; word to pad
8234   1A14 0E 1A               DEFW    L1A0E                   ; end-forth.
8235   1A16             
8236   1A16 AF                  XOR     A                       ;
8237   1A17 32 01 23            LD      ($2301),A               ;
8238   1A1A 21 51 3C            LD      HL,$3C51                ;
8239   1A1D 22 0E 23            LD      ($230E),HL              ;
8240   1A20 EB                  EX      DE,HL                   ;
8241   1A21 2A 37 3C            LD      HL,($3C37)              ; STKBOT
8242   1A24 A7                  AND     A                       ;
8243   1A25 ED 52               SBC     HL,DE
8244   1A27 22 0C 23            LD      ($230C),HL
8245   1A2A 2A 4C 3C            LD      HL,($3C4C)
8246   1A2D 22 10 23            LD      ($2310),HL
8247   1A30 21 31 3C            LD      HL,$3C31                ; CURRENT
8248   1A33 11 12 23            LD      DE,$2312
8249   1A36 01 08 00            LD      BC,$0008                ;
8250   1A39             
8251   1A39 ED B0               LDIR                            ;
8252   1A3B             
8253   1A3B FD E9               JP      (IY)                    ; to 'next'.
8254   1A3D             
8255   1A3D             ; ---
8256   1A3D             
8257   1A3D             
8258   1A3D C3 0E       L1A3D:  DEFW    L0EC3                   ; 'code field' - docolon
8259   1A3F F3 19               DEFW    L19F3                   ; word to pad
8260   1A41 11 10               DEFW    L1011                   ; stack next word
8261   1A43 0C 23               DEFW    $230C                   ; header location
8262   1A45 C1 08               DEFW    L08C1                   ; !     store int at address
8263   1A47 11 10               DEFW    L1011                   ; stack next word
8264   1A49 0E 23               DEFW    $230E                   ; header location
8265   1A4B C1 08               DEFW    L08C1                   ; !     store int at address
8266   1A4D B6 04               DEFW    L04B6                   ; exit
8267   1A4F             
8268   1A4F             ; ---
8269   1A4F             
8270   1A4F 51 1A       L1A4F:  DEFW    L1A51
8271   1A51             
8272   1A51 3A 02 23    L1A51:  LD      A,($2302)               ; length of word in pad
8273   1A54 A7                  AND     A
8274   1A55 28 5F               JR      Z,L1AB6                 ; forward if null.
8275   1A57             
8276   1A57 2A 0C 23            LD      HL,($230C)
8277   1A5A 7C                  LD      A,H
8278   1A5B B5                  OR      L
8279   1A5C 28 58               JR      Z,L1AB6                 ;
8280   1A5E             
8281   1A5E E5                  PUSH    HL
8282   1A5F 11 19 00            LD      DE,$0019                ;
8283   1A62 21 01 23            LD      HL,$2301                ; pad using ROM priority
8284   1A65 4A                  LD      C,D                     ;
8285   1A66             
8286   1A66 CD 20 18            CALL    L1820                   ;
8287   1A69             
8288   1A69 D1                  POP     DE
8289   1A6A 2A 0E 23            LD      HL,($230E)              ;
8290   1A6D 0E FF               LD      C,$FF
8291   1A6F             
8292   1A6F CD 20 18            CALL    L1820                   ;
8293   1A72             
8294   1A72 FD E9               JP      (IY)                    ; to 'next'.
8295   1A74             
8296   1A74             ; ---
8297   1A74             ; ld_bytes
8298   1A74             ; ---
8299   1A74             
8300   1A74 76 1A       L1A74:  DEFW    L1A76
8301   1A76             
8302   1A76 11 19 00    L1A76:  LD      DE,$0019
8303   1A79 21 1A 23            LD      HL,$231A
8304   1A7C 4A                  LD      C,D
8305   1A7D             
8306   1A7D 37                  SCF
8307   1A7E             
8308   1A7E CD A7 18            CALL    L18A7                   ;
8309   1A81             
8310   1A81 30 F3               JR      NC,L1A76                ; loop back until read
8311   1A83             
8312   1A83 11 1A 23            LD      DE,$231A
8313   1A86 1A                  LD      A,(DE)
8314   1A87 A7                  AND     A
8315   1A88 20 0B               JR      NZ,L1A95                ;
8316   1A8A             
8317   1A8A CD 08 18            CALL    L1808                   ; pr_inline
8318   1A8D             
8319   1A8D             ; ---
8320   1A8D             
8321   1A8D 0D          L1A8D:  DEFB    $0D                     ; newline
8322   1A8E 44 69 63 74         DEFM    "Dict"
8323   1A92 BA                  DEFB    ':' + $80               ;
8324   1A93             
8325   1A93 18 0A       L1A93:  JR      L1A9F                   ;
8326   1A95             
8327   1A95             ; ---
8328   1A95             
8329   1A95 CD 08 18    L1A95:  CALL    L1808                   ; pr_inline
8330   1A98             
8331   1A98 0D          L1A98:  DEFB    $0D                     ; newline
8332   1A99             
8333   1A99 42 79 74 65         DEFM    "Bytes"
8333   1A9D 73 
8334   1A9E BA                  DEFB    ':' + $80               ;
8335   1A9F             
8336   1A9F             ; ---
8337   1A9F             
8338   1A9F 21 01 23    L1A9F:  LD      HL,$2301
8339   1AA2 01 0B 0B            LD      BC,$0B0B
8340   1AA5 18 02               JR      L1AA9                   ;
8341   1AA7             
8342   1AA7             ; ---
8343   1AA7             
8344   1AA7 1A          L1AA7:  LD      A,(DE)
8345   1AA8 CF                  RST     08H                     ; print_ch
8346   1AA9             
8347   1AA9 1A          L1AA9:  LD      A,(DE)
8348   1AAA BE                  CP      (HL)
8349   1AAB 20 01               JR      NZ,L1AAE                ;
8350   1AAD 0D                  DEC     C
8351   1AAE             
8352   1AAE 23          L1AAE:  INC     HL
8353   1AAF 13                  INC     DE
8354   1AB0 10 F5               DJNZ    L1AA7                   ;
8355   1AB2             
8356   1AB2 20 C2               JR      NZ,L1A76                ;
8357   1AB4 FD E9               JP      (IY)                    ; to 'next'.
8358   1AB6             
8359   1AB6             ; ---
8360   1AB6             
8361   1AB6 E7          L1AB6:  RST     20H                     ; Error 10
8362   1AB7 0A                  DEFB    $0A                     ; Tape error
8363   1AB8             
8364   1AB8             ; ---
8365   1AB8             ;
8366   1AB8             ; ---
8367   1AB8             
8368   1AB8 BA 1A       L1AB8:  DEFW    L1ABA                   ; headerless 'code field'
8369   1ABA             
8370   1ABA 06 FF       L1ABA:  LD      B,$FF
8371   1ABC 18 12               JR      L1AD0                   ; forward to +->
8372   1ABE             
8373   1ABE             ; ---
8374   1ABE             ;
8375   1ABE             ; ---
8376   1ABE             
8377   1ABE C0 1A       L1ABE:  DEFW    L1AC0                   ; headerless 'code field'
8378   1AC0             
8379   1AC0 21 12 23    L1AC0:  LD      HL,$2312
8380   1AC3 11 2B 23            LD      DE,$232B
8381   1AC6 06 08               LD      B,$08
8382   1AC8             
8383   1AC8 1A          L1AC8:  LD      A,(DE)
8384   1AC9 13                  INC     DE
8385   1ACA BE                  CP      (HL)
8386   1ACB 23                  INC     HL
8387   1ACC 20 E8               JR      NZ,L1AB6                ; back to tape error
8388   1ACE             
8389   1ACE 10 F8               DJNZ    L1AC8                   ; back for all 8
8390   1AD0             
8391   1AD0             ; common code - B is $00 from above or $FF from previous.
8392   1AD0             
8393   1AD0 2A 0C 23    L1AD0:  LD      HL,($230C)
8394   1AD3 ED 5B 25 23         LD      DE,($2325)
8395   1AD7 7C                  LD      A,H
8396   1AD8 B5                  OR      L
8397   1AD9 28 04               JR      Z,L1ADF                 ; skip if zero
8398   1ADB             
8399   1ADB ED 52               SBC     HL,DE
8400   1ADD 38 D7               JR      C,L1AB6                 ; back to tape error
8401   1ADF             
8402   1ADF 2A 0E 23    L1ADF:  LD      HL,($230E)
8403   1AE2 7C                  LD      A,H
8404   1AE3 B5                  OR      L
8405   1AE4 20 03               JR      NZ,L1AE9                ; skip if zero
8406   1AE6 2A 27 23            LD      HL,($2327)
8407   1AE9             
8408   1AE9 0E FF       L1AE9:  LD      C,$FF
8409   1AEB CB 18               RR      B
8410   1AED             
8411   1AED CD A7 18            CALL    L18A7                   ;
8412   1AF0             
8413   1AF0 30 C4               JR      NC,L1AB6                ; back to report tape error
8414   1AF2             
8415   1AF2 FD E9               JP      (IY)                    ; to 'next'.
8416   1AF4             
8417   1AF4             ; ==========================================================
8418   1AF4             ; THE 'FLOATING POINT ARITHMETIC' ROUTINES
8419   1AF4             ; ==========================================================
8420   1AF4             
8421   1AF4             ; ---------------------
8422   1AF4             ; THE 'PREP_FP' ROUTINE
8423   1AF4             ; ---------------------
8424   1AF4             ; ( f1, f2 -- m1, m2 )
8425   1AF4             ; -> from add/mult/div
8426   1AF4             ; Entered with two floating point numbers on the stack.
8427   1AF4             ; The exponents are stored in the first two bytes of FP_WS and the third byte
8428   1AF4             ; is loaded with the manipulated result sign.
8429   1AF4             ; the two exponent locations on the Data Stack are blanked leaving just the
8430   1AF4             ; binary coded mantissas.
8431   1AF4             
8432   1AF4             ; Begin by clearing the first part of the workspace.
8433   1AF4             
8434   1AF4 01 0F 3C    L1AF4:  LD      BC,$3C0F                ; byte 15 of the 19 bytes at FP_WS
8435   1AF7             
8436   1AF7 AF                  XOR     A                       ; clear accumulator.
8437   1AF8             
8438   1AF8 02          L1AF8:  LD      (BC),A                  ; clear the workspace.
8439   1AF9 0D                  DEC     C                       ; decrement low byte of address.
8440   1AFA 20 FC               JR      NZ,L1AF8                ; and back until at $3C00
8441   1AFC             
8442   1AFC             ;
8443   1AFC             
8444   1AFC 2A 3B 3C            LD      HL,($3C3B)              ; fetch end of data stack+1 from SPARE.
8445   1AFF 11 FC FF            LD      DE,$FFFC                ; prepare  -4
8446   1B02             
8447   1B02 2B                  DEC     HL                      ; point to last byte of stack.
8448   1B03 4E                  LD      C,(HL)                  ; sign/exponent of (f2) to C.
8449   1B04 77                  LD      (HL),A                  ; replace with zero to take overflow.
8450   1B05             
8451   1B05 19                  ADD     HL,DE                   ; subtract four from address
8452   1B06             
8453   1B06             ; update system variable SPARE - this could be deferred.
8454   1B06             
8455   1B06 23                  INC     HL                      ; point to location after (f1).
8456   1B07 22 3B 3C            LD      ($3C3B),HL              ; update system variable SPARE
8457   1B0A 2B                  DEC     HL                      ; point to exponent of (f1)
8458   1B0B             
8459   1B0B 46                  LD      B,(HL)                  ; sign/exponent of (f1) to B.
8460   1B0C 77                  LD      (HL),A                  ; replace with zero.
8461   1B0D             
8462   1B0D             ; At this stage we have the sign/exponent of (f1) in B and the sign/exponent
8463   1B0D             ; of (f2) in C. The next section places the sign bit of (f1) in but 7 of A
8464   1B0D             ; and the sign bit of (f2) in bit 6 of A. The other bits are of no importance.
8465   1B0D             
8466   1B0D 79                  LD      A,C                     ; transfer C to A.
8467   1B0E 0F                  RRCA                            ; rotate sign bit to bit 6.
8468   1B0F A8                  XOR     B                       ; XOR B
8469   1B10 E6 7F               AND     $7F                     ; mask off bits to restore
8470   1B12 A8                  XOR     B                       ; bit 6 as it was, bit 7 of B to A.
8471   1B13             
8472   1B13 32 02 3C    L1B13   LD      ($3C02),A               ; FP_WS_02             see L1C2F
8473   1B16             
8474   1B16 CB B8               RES     7,B                     ; make both numbers
8475   1B18 CB B9               RES     7,C                     ; positive
8476   1B1A             
8477   1B1A ED 43 00 3C         LD      ($3C00),BC              ; store the exponents at start of FP_WS
8478   1B1E             
8479   1B1E 23                  INC     HL                      ; point to (f2) again.
8480   1B1F EB                  EX      DE,HL                   ; transfer f2 pointer to DE, HL now -4
8481   1B20 19                  ADD     HL,DE                   ; subtract four to point HL at (f1)
8482   1B21 C9                  RET                             ; return.
8483   1B22             
8484   1B22             ; On exit, HL -> (f1), DE -> (f2), B = exponent of (f1), C = exponent of (f2).
8485   1B22             
8486   1B22             ; -----------------------------
8487   1B22             ; THE 'SHIFT_ADDEND' SUBROUTINE
8488   1B22             ; -----------------------------
8489   1B22             
8490   1B22 3E 09       L1B22:  LD      A,$09
8491   1B24 B8                  CP      B
8492   1B25 30 01               JR      NC,L1B28                ;
8493   1B27             
8494   1B27 47                  LD      B,A                     ; set shift counter to nine. i.e clear.
8495   1B28             
8496   1B28 0E 04       L1B28:  LD      C,$04                   ; four bytes
8497   1B2A 23                  INC     HL
8498   1B2B 23                  INC     HL
8499   1B2C 23                  INC     HL                      ; point to highest byte
8500   1B2D             
8501   1B2D AF                  XOR     A                       ; prepare to start with a blank nibble.
8502   1B2E             
8503   1B2E ED 67       L1B2E:  RRD                             ; A=0000 XXXX --> 7654->3210 =(HL)
8504   1B30                                                     ;          \_____<-______/
8505   1B30             
8506   1B30 2B                  DEC     HL                      ; point to next lower byte on Data Stack
8507   1B31 0D                  DEC     C                       ; decrement the byte counter.
8508   1B32 20 FA               JR      NZ,L1B2E                ; loop for all 4 bytes = 1 nibble shift
8509   1B34             
8510   1B34 23                  INC     HL                      ; set pointer to start of number again
8511   1B35 10 F1               DJNZ    L1B28                   ; decrement the shift counter and loop.
8512   1B37             
8513   1B37 C6 FB               ADD     A,$FB                   ; add minus five to last nibble lost
8514   1B39                                                     ; will set the carry flag if 5 or more.
8515   1B39             
8516   1B39 E5                  PUSH    HL                      ;; preserve pointer to start of addend.
8517   1B3A             
8518   1B3A 7E          L1B3A:  LD      A,(HL)                  ; fetch the pair of BCD nibbles.
8519   1B3B             
8520   1B3B 88                  ADC     A,B                     ; increment if carry set (B = 0)
8521   1B3C 27                  DAA                             ; Decimal Adjust Accumulator
8522   1B3D                                                     ; ($99 becomes $00 with carry set).
8523   1B3D             
8524   1B3D 77                  LD      (HL),A                  ; put nibbles back.
8525   1B3E 23                  INC     HL                      ; point to next significant pair of
8526   1B3F                                                     ; binary coded decimal digits.
8527   1B3F 38 F9               JR      C,L1B3A                 ; and ripple any rounding through.
8528   1B41             
8529   1B41 E1                  POP     HL                      ;; retrieve the pointer to start.
8530   1B42 C9                  RET                             ; return.
8531   1B43             
8532   1B43             ; ---------------------------
8533   1B43             ; THE 'BCD NEGATE' SUBROUTINE
8534   1B43             ; ---------------------------
8535   1B43             ; Negates the four byte, 8 nibble, binary coded decimal on the Data Stack.
8536   1B43             ; For example -123.456
8537   1B43             ; is prepared as $00 $12 $34 $56
8538   1B43             ; and negated as $99 $87 $65 $34
8539   1B43             
8540   1B43 C5          L1B43:  PUSH    BC                      ; preserve the two
8541   1B44 E5                  PUSH    HL                      ; main registers used.
8542   1B45             
8543   1B45 06 04               LD      B,$04                   ; set byte counter to four.
8544   1B47 A7                  AND     A                       ; clear carry.
8545   1B48             
8546   1B48 3E 00       L1B48:  LD      A,$00                   ; set to zero without disturbing carry.
8547   1B4A             
8548   1B4A 9E                  SBC     A,(HL)                  ; subtract pair of digits
8549   1B4B 27                  DAA                             ; Decimal Adjust Accumulator
8550   1B4C                                                     ; adjusts as if from 100 setting carry
8551   1B4C             
8552   1B4C 77                  LD      (HL),A                  ; place adjusted decimals back.
8553   1B4D             
8554   1B4D 23                  INC     HL                      ; next location on Data Stack.
8555   1B4E             
8556   1B4E 10 F8               DJNZ    L1B48                   ; loop for all 4 bytes.
8557   1B50             
8558   1B50 E1                  POP     HL                      ; restore the
8559   1B51 C1                  POP     BC                      ; saved registers.
8560   1B52             
8561   1B52 C9                  RET                             ; return.
8562   1B53             
8563   1B53             ; ------------------------------
8564   1B53             ; THE 'BCD OPERATION' SUBROUTINE
8565   1B53             ; ------------------------------
8566   1B53             ; This versatile routine performs the binary coded decimal addition of
8567   1B53             ; two floating point values with C = 1.
8568   1B53             ; The second entry point is used in multiplication.
8569   1B53             
8570   1B53             ; ->
8571   1B53 0E 01       L1B53:  LD      C,$01                   ; signal the operation is addition.
8572   1B55             
8573   1B55             ; -> (with c!=0)
8574   1B55 E5          L1B55:  PUSH    HL                      ; preserve the
8575   1B56 D5                  PUSH    DE                      ; three main
8576   1B57 C5                  PUSH    BC                      ; registers.
8577   1B58             
8578   1B58 79                  LD      A,C                     ; treat C as a binary coded decimal.
8579   1B59 E6 0F               AND     $0F                     ; isolate the right-hand nibble.
8580   1B5B 47                  LD      B,A                     ; transfer R.H. nibble to B
8581   1B5C             
8582   1B5C A9                  XOR     C                       ; A now has L.H. nibble.
8583   1B5D 4F                  LD      C,A                     ; place in C.
8584   1B5E             
8585   1B5E             ; this next magical routine converts the two BCD digits to binary.
8586   1B5E             ; imagine we started with ninety-nine so C = 1001 0000  and B = 0000 1001
8587   1B5E             
8588   1B5E 0F                  RRCA                            ;    0100 1000
8589   1B5F 0F                  RRCA                            ;    0010 0100
8590   1B60 81                  ADD     A,C                     ;    1011 0100
8591   1B61 0F                  RRCA                            ;    0101 1010
8592   1B62 80                  ADD     A,B                     ;    0110 0011  = 99 binary
8593   1B63             
8594   1B63 4F                  LD      C,A                     ;    binary multiplier in C
8595   1B64             
8596   1B64             ; note that for simple addition C is unchanged and still contains 1.
8597   1B64             
8598   1B64 06 04               LD      B,$04                   ; four bytes to consider
8599   1B66 AF                  XOR     A                       ; clear accumulator ensuring no initial
8600   1B67                                                     ; carry is fed into the loop.
8601   1B67             
8602   1B67             ; loop
8603   1B67             
8604   1B67 C5          L1B67:  PUSH    BC                      ; push the counters.
8605   1B68 D5                  PUSH    DE                      ; push the (f2) pointer
8606   1B69             
8607   1B69 E5                  PUSH    HL                      ; push the (f1) pointer.
8608   1B6A             
8609   1B6A 86                  ADD     A,(HL)                  ; add any running carry to (f1) cell.
8610   1B6B             
8611   1B6B 27                  DAA                             ; Decimal Adjust Accumulator
8612   1B6C                                                     ; possibly setting carry.
8613   1B6C             
8614   1B6C 6F                  LD      L,A                     ; result to L
8615   1B6D 1A                  LD      A,(DE)                  ; fetch (f2) cell value.
8616   1B6E 26 00               LD      H,$00                   ; set high bytes H and D to
8617   1B70 54                  LD      D,H                     ; zero without disturbing carry
8618   1B71             
8619   1B71 CB 14               RL      H                       ; now pick up any carry in H.
8620   1B73             
8621   1B73 A7                  AND     A                       ; test (f2) cell value.
8622   1B74 28 1B               JR      Z,L1B91                 ; skip forward to just store the carry
8623   1B76                                                     ; result if the addend value is zero.
8624   1B76             
8625   1B76 5F                  LD      E,A                     ; else DE now holds cell value.
8626   1B77             
8627   1B77 CB 39       L1B77:  SRL     C                       ; shift counter C   0->76543210->C
8628   1B79             
8629   1B79 30 08               JR      NC,L1B83                ; skip addition if no carry.
8630   1B7B             
8631   1B7B             ; else perform HL=HL+DE in BCD.
8632   1B7B             
8633   1B7B 7D                  LD      A,L                     ; fetch low byte of (f1) cell.
8634   1B7C 83                  ADD     A,E                     ; add to low byte of (f2) cell.
8635   1B7D 27                  DAA                             ; DAA.
8636   1B7E 6F                  LD      L,A                     ; result in L and carry.
8637   1B7F             
8638   1B7F 7C                  LD      A,H                     ; fetch high byte possibly 1 from carry
8639   1B80 8A                  ADC     A,D                     ; add in any carry from above (D=0)
8640   1B81 27                  DAA                             ; comes into play with multiplication.
8641   1B82 67                  LD      H,A                     ; result to H.
8642   1B83             
8643   1B83 0C          L1B83:  INC     C                       ; test the counter for zero.
8644   1B84 0D                  DEC     C                       ; (will be if addition)
8645   1B85 28 0A               JR      Z,L1B91                 ; forward when zero ->
8646   1B87             
8647   1B87             ; else is BCD multiplication - double the DE value.
8648   1B87             
8649   1B87 7B                  LD      A,E                     ;
8650   1B88 87                  ADD     A,A                     ;
8651   1B89 27                  DAA                             ;
8652   1B8A 5F                  LD      E,A                     ;
8653   1B8B             
8654   1B8B 7A                  LD      A,D                     ;
8655   1B8C 8F                  ADC     A,A                     ;
8656   1B8D 27                  DAA                             ;
8657   1B8E 57                  LD      D,A                     ;
8658   1B8F             
8659   1B8F 18 E6               JR      L1B77                   ; back to continue multiplying by C.
8660   1B91             
8661   1B91             ; ---
8662   1B91             
8663   1B91             ; ->
8664   1B91 EB          L1B91:  EX      DE,HL                   ; transfer result to DE.
8665   1B92             
8666   1B92 E1                  POP     HL                      ; pop (f1) cell pointer
8667   1B93 73                  LD      (HL),E                  ; insert result.
8668   1B94 7A                  LD      A,D                     ; transfer any carry to A
8669   1B95 D1                  POP     DE                      ; pop the (f2) pointer
8670   1B96 C1                  POP     BC                      ; pop the counter, and initial C value.
8671   1B97             
8672   1B97 13                  INC     DE                      ; increment (f2) cell pointer.
8673   1B98 23                  INC     HL                      ; increment (f1) cell pointer.
8674   1B99             
8675   1B99 10 CC               DJNZ    L1B67                   ; loop back for all 4 bytes.
8676   1B9B             
8677   1B9B C1                  POP     BC                      ; restore the
8678   1B9C D1                  POP     DE                      ; three main
8679   1B9D E1                  POP     HL                      ; registers.
8680   1B9E             
8681   1B9E C9                  RET                             ; return.
8682   1B9F             
8683   1B9F             ; -------------
8684   1B9F             ; THE 'F-' WORD
8685   1B9F             ; -------------
8686   1B9F             ; ( f1, f2 -- f1-f2 )
8687   1B9F             ; Subtracts top two floating point numbers.
8688   1B9F             ;
8689   1B9F             ; just flip the sign and then do floating point addition.
8690   1B9F             
8691   1B9F 46          L1B9F:  DEFB    'F'                     ; 'name field'
8692   1BA0 AD                  DEFB    '-' + $80
8693   1BA1             
8694   1BA1 89 19               DEFW    L1989                   ; 'link field'
8695   1BA3             
8696   1BA3 02          L1BA3:  DEFB    $02                     ; 'name length field'
8697   1BA4             
8698   1BA4 C3 0E       L1BA4:  DEFW    L0EC3                   ; 'code field' - docolon
8699   1BA6             
8700   1BA6             ; ---
8701   1BA6             
8702   1BA6 0F 1D       L1BA6:  DEFW    L1D0F                   ; fnegate
8703   1BA8 0E 1A               DEFW    L1A0E                   ; end-forth.
8704   1BAA             
8705   1BAA 18 07               JR      L1BB3                   ; forward to floating point addition.
8706   1BAC             
8707   1BAC             ; -------------
8708   1BAC             ; THE 'F+' WORD
8709   1BAC             ; -------------
8710   1BAC             ; ( f1, f2 -- f1+f2 )
8711   1BAC             ; Adds top two floating point numbers.
8712   1BAC             
8713   1BAC 46          L1BAC:  DEFB    'F'                     ; 'name field'
8714   1BAD AB                  DEFB    '+' + $80
8715   1BAE             
8716   1BAE A3 1B               DEFW    L1BA3                   ; 'link field'
8717   1BB0             
8718   1BB0 02          L1BB0:  DEFB    $02                     ; 'name length field'
8719   1BB1             
8720   1BB1 B3 1B       L1BB1:  DEFW    L1BB3                   ; 'code field'
8721   1BB3             
8722   1BB3             ; ---
8723   1BB3             
8724   1BB3 CD F4 1A    L1BB3:  CALL    L1AF4                   ; PREP_FP
8725   1BB6             
8726   1BB6 79                  LD      A,C                     ; take exponent of second number (f2).
8727   1BB7 90                  SUB     B                       ; subtract exponent of first (f1).
8728   1BB8 F5                  PUSH    AF                      ; save result flags.
8729   1BB9             
8730   1BB9 30 06               JR      NC,L1BC1                ; forward if second number >= first.
8731   1BBB             
8732   1BBB EB                  EX      DE,HL                   ; else swap the pointers.
8733   1BBC ED 44               NEG                             ; negate negative result.
8734   1BBE DD 70 00            LD      (IX+$00),B              ; place B in FP_WS_0  (was C).
8735   1BC1             
8736   1BC1 47          L1BC1:  LD      B,A                     ; put positive subtraction result in B.
8737   1BC2             
8738   1BC2 C4 22 1B            CALL    NZ,L1B22                ; routine SHIFT_ADDEND aligns digits if
8739   1BC5                                                     ; exponents are not equal.
8740   1BC5             
8741   1BC5 F1                  POP     AF                      ; retrieve subtraction result flags.
8742   1BC6 30 01               JR      NC,L1BC9                ; forward is second number was >= first.
8743   1BC8             
8744   1BC8 EB                  EX      DE,HL                   ; else switch the pointers back.
8745   1BC9             
8746   1BC9 06 02       L1BC9:  LD      B,$02                   ; two floating point numbers to consider
8747   1BCB             
8748   1BCB DD 4E 02            LD      C,(IX+$02)              ; FP_WS_02
8749   1BCE             
8750   1BCE CB 11       L1BCE:  RL      C                       ; test sign bit first bit 7 then bit 6.
8751   1BD0             
8752   1BD0 DC 43 1B            CALL    C,L1B43                 ; routine BCD neg if carry
8753   1BD3             
8754   1BD3 EB                  EX      DE,HL                   ; switch number pointers.
8755   1BD4             
8756   1BD4 10 F8               DJNZ    L1BCE                   ; decrement counter and loop if second
8757   1BD6                                                     ; number still to do.
8758   1BD6             
8759   1BD6 CD 53 1B            CALL    L1B53                   ; the BCD ADDITION routine.
8760   1BD9             
8761   1BD9             ; The routine preserves main registers so HL->(f1), DE->(f2) and B is zero.
8762   1BD9             
8763   1BD9 1B                  DEC     DE                      ; point to highest byte of result which
8764   1BDA                                                     ; could be $99 if one negative number
8765   1BDA                                                     ; involved or $98 if two negatives.
8766   1BDA             
8767   1BDA 1A                  LD      A,(DE)                  ; fetch the result sign byte.
8768   1BDB C6 68               ADD     A,$68                   ; add $68 causing carry if negative.
8769   1BDD CB 18               RR      B                       ; pick up carry in bit 7 of B, which
8770   1BDF                                                     ; was zero so zero flag now set if none.
8771   1BDF             
8772   1BDF DD 70 02            LD      (IX+$02),B              ; place result sign in  FP_WS_02
8773   1BE2             
8774   1BE2 C4 43 1B            CALL    NZ,L1B43                ; routine BCD_NEGATE if negative result.
8775   1BE5             
8776   1BE5             ; if the
8777   1BE5             
8778   1BE5 1A          L1BE5:  LD      A,(DE)                  ;
8779   1BE6 A7                  AND     A                       ;
8780   1BE7             
8781   1BE7 20 19               JR      NZ,L1C02                ;
8782   1BE9             
8783   1BE9             ; else A is zero.
8784   1BE9             
8785   1BE9 DD 35 00            DEC     (IX+$00)                ; decrement the result exponent FP_WS_00
8786   1BEC DD 35 00            DEC     (IX+$00)                ; as two nibbles will be moved at a time
8787   1BEF             
8788   1BEF D5                  PUSH    DE                      ; save pointer to 4th byte
8789   1BF0             
8790   1BF0 62                  LD      H,D                     ; make HL
8791   1BF1 6B                  LD      L,E                     ; equal to DE
8792   1BF2 2B                  DEC     HL                      ; minus one.
8793   1BF3             
8794   1BF3 01 FF 03            LD      BC,$03FF                ; counter for three bytes. The $FF
8795   1BF6                                                     ; value ensures B is not affected by
8796   1BF6                                                     ; the LDD instruction. Also A is 0.
8797   1BF6             
8798   1BF6 B6          L1BF6:  OR      (HL)                    ; (detects if the three bytes are zero)
8799   1BF7             
8800   1BF7 ED A8               LDD                             ; copy HL contents one location higher
8801   1BF9                                                     ; to that addressed by DE. Also dec bc.
8802   1BF9             
8803   1BF9 10 FB               DJNZ    L1BF6                   ; repeat for all 3 bytes
8804   1BFB             
8805   1BFB EB                  EX      DE,HL                   ; make HL address lowest location
8806   1BFC 70                  LD      (HL),B                  ; and insert a zero into vacated byte.
8807   1BFD             
8808   1BFD D1                  POP     DE                      ; restore the pointer to the 4th byte.
8809   1BFE             
8810   1BFE 20 E5               JR      NZ,L1BE5                ; jump back to the end test if something
8811   1C00                                                     ; was being shifted through.
8812   1C00             
8813   1C00             ; else all four bytes are zero - i.e. the result of the addition is zero.
8814   1C00             
8815   1C00 FD E9               JP      (IY)                    ; to 'next'.
8816   1C02             
8817   1C02             ; ---
8818   1C02             
8819   1C02             ; The branch was to here, from the end test above, when the 4th byte had been
8820   1C02             ; filled.
8821   1C02             ; Before joining common code, ensure that the initial block move will be
8822   1C02             ; ineffective.
8823   1C02             
8824   1C02 54          L1C02:  LD      D,H                     ; make DE the same as HL - the source
8825   1C03 5D                  LD      E,L                     ; and the destination are the same.
8826   1C04             
8827   1C04             ; -> common code from mult and above.
8828   1C04             
8829   1C04 D5          L1C04:  PUSH    DE                      ; save start location.
8830   1C05             
8831   1C05 01 04 00            LD      BC,$0004                ; 4 bytes to consider.
8832   1C08 ED B0               LDIR                            ; block move sets DE to one past dest.
8833   1C0A             
8834   1C0A E1                  POP     HL                      ; restore start of source.
8835   1C0B             
8836   1C0B 1B                  DEC     DE                      ; DE now addresses 4th byte.
8837   1C0C             
8838   1C0C 1A          L1C0C:  LD      A,(DE)                  ; load the 4th byte to accumulator.
8839   1C0D A7                  AND     A                       ; test for zero.
8840   1C0E             
8841   1C0E 28 11               JR      Z,L1C21                 ; skip forward if so.
8842   1C10             
8843   1C10 FE 10               CP      $10                     ; test if one or two nibbles populated
8844   1C12                                                     ; setting carry for a single nibble.
8845   1C12             
8846   1C12 9F                  SBC     A,A                     ; $00 for two nibbles, $FF for one.
8847   1C13 3C                  INC     A                       ; $01                  $00
8848   1C14 3C                  INC     A                       ; $02 for two nibbles, $01 for one :-)
8849   1C15             
8850   1C15 47                  LD      B,A                     ; nibble count to B.
8851   1C16 DD 86 00            ADD     A,(IX+$00)              ; add count to FP_WS_00 the result
8852   1C19 32 00 3C            LD      ($3C00),A               ; exponent and place back in FP_WS_00.
8853   1C1C             
8854   1C1C CD 22 1B            CALL    L1B22                   ; routine 'shift_addend' moves all the
8855   1C1F                                                     ; nibbles to the right.
8856   1C1F             
8857   1C1F 18 EB               JR      L1C0C                   ; back to pick up byte and then to
8858   1C21                                                     ; next routine.
8859   1C21             
8860   1C21             ; ---
8861   1C21             
8862   1C21             ; now test for a result that is too large or too small.
8863   1C21             ; Note. these results may have arisen from multiplication or addition.
8864   1C21             
8865   1C21 3A 00 3C    L1C21:  LD      A,($3C00)               ; fetch result exponent from FP_WS_00
8866   1C24             
8867   1C24 3D                  DEC     A                       ; decrement?
8868   1C25 FE BF               CP      $BF                     ; compare lower limit
8869   1C27 3C                  INC     A                       ; increment?
8870   1C28             
8871   1C28 30 13               JR      NC,L1C3D                ; forward if less to ZERO_RSLT
8872   1C2A             
8873   1C2A FE 80               CP      $80                     ; compare upper limit
8874   1C2C 30 0D               JR      NC,L1C3B                ; forward to Error 8 - Overflow
8875   1C2E             
8876   1C2E 47                  LD      B,A                     ; save unsigned exponent in B.
8877   1C2F             
8878   1C2F             ; now combine result sign and the exponent.
8879   1C2F             ; for addition then FP_WS_02 contains either $80 or $00 and most of what
8880   1C2F             ; follows does not apply.
8881   1C2F             ; for multiplication then bit 7 is sign of (f1) bit 6 is sign of (f2).
8882   1C2F             
8883   1C2F 3A 02 3C    L1C2F   LD      A,($3C02)               ; FP_WS_02           see L1B13
8884   1C32             
8885   1C32 4F                  LD      C,A                     ; save a copy in C
8886   1C33 17                  RLA                             ; rotate bit 6 to 7
8887   1C34 A9                  XOR     C                       ; XOR bit 7 - minus * minus = a plus.
8888   1C35 E6 80               AND     $80                     ; only interested in bit 7.
8889   1C37 A8                  XOR     B                       ; combine with exponent.
8890   1C38 12                  LD      (DE),A                  ; and place in sign/exp on Data Stack.
8891   1C39             
8892   1C39 FD E9               JP      (IY)                    ; to 'next'.
8893   1C3B             
8894   1C3B             ; ---
8895   1C3B             
8896   1C3B E7          L1C3B:  RST     20H                     ; Error 8.
8897   1C3C 08                  DEFB    $08                     ; Overflow in floating-point arithmetic.
8898   1C3D             
8899   1C3D             ; ------------------------------------
8900   1C3D             ; THE 'ZERO RESULT' TERMINATING BRANCH
8901   1C3D             ; ------------------------------------
8902   1C3D             
8903   1C3D 01 00 04    L1C3D:  LD      BC,$0400                ; count 4 bytes, fill byte is zero.
8904   1C40             
8905   1C40 71          L1C40:  LD      (HL),C                  ; insert a zero.
8906   1C41 23                  INC     HL                      ; next location.
8907   1C42 10 FC               DJNZ    L1C40                   ; repeat for all 4 bytes.
8908   1C44             
8909   1C44 FD E9               JP      (IY)                    ; to 'next'.
8910   1C46             
8911   1C46             
8912   1C46             
8913   1C46             
8914   1C46             ; -------------
8915   1C46             ; THE 'F*' WORD
8916   1C46             ; -------------
8917   1C46             ; (f1, f2 -- f1*f2)
8918   1C46             ; Multiplies top two floating point numbers and leaves result on the stack.
8919   1C46             
8920   1C46 46          L1C46:  DEFB    'F'                     ; 'name field'
8921   1C47 AA                  DEFB    '*' + $80
8922   1C48             
8923   1C48 B0 1B               DEFW    L1BB0                   ; 'link field'
8924   1C4A             
8925   1C4A 02          L1C4A:  DEFB    $02                     ; 'name length field'
8926   1C4B             
8927   1C4B 4D 1C       L1C4B:  DEFW    L1C4D                   ; 'code field'
8928   1C4D             
8929   1C4D             ; ---
8930   1C4D             
8931   1C4D CD F4 1A    L1C4D:  CALL    L1AF4                   ; routine PREP_FP prepares the two
8932   1C50                                                     ; numbers on the Data Stack placing the
8933   1C50                                                     ; exponents and signs in FP_WS.
8934   1C50             
8935   1C50 AF                  XOR     A                       ; set accumulator to zero.
8936   1C51 B8                  CP      B                       ; compare to exponent of (f1).
8937   1C52 9F                  SBC     A,A                     ; $00 if zero or $FF
8938   1C53 A1                  AND     C                       ; combine with exponent of (f2).
8939   1C54             
8940   1C54 28 E7               JR      Z,L1C3D                 ; back if zero to exit via ZERO_RSLT.
8941   1C56             
8942   1C56 E5                  PUSH    HL                      ; save pointer to first number - result.
8943   1C57             
8944   1C57 01 02 3C            LD      BC,$3C02                ; set BC to location before free
8945   1C5A                                                     ; workspace set to zero by PREP_FP.
8946   1C5A             
8947   1C5A C5                  PUSH    BC                      ; push onto machine stack.
8948   1C5B             
8949   1C5B 06 03               LD      B,$03                   ; count three bytes - six nibbles.
8950   1C5D             
8951   1C5D 4E          L1C5D:  LD      C,(HL)                  ; fetch BCD pair to C
8952   1C5E 23                  INC     HL                      ; address more significant pair.
8953   1C5F             
8954   1C5F E3                  EX      (SP),HL                 ; Data Stack pointer to machine stack,
8955   1C60                                                     ; workspace pointer to HL.
8956   1C60 23                  INC     HL                      ; increment workspace pointer.
8957   1C61             
8958   1C61 CD 55 1B            CALL    L1B55                   ; routine BCD_OP multiplies C by each
8959   1C64                                                     ; of the 4 bytes of (f2) laying the
8960   1C64                                                     ; result down in workspace at HL
8961   1C64             
8962   1C64 E3                  EX      (SP),HL                 ; swap in multiplier pointer to HL,
8963   1C65                                                     ; workspace pointer to machine stack.
8964   1C65             
8965   1C65 10 F6               DJNZ    L1C5D                   ; repeat for all three bytes.
8966   1C67             
8967   1C67 ED 4B 00 3C         LD      BC,($3C00)              ; fetch raw exponents from FP_WS_00/01
8968   1C6B 78                  LD      A,B                     ; add the exponents
8969   1C6C 81                  ADD     A,C                     ; together.
8970   1C6D             
8971   1C6D D6 42               SUB     $42                     ; adjust for sign
8972   1C6F             
8973   1C6F 32 00 3C            LD      ($3C00),A               ; put the result back in FP_WS_00.
8974   1C72             
8975   1C72 E1                  POP     HL                      ; pop workspace pointer to HL.
8976   1C73 D1                  POP     DE                      ; pop result pointer to DE.
8977   1C74             
8978   1C74 18 8E               JR      L1C04                   ; back to common code to copy the 4
8979   1C76                                                     ; bytes from the workspace to the
8980   1C76                                                     ; Data Stack and then set exponent
8981   1C76                                                     ; and sign.
8982   1C76             
8983   1C76             ; -------------
8984   1C76             ; THE 'F/' WORD
8985   1C76             ; -------------
8986   1C76             ; ( f1, f2 -- f1/f2 )
8987   1C76             ; Divides two floating point numbers.
8988   1C76             
8989   1C76 46          L1C76:  DEFB    'F'                     ; 'name field'
8990   1C77 AF                  DEFB    '/' + $80
8991   1C78             
8992   1C78 4A 1C               DEFW    L1C4A                   ; 'link field'
8993   1C7A             
8994   1C7A 02          L1C7A:  DEFB    $02                     ; 'name length field'
8995   1C7B             
8996   1C7B 7D 1C       L1C7B:  DEFW    L1C7D                   ; 'code field'
8997   1C7D             
8998   1C7D             ;---
8999   1C7D             
9000   1C7D CD F4 1A    L1C7D:  CALL    L1AF4                   ; routine PREP_FP prepares the two
9001   1C80                                                     ; numbers (f1) and (f2) placing the
9002   1C80                                                     ; raw exponents in the first two
9003   1C80                                                     ; locations of workspace, the signs in
9004   1C80                                                     ; the next location and clearing the
9005   1C80                                                     ; sixteen remaining locations.
9006   1C80                                                     ; This must be the one that uses them
9007   1C80                                                     ; all.
9008   1C80             
9009   1C80 AF                  XOR     A                       ; set accumulator to zero.
9010   1C81 B8                  CP      B                       ; compare to exponent of dividend (f1).
9011   1C82 28 B9               JR      Z,L1C3D                 ; forward if zero to ZERO_RSLT.
9012   1C84             
9013   1C84 B9                  CP      C                       ; compare to exponent of divisor (f2).
9014   1C85 28 B4               JR      Z,L1C3B                 ; back if zero to Error 8 - Overflow.
9015   1C87                                                     ; division by zero.
9016   1C87             
9017   1C87             ; HL points to first number on stack, DE to second.
9018   1C87             
9019   1C87 13                  INC     DE                      ;
9020   1C88 13                  INC     DE                      ;
9021   1C89 1A                  LD      A,(DE)                  ; get first two digits to A
9022   1C8A 1B                  DEC     DE                      ;
9023   1C8B 1B                  DEC     DE                      ; back to first
9024   1C8C             
9025   1C8C C6 01               ADD     A,$01                   ; add one (e.g. 99 would give 9A)
9026   1C8E 27                  DAA                             ; adjust  (e.g. $9A would be $00 carry)
9027   1C8F 08                  EX      AF,AF'                  ; save the flags
9028   1C90 EB                  EX      DE,HL                   ; HL now points to divisor
9029   1C91             
9030   1C91 CD 43 1B            CALL    L1B43                   ; routine BCD negate the divisor
9031   1C94             
9032   1C94 EB                  EX      DE,HL                   ; point back again.
9033   1C95 E5                  PUSH    HL                      ; save pointer to first - the result.
9034   1C96             
9035   1C96 11 10 3C            LD      DE,$3C10                ; destination FP_WS_10
9036   1C99 01 04 00            LD      BC,$0004                ; four bytes
9037   1C9C             
9038   1C9C ED B0               LDIR                            ; copy to end of FP_WS
9039   1C9E                                                     ; (+ one byte of list_ws)
9040   1C9E             
9041   1C9E EB                  EX      DE,HL                   ; HL points to last cell plus one.
9042   1C9F 2B                  DEC     HL                      ; Now points to last byte copied.
9043   1CA0             
9044   1CA0 06 05               LD      B,$05                   ; count 5.
9045   1CA2             
9046   1CA2             ; loop
9047   1CA2             
9048   1CA2 D5          L1CA2:  PUSH    DE                      ;
9049   1CA3 7E                  LD      A,(HL)                  ;
9050   1CA4 2B                  DEC     HL                      ;
9051   1CA5 5E                  LD      E,(HL)                  ;
9052   1CA6             
9053   1CA6 08                  EX      AF,AF'                  ;
9054   1CA7 4F                  LD      C,A                     ;
9055   1CA8 08                  EX      AF,AF'                  ;
9056   1CA9             
9057   1CA9 0C                  INC     C                       ;
9058   1CAA 0D                  DEC     C                       ;
9059   1CAB 20 03               JR      NZ,L1CB0                ;
9060   1CAD             
9061   1CAD 5F                  LD      E,A                     ;
9062   1CAE 18 1B               JR      L1CCB                   ;
9063   1CB0             
9064   1CB0             ; ---
9065   1CB0             
9066   1CB0 C5          L1CB0:  PUSH    BC                      ;
9067   1CB1 06 02               LD      B,$02                   ;
9068   1CB3             
9069   1CB3 16 10       L1CB3:  LD      D,$10                   ;
9070   1CB5             
9071   1CB5 CB 23       L1CB5:  SLA     E                       ;
9072   1CB7 17                  RLA                             ;
9073   1CB8 CB 12               RL      D                       ;
9074   1CBA 30 F9               JR      NC,L1CB5                ;
9075   1CBC             
9076   1CBC 14                  INC     D                       ;
9077   1CBD             
9078   1CBD 91          L1CBD:  SUB     C                       ;
9079   1CBE 27                  DAA                             ;
9080   1CBF 1C                  INC     E                       ;
9081   1CC0 30 FB               JR      NC,L1CBD                ;
9082   1CC2             
9083   1CC2 15                  DEC     D                       ;
9084   1CC3 20 F8               JR      NZ,L1CBD                ;
9085   1CC5             
9086   1CC5 81                  ADD     A,C                     ;
9087   1CC6 27                  DAA                             ;
9088   1CC7 1D                  DEC     E                       ;
9089   1CC8 10 E9               DJNZ    L1CB3                   ;
9090   1CCA             
9091   1CCA C1                  POP     BC                      ;
9092   1CCB             
9093   1CCB 4B          L1CCB:  LD      C,E                     ;
9094   1CCC D1                  POP     DE                      ;
9095   1CCD 0C                  INC     C                       ;
9096   1CCE 0D                  DEC     C                       ;
9097   1CCF 28 17               JR      Z,L1CE8                 ;
9098   1CD1             
9099   1CD1 E5                  PUSH    HL                      ;
9100   1CD2 2B                  DEC     HL                      ;
9101   1CD3 2B                  DEC     HL                      ;
9102   1CD4             
9103   1CD4 CD 55 1B            CALL    L1B55                   ; bcd_op mult
9104   1CD7             
9105   1CD7 D5                  PUSH    DE                      ;
9106   1CD8             
9107   1CD8 11 FB FF            LD      DE,$FFFB                ; -4
9108   1CDB 19                  ADD     HL,DE                   ;
9109   1CDC             
9110   1CDC 11 03 3C            LD      DE,$3C03                ; FP_WS_03
9111   1CDF 79                  LD      A,C                     ;
9112   1CE0 12                  LD      (DE),A                  ;
9113   1CE1             
9114   1CE1 CD 53 1B            CALL    L1B53                   ; bcd_op add
9115   1CE4             
9116   1CE4 D1                  POP     DE                      ;
9117   1CE5 E1                  POP     HL                      ;
9118   1CE6 23                  INC     HL                      ;
9119   1CE7 04                  INC     B                       ;
9120   1CE8             
9121   1CE8 10 B8       L1CE8:  DJNZ    L1CA2                   ;
9122   1CEA             
9123   1CEA 2A 00 3C            LD      HL,($3C00)              ; FP_WS
9124   1CED 7C                  LD      A,H                     ;
9125   1CEE 95                  SUB     L                       ;
9126   1CEF C6 40               ADD     A,$40                   ;
9127   1CF1             
9128   1CF1 21 08 3C            LD      HL,$3C08                ; FP_WS
9129   1CF4 47                  LD      B,A                     ;
9130   1CF5 3A 0B 3C            LD      A,($3C0B)               ;
9131   1CF8 A7                  AND     A                       ;
9132   1CF9 20 03               JR      NZ,L1CFE                ;
9133   1CFB             
9134   1CFB 05                  DEC     B                       ;
9135   1CFC 05                  DEC     B                       ;
9136   1CFD 2B                  DEC     HL                      ;
9137   1CFE             
9138   1CFE DD 70 00    L1CFE:  LD      (IX+$00),B              ;
9139   1D01             
9140   1D01 D1                  POP     DE                      ;
9141   1D02             
9142   1D02 C3 04 1C            JP      L1C04                   ; back to common code to copy the 4
9143   1D05                                                     ; bytes from the workspace to the
9144   1D05                                                     ; Data Stack and then set exponent
9145   1D05                                                     ; and sign.
9146   1D05             
9147   1D05             ; ------------------
9148   1D05             ; THE 'FNEGATE' WORD
9149   1D05             ; ------------------
9150   1D05             ; ( f -- -f )
9151   1D05             ; Floating point negation.
9152   1D05             ; Toggle the sign bit unless the number is zero (four zero bytes).
9153   1D05             
9154   1D05 46 4E 45 47 L1D05:  DEFM    "FNEGAT"                ; 'name field'
9154   1D09 41 54 
9155   1D0B C5                  DEFB    'E' + $80
9156   1D0C             
9157   1D0C 7A 1C               DEFW    L1C7A                   ; 'link field'
9158   1D0E             
9159   1D0E 07          L1D0E:  DEFB    $07                     ; 'name length field'
9160   1D0F             
9161   1D0F 11 1D       L1D0F:  DEFW    L1D11                   ; 'code field'
9162   1D11             
9163   1D11             ; ---
9164   1D11             
9165   1D11 DF          L1D11:  RST     18H                     ; pop word from data stack to DE.
9166   1D12             
9167   1D12 7A                  LD      A,D                     ; exponent byte to A.
9168   1D13 A7                  AND     A                       ; test for zero.
9169   1D14 28 02               JR      Z,L1D18                 ; forward if so to leave undisturbed.
9170   1D16             
9171   1D16 EE 80               XOR     $80                     ; else toggle the sign bit
9172   1D18             
9173   1D18 57          L1D18:  LD      D,A                     ; exponent byte to D.
9174   1D19 D7                  RST     10H                     ; push word DE on data stack.
9175   1D1A             
9176   1D1A FD E9               JP      (IY)                    ; to 'next'.
9177   1D1C             
9178   1D1C             ; --------------
9179   1D1C             ; THE 'INT' WORD
9180   1D1C             ; --------------
9181   1D1C             ; (f -- n)
9182   1D1C             ; Converts signed floating point number to signed single length integer.
9183   1D1C             ; Truncates towards zero.
9184   1D1C             ; Result in range -32768 to 32767
9185   1D1C             
9186   1D1C 49 4E       L1D1C:  DEFM    "IN"                    ; 'name field'
9187   1D1E D4                  DEFB    'T' + $80
9188   1D1F             
9189   1D1F 0E 1D               DEFW    L1D0E                   ; 'link field'
9190   1D21             
9191   1D21 03          L1D21:  DEFB    $03                     ; 'name length field'
9192   1D22             
9193   1D22 24 1D       L1D22:  DEFW    L1D24                   ; 'code field'
9194   1D24             
9195   1D24             ; ---
9196   1D24             
9197   1D24 2A 3B 3C    L1D24:  LD      HL,($3C3B)              ; fetch value from SPARE.
9198   1D27 2B                  DEC     HL                      ; now points to end of data stack.
9199   1D28             
9200   1D28 11 00 00            LD      DE,$0000                ; initialize 16-bit result.
9201   1D2B             
9202   1D2B 7E          L1D2B:  LD      A,(HL)                  ; fetch the exponent byte.
9203   1D2C             
9204   1D2C 07                  RLCA                            ; double exponent moving sign bit to 0.
9205   1D2D             
9206   1D2D FE 82               CP      $82                     ; compare exponent to plus 1.
9207   1D2F 38 14               JR      C,L1D45                 ; forward if number is smaller than 1
9208   1D31                                                     ; to return the result DE.
9209   1D31             
9210   1D31             ; else the number is >= 1.0
9211   1D31             
9212   1D31 AF                  XOR     A                       ; clear accumulator.
9213   1D32 2B                  DEC     HL                      ; point to the first pair of BCD digits.
9214   1D33             
9215   1D33 CD 32 07            CALL    L0732                   ; call shift_fp
9216   1D36             
9217   1D36 23                  INC     HL                      ; point to exponent.
9218   1D37             
9219   1D37 EB                  EX      DE,HL                   ; pointer to DE, integer to HL.
9220   1D38             
9221   1D38             ; before adding in the nibble from the mantissa, multiply any previous result
9222   1D38             ; by ten.
9223   1D38             
9224   1D38 44                  LD      B,H                     ; make a copy of HL in BC.
9225   1D39 4D                  LD      C,L                     ;
9226   1D3A             
9227   1D3A 29                  ADD     HL,HL                   ; * 2
9228   1D3B 29                  ADD     HL,HL                   ; * 4
9229   1D3C 09                  ADD     HL,BC                   ; * 5
9230   1D3D 29                  ADD     HL,HL                   ; * 10
9231   1D3E             
9232   1D3E 4F                  LD      C,A                     ; leftmost nibble from mantissa to C.
9233   1D3F 06 00               LD      B,$00                   ; prepare to add just the nibble.
9234   1D41 09                  ADD     HL,BC                   ; add into the result.
9235   1D42 EB                  EX      DE,HL                   ; switch back to DE
9236   1D43             
9237   1D43 18 E6               JR      L1D2B                   ; back to loop.
9238   1D45             
9239   1D45             ; ---
9240   1D45             
9241   1D45 2B          L1D45:  DEC     HL                      ; skip redundant components of Floating
9242   1D46 2B                  DEC     HL                      ; Point number addressing the
9243   1D47                                                     ; lower two bytes on the data stack.
9244   1D47 72                  LD      (HL),D                  ; insert high-order byte first.
9245   1D48 2B                  DEC     HL                      ; point to location beneath.
9246   1D49 73                  LD      (HL),E                  ; insert low-order byte.
9247   1D4A             
9248   1D4A 11 94 0D            LD      DE,L0D94                ; 'pos' addr.
9249   1D4D             
9250   1D4D C3 BF 04            JP      L04BF                   ; exit via 'pos' routine.
9251   1D50             
9252   1D50             ; -----------------
9253   1D50             ; THE 'UFLOAT' WORD
9254   1D50             ; -----------------
9255   1D50             ; (un -- f)
9256   1D50             ; Converts unsigned single length integer to floating point.
9257   1D50             ; e.g. 65535 16 bit number converted to  32-bit float 8-bit sign/exponent
9258   1D50             ; 6-nibble BCD mantissa.    $45  6 5 5 3 5 0
9259   1D50             
9260   1D50 55 46 4C 4F L1D50:  DEFM    "UFLOA"                 ; 'name field'
9260   1D54 41 
9261   1D55 D4                  DEFB    'T' +$80
9262   1D56             
9263   1D56 21 1D               DEFW    L1D21                   ; 'link field'
9264   1D58             
9265   1D58 06          L1D58:  DEFB    $06                     ; 'name length field'
9266   1D59             
9267   1D59 5B 1D       L1D59:  DEFW    L1D5B                   ; 'code field'
9268   1D5B             
9269   1D5B             ; ---
9270   1D5B             
9271   1D5B DF          L1D5B:  RST     18H                     ; pop word off stack to DE
9272   1D5C EB                  EX      DE,HL                   ; now HL
9273   1D5D             
9274   1D5D 01 00 10            LD      BC,$1000                ; count 16 bits, set C to zero.
9275   1D60 51                  LD      D,C
9276   1D61 59                  LD      E,C                     ; initialize DE to zero.
9277   1D62             
9278   1D62 29          L1D62:  ADD     HL,HL                   ; double
9279   1D63             
9280   1D63 7B                  LD      A,E                     ;
9281   1D64 8F                  ADC     A,A                     ; add carry to low byte
9282   1D65 27                  DAA                             ; adjust
9283   1D66 5F                  LD      E,A                     ;
9284   1D67             
9285   1D67 7A                  LD      A,D                     ;
9286   1D68 8F                  ADC     A,A                     ; add carry to high byte
9287   1D69 27                  DAA                             ; adjust
9288   1D6A 57                  LD      D,A                     ;
9289   1D6B             
9290   1D6B CB 11               RL      C                       ; pick up overflow
9291   1D6D 10 F3               DJNZ    L1D62                   ; loop  back for 16 bits
9292   1D6F             
9293   1D6F D7                  RST     10H                     ; DE to Data stack.
9294   1D70             
9295   1D70 16 46               LD      D,$46                   ; exponent byte   +6
9296   1D72 59                  LD      E,C                     ; low byte
9297   1D73             
9298   1D73 D7                  RST     10H                     ; higher word of float to stack.
9299   1D74             
9300   1D74 2B                  DEC     HL                      ; point to
9301   1D75 2B                  DEC     HL                      ; lower on stack
9302   1D76             
9303   1D76 CD 40 07            CALL    L0740                   ; normalize routine.
9304   1D79             
9305   1D79 FD E9               JP      (IY)                    ; to 'next'.
9306   1D7B             
9307   1D7B             ; -------------------
9308   1D7B             ; THE 'CHARACTER SET'
9309   1D7B             ; -------------------
9310   1D7B             ; The 96 ASCII character bitmaps are copied to RAM during initialization and
9311   1D7B             ; the 8x8 characters can afterwards be redefined by the user.
9312   1D7B             ; Some ROM space is saved by supplying the blank top line of most characters
9313   1D7B             ; and in case of the middle range (capitals with no descenders) the bottom
9314   1D7B             ; line as well. Only the final copyright symbol is held in ROM as an 8x8
9315   1D7B             ; character.
9316   1D7B             
9317   1D7B             
9318   1D7B             ; $20 - Character: ' '          CHR$(32)
9319   1D7B             
9320   1D7B 00          L1D7B:  DEFB    %00000000
9321   1D7C 00                  DEFB    %00000000
9322   1D7D 00                  DEFB    %00000000
9323   1D7E 00                  DEFB    %00000000
9324   1D7F 00                  DEFB    %00000000
9325   1D80 00                  DEFB    %00000000
9326   1D81 00                  DEFB    %00000000
9327   1D82             
9328   1D82             ; $21 - Character: '!'          CHR$(33)
9329   1D82             
9330   1D82 10                  DEFB    %00010000
9331   1D83 10                  DEFB    %00010000
9332   1D84 10                  DEFB    %00010000
9333   1D85 10                  DEFB    %00010000
9334   1D86 00                  DEFB    %00000000
9335   1D87 10                  DEFB    %00010000
9336   1D88 00                  DEFB    %00000000
9337   1D89             
9338   1D89             ; $22 - Character: '"'          CHR$(34)
9339   1D89             
9340   1D89 24                  DEFB    %00100100
9341   1D8A 24                  DEFB    %00100100
9342   1D8B 00                  DEFB    %00000000
9343   1D8C 00                  DEFB    %00000000
9344   1D8D 00                  DEFB    %00000000
9345   1D8E 00                  DEFB    %00000000
9346   1D8F 00                  DEFB    %00000000
9347   1D90             
9348   1D90             ; $23 - Character: '#'          CHR$(35)
9349   1D90             
9350   1D90 24                  DEFB    %00100100
9351   1D91 7E                  DEFB    %01111110
9352   1D92 24                  DEFB    %00100100
9353   1D93 24                  DEFB    %00100100
9354   1D94 7E                  DEFB    %01111110
9355   1D95 24                  DEFB    %00100100
9356   1D96 00                  DEFB    %00000000
9357   1D97             
9358   1D97             ; $24 - Character: '$'          CHR$(36)
9359   1D97             
9360   1D97 08                  DEFB    %00001000
9361   1D98 3E                  DEFB    %00111110
9362   1D99 28                  DEFB    %00101000
9363   1D9A 3E                  DEFB    %00111110
9364   1D9B 0A                  DEFB    %00001010
9365   1D9C 3E                  DEFB    %00111110
9366   1D9D 08                  DEFB    %00001000
9367   1D9E             
9368   1D9E             ; $25 - Character: '%'          CHR$(37)
9369   1D9E             
9370   1D9E 62                  DEFB    %01100010
9371   1D9F 64                  DEFB    %01100100
9372   1DA0 08                  DEFB    %00001000
9373   1DA1 10                  DEFB    %00010000
9374   1DA2 26                  DEFB    %00100110
9375   1DA3 46                  DEFB    %01000110
9376   1DA4 00                  DEFB    %00000000
9377   1DA5             
9378   1DA5             ; $26 - Character: '&'          CHR$(38)
9379   1DA5             
9380   1DA5 10                  DEFB    %00010000
9381   1DA6 28                  DEFB    %00101000
9382   1DA7 10                  DEFB    %00010000
9383   1DA8 2A                  DEFB    %00101010
9384   1DA9 44                  DEFB    %01000100
9385   1DAA 3A                  DEFB    %00111010
9386   1DAB 00                  DEFB    %00000000
9387   1DAC             
9388   1DAC             ; $27 - Character: '''          CHR$(39)
9389   1DAC             
9390   1DAC 08                  DEFB    %00001000
9391   1DAD 10                  DEFB    %00010000
9392   1DAE 00                  DEFB    %00000000
9393   1DAF 00                  DEFB    %00000000
9394   1DB0 00                  DEFB    %00000000
9395   1DB1 00                  DEFB    %00000000
9396   1DB2 00                  DEFB    %00000000
9397   1DB3             
9398   1DB3             ; $28 - Character: '('          CHR$(40)
9399   1DB3             
9400   1DB3 04                  DEFB    %00000100
9401   1DB4 08                  DEFB    %00001000
9402   1DB5 08                  DEFB    %00001000
9403   1DB6 08                  DEFB    %00001000
9404   1DB7 08                  DEFB    %00001000
9405   1DB8 04                  DEFB    %00000100
9406   1DB9 00                  DEFB    %00000000
9407   1DBA             
9408   1DBA             ; $29 - Character: ')'          CHR$(42)
9409   1DBA             
9410   1DBA 20                  DEFB    %00100000
9411   1DBB 10                  DEFB    %00010000
9412   1DBC 10                  DEFB    %00010000
9413   1DBD 10                  DEFB    %00010000
9414   1DBE 10                  DEFB    %00010000
9415   1DBF 20                  DEFB    %00100000
9416   1DC0 00                  DEFB    %00000000
9417   1DC1             
9418   1DC1             ; $2A - Character: '*'          CHR$(42)
9419   1DC1             
9420   1DC1 00                  DEFB    %00000000
9421   1DC2 14                  DEFB    %00010100
9422   1DC3 08                  DEFB    %00001000
9423   1DC4 3E                  DEFB    %00111110
9424   1DC5 08                  DEFB    %00001000
9425   1DC6 14                  DEFB    %00010100
9426   1DC7 00                  DEFB    %00000000
9427   1DC8             
9428   1DC8             ; $2B - Character: '+'          CHR$(43)
9429   1DC8             
9430   1DC8 00                  DEFB    %00000000
9431   1DC9 08                  DEFB    %00001000
9432   1DCA 08                  DEFB    %00001000
9433   1DCB 3E                  DEFB    %00111110
9434   1DCC 08                  DEFB    %00001000
9435   1DCD 08                  DEFB    %00001000
9436   1DCE 00                  DEFB    %00000000
9437   1DCF             
9438   1DCF             ; $2C - Character: ','          CHR$(44)
9439   1DCF             
9440   1DCF 00                  DEFB    %00000000
9441   1DD0 00                  DEFB    %00000000
9442   1DD1 00                  DEFB    %00000000
9443   1DD2 00                  DEFB    %00000000
9444   1DD3 08                  DEFB    %00001000
9445   1DD4 08                  DEFB    %00001000
9446   1DD5 10                  DEFB    %00010000
9447   1DD6             
9448   1DD6             ; $2D - Character: '-'          CHR$(45)
9449   1DD6             
9450   1DD6 00                  DEFB    %00000000
9451   1DD7 00                  DEFB    %00000000
9452   1DD8 00                  DEFB    %00000000
9453   1DD9 3E                  DEFB    %00111110
9454   1DDA 00                  DEFB    %00000000
9455   1DDB 00                  DEFB    %00000000
9456   1DDC 00                  DEFB    %00000000
9457   1DDD             
9458   1DDD             ; $2E - Character: '.'          CHR$(46)
9459   1DDD             
9460   1DDD 00                  DEFB    %00000000
9461   1DDE 00                  DEFB    %00000000
9462   1DDF 00                  DEFB    %00000000
9463   1DE0 00                  DEFB    %00000000
9464   1DE1 18                  DEFB    %00011000
9465   1DE2 18                  DEFB    %00011000
9466   1DE3 00                  DEFB    %00000000
9467   1DE4             
9468   1DE4             ; $2F - Character: '/'          CHR$(47)
9469   1DE4             
9470   1DE4 00                  DEFB    %00000000
9471   1DE5 02                  DEFB    %00000010
9472   1DE6 04                  DEFB    %00000100
9473   1DE7 08                  DEFB    %00001000
9474   1DE8 10                  DEFB    %00010000
9475   1DE9 20                  DEFB    %00100000
9476   1DEA 00                  DEFB    %00000000
9477   1DEB             
9478   1DEB             ; $30 - Character: '0'          CHR$(48)
9479   1DEB             
9480   1DEB 3C                  DEFB    %00111100
9481   1DEC 46                  DEFB    %01000110
9482   1DED 4A                  DEFB    %01001010
9483   1DEE 52                  DEFB    %01010010
9484   1DEF 62                  DEFB    %01100010
9485   1DF0 3C                  DEFB    %00111100
9486   1DF1 00                  DEFB    %00000000
9487   1DF2             
9488   1DF2             ; $31 - Character: '1'          CHR$(49)
9489   1DF2             
9490   1DF2 18                  DEFB    %00011000
9491   1DF3 28                  DEFB    %00101000
9492   1DF4 08                  DEFB    %00001000
9493   1DF5 08                  DEFB    %00001000
9494   1DF6 08                  DEFB    %00001000
9495   1DF7 3E                  DEFB    %00111110
9496   1DF8 00                  DEFB    %00000000
9497   1DF9             
9498   1DF9             ; $32 - Character: '2'          CHR$(50)
9499   1DF9             
9500   1DF9 3C                  DEFB    %00111100
9501   1DFA 42                  DEFB    %01000010
9502   1DFB 02                  DEFB    %00000010
9503   1DFC 3C                  DEFB    %00111100
9504   1DFD 40                  DEFB    %01000000
9505   1DFE 7E                  DEFB    %01111110
9506   1DFF 00                  DEFB    %00000000
9507   1E00             
9508   1E00             ; $33 - Character: '3'          CHR$(51)
9509   1E00             
9510   1E00 3C                  DEFB    %00111100
9511   1E01 42                  DEFB    %01000010
9512   1E02 0C                  DEFB    %00001100
9513   1E03 02                  DEFB    %00000010
9514   1E04 42                  DEFB    %01000010
9515   1E05 3C                  DEFB    %00111100
9516   1E06 00                  DEFB    %00000000
9517   1E07             
9518   1E07             ; $34 - Character: '4'          CHR$(52)
9519   1E07             
9520   1E07 08                  DEFB    %00001000
9521   1E08 18                  DEFB    %00011000
9522   1E09 28                  DEFB    %00101000
9523   1E0A 48                  DEFB    %01001000
9524   1E0B 7E                  DEFB    %01111110
9525   1E0C 08                  DEFB    %00001000
9526   1E0D 00                  DEFB    %00000000
9527   1E0E             
9528   1E0E             ; $35 - Character: '5'          CHR$(53)
9529   1E0E             
9530   1E0E 7E                  DEFB    %01111110
9531   1E0F 40                  DEFB    %01000000
9532   1E10 7C                  DEFB    %01111100
9533   1E11 02                  DEFB    %00000010
9534   1E12 42                  DEFB    %01000010
9535   1E13 3C                  DEFB    %00111100
9536   1E14 00                  DEFB    %00000000
9537   1E15             
9538   1E15             ; $36 - Character: '6'          CHR$(54)
9539   1E15             
9540   1E15 3C                  DEFB    %00111100
9541   1E16 40                  DEFB    %01000000
9542   1E17 7C                  DEFB    %01111100
9543   1E18 42                  DEFB    %01000010
9544   1E19 42                  DEFB    %01000010
9545   1E1A 3C                  DEFB    %00111100
9546   1E1B 00                  DEFB    %00000000
9547   1E1C             
9548   1E1C             ; $37 - Character: '7'          CHR$(55)
9549   1E1C             
9550   1E1C 7E                  DEFB    %01111110
9551   1E1D 02                  DEFB    %00000010
9552   1E1E 04                  DEFB    %00000100
9553   1E1F 08                  DEFB    %00001000
9554   1E20 10                  DEFB    %00010000
9555   1E21 10                  DEFB    %00010000
9556   1E22 00                  DEFB    %00000000
9557   1E23             
9558   1E23             ; $38 - Character: '8'          CHR$(56)
9559   1E23             
9560   1E23 3C                  DEFB    %00111100
9561   1E24 42                  DEFB    %01000010
9562   1E25 3C                  DEFB    %00111100
9563   1E26 42                  DEFB    %01000010
9564   1E27 42                  DEFB    %01000010
9565   1E28 3C                  DEFB    %00111100
9566   1E29 00                  DEFB    %00000000
9567   1E2A             
9568   1E2A             ; $39 - Character: '9'          CHR$(57)
9569   1E2A             
9570   1E2A 3C                  DEFB    %00111100
9571   1E2B 42                  DEFB    %01000010
9572   1E2C 42                  DEFB    %01000010
9573   1E2D 3E                  DEFB    %00111110
9574   1E2E 02                  DEFB    %00000010
9575   1E2F 3C                  DEFB    %00111100
9576   1E30 00                  DEFB    %00000000
9577   1E31             
9578   1E31             ; $3A - Character: ':'          CHR$(58)
9579   1E31             
9580   1E31 00                  DEFB    %00000000
9581   1E32 00                  DEFB    %00000000
9582   1E33 10                  DEFB    %00010000
9583   1E34 00                  DEFB    %00000000
9584   1E35 00                  DEFB    %00000000
9585   1E36 10                  DEFB    %00010000
9586   1E37 00                  DEFB    %00000000
9587   1E38             
9588   1E38             ; $3B - Character: ';'          CHR$(59)
9589   1E38             
9590   1E38 00                  DEFB    %00000000
9591   1E39 10                  DEFB    %00010000
9592   1E3A 00                  DEFB    %00000000
9593   1E3B 00                  DEFB    %00000000
9594   1E3C 10                  DEFB    %00010000
9595   1E3D 10                  DEFB    %00010000
9596   1E3E 20                  DEFB    %00100000
9597   1E3F             
9598   1E3F             ; $3C - Character: '<'          CHR$(60)
9599   1E3F             
9600   1E3F 00                  DEFB    %00000000
9601   1E40 04                  DEFB    %00000100
9602   1E41 08                  DEFB    %00001000
9603   1E42 10                  DEFB    %00010000
9604   1E43 08                  DEFB    %00001000
9605   1E44 04                  DEFB    %00000100
9606   1E45 00                  DEFB    %00000000
9607   1E46             
9608   1E46             ; $3D - Character: '='          CHR$(61)
9609   1E46             
9610   1E46 00                  DEFB    %00000000
9611   1E47 00                  DEFB    %00000000
9612   1E48 3E                  DEFB    %00111110
9613   1E49 00                  DEFB    %00000000
9614   1E4A 3E                  DEFB    %00111110
9615   1E4B 00                  DEFB    %00000000
9616   1E4C 00                  DEFB    %00000000
9617   1E4D             
9618   1E4D             ; $3E - Character: '>'          CHR$(62)
9619   1E4D             
9620   1E4D 00                  DEFB    %00000000
9621   1E4E 10                  DEFB    %00010000
9622   1E4F 08                  DEFB    %00001000
9623   1E50 04                  DEFB    %00000100
9624   1E51 08                  DEFB    %00001000
9625   1E52 10                  DEFB    %00010000
9626   1E53 00                  DEFB    %00000000
9627   1E54             
9628   1E54             ; $3F - Character: '?'          CHR$(63)
9629   1E54             
9630   1E54 3C                  DEFB    %00111100
9631   1E55 42                  DEFB    %01000010
9632   1E56 04                  DEFB    %00000100
9633   1E57 08                  DEFB    %00001000
9634   1E58 00                  DEFB    %00000000
9635   1E59 08                  DEFB    %00001000
9636   1E5A             
9637   1E5A             ; $40 - Character: '@'          CHR$(64)
9638   1E5A             
9639   1E5A 3C                  DEFB    %00111100
9640   1E5B 4A                  DEFB    %01001010
9641   1E5C 56                  DEFB    %01010110
9642   1E5D 5E                  DEFB    %01011110
9643   1E5E 40                  DEFB    %01000000
9644   1E5F 3C                  DEFB    %00111100
9645   1E60             
9646   1E60             ; $41 - Character: 'A'          CHR$(65)
9647   1E60             
9648   1E60 3C                  DEFB    %00111100
9649   1E61 42                  DEFB    %01000010
9650   1E62 42                  DEFB    %01000010
9651   1E63 7E                  DEFB    %01111110
9652   1E64 42                  DEFB    %01000010
9653   1E65 42                  DEFB    %01000010
9654   1E66             
9655   1E66             ; $42 - Character: 'B'          CHR$(66)
9656   1E66             
9657   1E66 7C                  DEFB    %01111100
9658   1E67 42                  DEFB    %01000010
9659   1E68 7C                  DEFB    %01111100
9660   1E69 42                  DEFB    %01000010
9661   1E6A 42                  DEFB    %01000010
9662   1E6B 7C                  DEFB    %01111100
9663   1E6C             
9664   1E6C             ; $43 - Character: 'C'          CHR$(67)
9665   1E6C             
9666   1E6C 3C                  DEFB    %00111100
9667   1E6D 42                  DEFB    %01000010
9668   1E6E 40                  DEFB    %01000000
9669   1E6F 40                  DEFB    %01000000
9670   1E70 42                  DEFB    %01000010
9671   1E71 3C                  DEFB    %00111100
9672   1E72             
9673   1E72             ; $44 - Character: 'D'          CHR$(68)
9674   1E72             
9675   1E72 78                  DEFB    %01111000
9676   1E73 44                  DEFB    %01000100
9677   1E74 42                  DEFB    %01000010
9678   1E75 42                  DEFB    %01000010
9679   1E76 44                  DEFB    %01000100
9680   1E77 78                  DEFB    %01111000
9681   1E78             
9682   1E78             ; $45 - Character: 'E'          CHR$(69)
9683   1E78             
9684   1E78 7E                  DEFB    %01111110
9685   1E79 40                  DEFB    %01000000
9686   1E7A 7C                  DEFB    %01111100
9687   1E7B 40                  DEFB    %01000000
9688   1E7C 40                  DEFB    %01000000
9689   1E7D 7E                  DEFB    %01111110
9690   1E7E             
9691   1E7E             ; $46 - Character: 'F'          CHR$(70)
9692   1E7E             
9693   1E7E 7E                  DEFB    %01111110
9694   1E7F 40                  DEFB    %01000000
9695   1E80 7C                  DEFB    %01111100
9696   1E81 40                  DEFB    %01000000
9697   1E82 40                  DEFB    %01000000
9698   1E83 40                  DEFB    %01000000
9699   1E84             
9700   1E84             ; $47 - Character: 'G'          CHR$(71)
9701   1E84             
9702   1E84 3C                  DEFB    %00111100
9703   1E85 42                  DEFB    %01000010
9704   1E86 40                  DEFB    %01000000
9705   1E87 4E                  DEFB    %01001110
9706   1E88 42                  DEFB    %01000010
9707   1E89 3C                  DEFB    %00111100
9708   1E8A             
9709   1E8A             ; $48 - Character: 'H'          CHR$(72)
9710   1E8A             
9711   1E8A 42                  DEFB    %01000010
9712   1E8B 42                  DEFB    %01000010
9713   1E8C 7E                  DEFB    %01111110
9714   1E8D 42                  DEFB    %01000010
9715   1E8E 42                  DEFB    %01000010
9716   1E8F 42                  DEFB    %01000010
9717   1E90             
9718   1E90             ; $49 - Character: 'I'          CHR$(73)
9719   1E90             
9720   1E90 3E                  DEFB    %00111110
9721   1E91 08                  DEFB    %00001000
9722   1E92 08                  DEFB    %00001000
9723   1E93 08                  DEFB    %00001000
9724   1E94 08                  DEFB    %00001000
9725   1E95 3E                  DEFB    %00111110
9726   1E96             
9727   1E96             ; $4A - Character: 'J'          CHR$(74)
9728   1E96             
9729   1E96 02                  DEFB    %00000010
9730   1E97 02                  DEFB    %00000010
9731   1E98 02                  DEFB    %00000010
9732   1E99 42                  DEFB    %01000010
9733   1E9A 42                  DEFB    %01000010
9734   1E9B 3C                  DEFB    %00111100
9735   1E9C             
9736   1E9C             ; $4B - Character: 'K'          CHR$(75)
9737   1E9C             
9738   1E9C 44                  DEFB    %01000100
9739   1E9D 48                  DEFB    %01001000
9740   1E9E 70                  DEFB    %01110000
9741   1E9F 48                  DEFB    %01001000
9742   1EA0 44                  DEFB    %01000100
9743   1EA1 42                  DEFB    %01000010
9744   1EA2             
9745   1EA2             ; $4C - Character: 'L'          CHR$(76)
9746   1EA2             
9747   1EA2 40                  DEFB    %01000000
9748   1EA3 40                  DEFB    %01000000
9749   1EA4 40                  DEFB    %01000000
9750   1EA5 40                  DEFB    %01000000
9751   1EA6 40                  DEFB    %01000000
9752   1EA7 7E                  DEFB    %01111110
9753   1EA8             
9754   1EA8             ; $4D - Character: 'M'          CHR$(77)
9755   1EA8             
9756   1EA8 42                  DEFB    %01000010
9757   1EA9 66                  DEFB    %01100110
9758   1EAA 5A                  DEFB    %01011010
9759   1EAB 42                  DEFB    %01000010
9760   1EAC 42                  DEFB    %01000010
9761   1EAD 42                  DEFB    %01000010
9762   1EAE             
9763   1EAE             ; $4E - Character: 'N'          CHR$(78)
9764   1EAE             
9765   1EAE 42                  DEFB    %01000010
9766   1EAF 62                  DEFB    %01100010
9767   1EB0 52                  DEFB    %01010010
9768   1EB1 4A                  DEFB    %01001010
9769   1EB2 46                  DEFB    %01000110
9770   1EB3 42                  DEFB    %01000010
9771   1EB4             
9772   1EB4             ; $4F - Character: 'O'          CHR$(79)
9773   1EB4             
9774   1EB4 3C                  DEFB    %00111100
9775   1EB5 42                  DEFB    %01000010
9776   1EB6 42                  DEFB    %01000010
9777   1EB7 42                  DEFB    %01000010
9778   1EB8 42                  DEFB    %01000010
9779   1EB9 3C                  DEFB    %00111100
9780   1EBA             
9781   1EBA             ; $50 - Character: 'P'          CHR$(80)
9782   1EBA             
9783   1EBA 7C                  DEFB    %01111100
9784   1EBB 42                  DEFB    %01000010
9785   1EBC 42                  DEFB    %01000010
9786   1EBD 7C                  DEFB    %01111100
9787   1EBE 40                  DEFB    %01000000
9788   1EBF 40                  DEFB    %01000000
9789   1EC0             
9790   1EC0             ; $51 - Character: 'Q'          CHR$(81)
9791   1EC0             
9792   1EC0 3C                  DEFB    %00111100
9793   1EC1 42                  DEFB    %01000010
9794   1EC2 42                  DEFB    %01000010
9795   1EC3 52                  DEFB    %01010010
9796   1EC4 4A                  DEFB    %01001010
9797   1EC5 3C                  DEFB    %00111100
9798   1EC6             
9799   1EC6             ; $52 - Character: 'R'          CHR$(82)
9800   1EC6             
9801   1EC6 7C                  DEFB    %01111100
9802   1EC7 42                  DEFB    %01000010
9803   1EC8 42                  DEFB    %01000010
9804   1EC9 7C                  DEFB    %01111100
9805   1ECA 44                  DEFB    %01000100
9806   1ECB 42                  DEFB    %01000010
9807   1ECC             
9808   1ECC             ; $53 - Character: 'S'          CHR$(83)
9809   1ECC             
9810   1ECC 3C                  DEFB    %00111100
9811   1ECD 40                  DEFB    %01000000
9812   1ECE 3C                  DEFB    %00111100
9813   1ECF 02                  DEFB    %00000010
9814   1ED0 42                  DEFB    %01000010
9815   1ED1 3C                  DEFB    %00111100
9816   1ED2             
9817   1ED2             ; $54 - Character: 'T'          CHR$(84)
9818   1ED2             
9819   1ED2 FE                  DEFB    %11111110
9820   1ED3 10                  DEFB    %00010000
9821   1ED4 10                  DEFB    %00010000
9822   1ED5 10                  DEFB    %00010000
9823   1ED6 10                  DEFB    %00010000
9824   1ED7 10                  DEFB    %00010000
9825   1ED8             
9826   1ED8             ; $55 - Character: 'U'          CHR$(85)
9827   1ED8             
9828   1ED8 42                  DEFB    %01000010
9829   1ED9 42                  DEFB    %01000010
9830   1EDA 42                  DEFB    %01000010
9831   1EDB 42                  DEFB    %01000010
9832   1EDC 42                  DEFB    %01000010
9833   1EDD 3E                  DEFB    %00111110
9834   1EDE             
9835   1EDE             ; $56 - Character: 'V'          CHR$(86)
9836   1EDE             
9837   1EDE 42                  DEFB    %01000010
9838   1EDF 42                  DEFB    %01000010
9839   1EE0 42                  DEFB    %01000010
9840   1EE1 42                  DEFB    %01000010
9841   1EE2 24                  DEFB    %00100100
9842   1EE3 18                  DEFB    %00011000
9843   1EE4             
9844   1EE4             ; $57 - Character: 'W'          CHR$(87)
9845   1EE4             
9846   1EE4 42                  DEFB    %01000010
9847   1EE5 42                  DEFB    %01000010
9848   1EE6 42                  DEFB    %01000010
9849   1EE7 42                  DEFB    %01000010
9850   1EE8 5A                  DEFB    %01011010
9851   1EE9 24                  DEFB    %00100100
9852   1EEA             
9853   1EEA             ; $58 - Character: 'X'          CHR$(88)
9854   1EEA             
9855   1EEA 42                  DEFB    %01000010
9856   1EEB 24                  DEFB    %00100100
9857   1EEC 18                  DEFB    %00011000
9858   1EED 18                  DEFB    %00011000
9859   1EEE 24                  DEFB    %00100100
9860   1EEF 42                  DEFB    %01000010
9861   1EF0             
9862   1EF0             ; $59 - Character: 'Y'          CHR$(89)
9863   1EF0             
9864   1EF0 82                  DEFB    %10000010
9865   1EF1 44                  DEFB    %01000100
9866   1EF2 28                  DEFB    %00101000
9867   1EF3 10                  DEFB    %00010000
9868   1EF4 10                  DEFB    %00010000
9869   1EF5 10                  DEFB    %00010000
9870   1EF6             
9871   1EF6             ; $5A - Character: 'Z'          CHR$(90)
9872   1EF6             
9873   1EF6 7E                  DEFB    %01111110
9874   1EF7 04                  DEFB    %00000100
9875   1EF8 08                  DEFB    %00001000
9876   1EF9 10                  DEFB    %00010000
9877   1EFA 20                  DEFB    %00100000
9878   1EFB 7E                  DEFB    %01111110
9879   1EFC             
9880   1EFC             ; $5B - Character: '['          CHR$(91)
9881   1EFC             
9882   1EFC 0E                  DEFB    %00001110
9883   1EFD 08                  DEFB    %00001000
9884   1EFE 08                  DEFB    %00001000
9885   1EFF 08                  DEFB    %00001000
9886   1F00 08                  DEFB    %00001000
9887   1F01 0E                  DEFB    %00001110
9888   1F02             
9889   1F02             ; $5C - Character: '\'          CHR$(92)
9890   1F02             
9891   1F02 00                  DEFB    %00000000
9892   1F03 40                  DEFB    %01000000
9893   1F04 20                  DEFB    %00100000
9894   1F05 10                  DEFB    %00010000
9895   1F06 08                  DEFB    %00001000
9896   1F07 04                  DEFB    %00000100
9897   1F08             
9898   1F08             ; $5D - Character: ']'          CHR$(93)
9899   1F08             
9900   1F08 70                  DEFB    %01110000
9901   1F09 10                  DEFB    %00010000
9902   1F0A 10                  DEFB    %00010000
9903   1F0B 10                  DEFB    %00010000
9904   1F0C 10                  DEFB    %00010000
9905   1F0D 70                  DEFB    %01110000
9906   1F0E             
9907   1F0E             ; $5E - Character: '^'          CHR$(94)
9908   1F0E             
9909   1F0E 10                  DEFB    %00010000
9910   1F0F 38                  DEFB    %00111000
9911   1F10 54                  DEFB    %01010100
9912   1F11 10                  DEFB    %00010000
9913   1F12 10                  DEFB    %00010000
9914   1F13 10                  DEFB    %00010000
9915   1F14             
9916   1F14             ; $5F - Character: '_'          CHR$(95)
9917   1F14             
9918   1F14 00                  DEFB    %00000000
9919   1F15 00                  DEFB    %00000000
9920   1F16 00                  DEFB    %00000000
9921   1F17 00                  DEFB    %00000000
9922   1F18 00                  DEFB    %00000000
9923   1F19 00                  DEFB    %00000000
9924   1F1A FF                  DEFB    %11111111
9925   1F1B             
9926   1F1B             ; $60 - Character:  Â£           CHR$(96)
9927   1F1B             
9928   1F1B 1C                  DEFB    %00011100
9929   1F1C 22                  DEFB    %00100010
9930   1F1D 78                  DEFB    %01111000
9931   1F1E 20                  DEFB    %00100000
9932   1F1F 20                  DEFB    %00100000
9933   1F20 7E                  DEFB    %01111110
9934   1F21 00                  DEFB    %00000000
9935   1F22             
9936   1F22             ; $61 - Character: 'a'          CHR$(97)
9937   1F22             
9938   1F22 00                  DEFB    %00000000
9939   1F23 38                  DEFB    %00111000
9940   1F24 04                  DEFB    %00000100
9941   1F25 3C                  DEFB    %00111100
9942   1F26 44                  DEFB    %01000100
9943   1F27 3E                  DEFB    %00111110
9944   1F28 00                  DEFB    %00000000
9945   1F29             
9946   1F29             ; $62 - Character: 'b'          CHR$(98)
9947   1F29             
9948   1F29 20                  DEFB    %00100000
9949   1F2A 20                  DEFB    %00100000
9950   1F2B 3C                  DEFB    %00111100
9951   1F2C 22                  DEFB    %00100010
9952   1F2D 22                  DEFB    %00100010
9953   1F2E 3C                  DEFB    %00111100
9954   1F2F 00                  DEFB    %00000000
9955   1F30             
9956   1F30             ; $63 - Character: 'c'          CHR$(99)
9957   1F30             
9958   1F30 00                  DEFB    %00000000
9959   1F31 1C                  DEFB    %00011100
9960   1F32 20                  DEFB    %00100000
9961   1F33 20                  DEFB    %00100000
9962   1F34 20                  DEFB    %00100000
9963   1F35 1C                  DEFB    %00011100
9964   1F36 00                  DEFB    %00000000
9965   1F37             
9966   1F37             ; $64 - Character: 'd'          CHR$(100)
9967   1F37             
9968   1F37 04                  DEFB    %00000100
9969   1F38 04                  DEFB    %00000100
9970   1F39 3C                  DEFB    %00111100
9971   1F3A 44                  DEFB    %01000100
9972   1F3B 44                  DEFB    %01000100
9973   1F3C 3E                  DEFB    %00111110
9974   1F3D 00                  DEFB    %00000000
9975   1F3E             
9976   1F3E             ; $65 - Character: 'e'          CHR$(101)
9977   1F3E             
9978   1F3E 00                  DEFB    %00000000
9979   1F3F 38                  DEFB    %00111000
9980   1F40 44                  DEFB    %01000100
9981   1F41 78                  DEFB    %01111000
9982   1F42 40                  DEFB    %01000000
9983   1F43 3C                  DEFB    %00111100
9984   1F44 00                  DEFB    %00000000
9985   1F45             
9986   1F45             ; $66 - Character: 'f'          CHR$(102)
9987   1F45             
9988   1F45 0C                  DEFB    %00001100
9989   1F46 10                  DEFB    %00010000
9990   1F47 18                  DEFB    %00011000
9991   1F48 10                  DEFB    %00010000
9992   1F49 10                  DEFB    %00010000
9993   1F4A 10                  DEFB    %00010000
9994   1F4B 00                  DEFB    %00000000
9995   1F4C             
9996   1F4C             ; $67 - Character: 'g'          CHR$(103)
9997   1F4C             
9998   1F4C 00                  DEFB    %00000000
9999   1F4D 3C                  DEFB    %00111100
10000  1F4E 44                  DEFB    %01000100
10001  1F4F 44                  DEFB    %01000100
10002  1F50 3C                  DEFB    %00111100
10003  1F51 04                  DEFB    %00000100
10004  1F52 38                  DEFB    %00111000
10005  1F53             
10006  1F53             ; $68 - Character: 'h'          CHR$(104)
10007  1F53             
10008  1F53 40                  DEFB    %01000000
10009  1F54 40                  DEFB    %01000000
10010  1F55 78                  DEFB    %01111000
10011  1F56 44                  DEFB    %01000100
10012  1F57 44                  DEFB    %01000100
10013  1F58 44                  DEFB    %01000100
10014  1F59 00                  DEFB    %00000000
10015  1F5A             
10016  1F5A             ; $69 - Character: 'i'          CHR$(105)
10017  1F5A             
10018  1F5A 10                  DEFB    %00010000
10019  1F5B 00                  DEFB    %00000000
10020  1F5C 30                  DEFB    %00110000
10021  1F5D 10                  DEFB    %00010000
10022  1F5E 10                  DEFB    %00010000
10023  1F5F 38                  DEFB    %00111000
10024  1F60 00                  DEFB    %00000000
10025  1F61             
10026  1F61             ; $6A - Character: 'j'          CHR$(106)
10027  1F61             
10028  1F61 04                  DEFB    %00000100
10029  1F62 00                  DEFB    %00000000
10030  1F63 04                  DEFB    %00000100
10031  1F64 04                  DEFB    %00000100
10032  1F65 04                  DEFB    %00000100
10033  1F66 24                  DEFB    %00100100
10034  1F67 18                  DEFB    %00011000
10035  1F68             
10036  1F68             ; $6B - Character: 'k'          CHR$(107)
10037  1F68             
10038  1F68 20                  DEFB    %00100000
10039  1F69 28                  DEFB    %00101000
10040  1F6A 30                  DEFB    %00110000
10041  1F6B 30                  DEFB    %00110000
10042  1F6C 28                  DEFB    %00101000
10043  1F6D 24                  DEFB    %00100100
10044  1F6E 00                  DEFB    %00000000
10045  1F6F             
10046  1F6F             ; $6C - Character: 'l'          CHR$(108)
10047  1F6F             
10048  1F6F 10                  DEFB    %00010000
10049  1F70 10                  DEFB    %00010000
10050  1F71 10                  DEFB    %00010000
10051  1F72 10                  DEFB    %00010000
10052  1F73 10                  DEFB    %00010000
10053  1F74 0C                  DEFB    %00001100
10054  1F75 00                  DEFB    %00000000
10055  1F76             
10056  1F76             ; $6D - Character: 'm'          CHR$(109)
10057  1F76             
10058  1F76 00                  DEFB    %00000000
10059  1F77 68                  DEFB    %01101000
10060  1F78 54                  DEFB    %01010100
10061  1F79 54                  DEFB    %01010100
10062  1F7A 54                  DEFB    %01010100
10063  1F7B 54                  DEFB    %01010100
10064  1F7C 00                  DEFB    %00000000
10065  1F7D             
10066  1F7D             ; $6E - Character: 'n'          CHR$(110)
10067  1F7D             
10068  1F7D 00                  DEFB    %00000000
10069  1F7E 78                  DEFB    %01111000
10070  1F7F 44                  DEFB    %01000100
10071  1F80 44                  DEFB    %01000100
10072  1F81 44                  DEFB    %01000100
10073  1F82 44                  DEFB    %01000100
10074  1F83 00                  DEFB    %00000000
10075  1F84             
10076  1F84             ; $6F - Character: 'o'          CHR$(111)
10077  1F84             
10078  1F84 00                  DEFB    %00000000
10079  1F85 38                  DEFB    %00111000
10080  1F86 44                  DEFB    %01000100
10081  1F87 44                  DEFB    %01000100
10082  1F88 44                  DEFB    %01000100
10083  1F89 38                  DEFB    %00111000
10084  1F8A 00                  DEFB    %00000000
10085  1F8B             
10086  1F8B             ; $70 - Character: 'p'          CHR$(112)
10087  1F8B             
10088  1F8B 00                  DEFB    %00000000
10089  1F8C 78                  DEFB    %01111000
10090  1F8D 44                  DEFB    %01000100
10091  1F8E 44                  DEFB    %01000100
10092  1F8F 78                  DEFB    %01111000
10093  1F90 40                  DEFB    %01000000
10094  1F91 40                  DEFB    %01000000
10095  1F92             
10096  1F92             ; $71 - Character: 'q'          CHR$(113)
10097  1F92             
10098  1F92 00                  DEFB    %00000000
10099  1F93 3C                  DEFB    %00111100
10100  1F94 44                  DEFB    %01000100
10101  1F95 44                  DEFB    %01000100
10102  1F96 3C                  DEFB    %00111100
10103  1F97 04                  DEFB    %00000100
10104  1F98 06                  DEFB    %00000110
10105  1F99             
10106  1F99             ; $72 - Character: 'r'          CHR$(114)
10107  1F99             
10108  1F99 00                  DEFB    %00000000
10109  1F9A 1C                  DEFB    %00011100
10110  1F9B 20                  DEFB    %00100000
10111  1F9C 20                  DEFB    %00100000
10112  1F9D 20                  DEFB    %00100000
10113  1F9E 20                  DEFB    %00100000
10114  1F9F 00                  DEFB    %00000000
10115  1FA0             
10116  1FA0             ; $73 - Character: 's'          CHR$(115)
10117  1FA0             
10118  1FA0 00                  DEFB    %00000000
10119  1FA1 38                  DEFB    %00111000
10120  1FA2 40                  DEFB    %01000000
10121  1FA3 38                  DEFB    %00111000
10122  1FA4 04                  DEFB    %00000100
10123  1FA5 78                  DEFB    %01111000
10124  1FA6 00                  DEFB    %00000000
10125  1FA7             
10126  1FA7             ; $74 - Character: 't'          CHR$(116)
10127  1FA7             
10128  1FA7 10                  DEFB    %00010000
10129  1FA8 38                  DEFB    %00111000
10130  1FA9 10                  DEFB    %00010000
10131  1FAA 10                  DEFB    %00010000
10132  1FAB 10                  DEFB    %00010000
10133  1FAC 0C                  DEFB    %00001100
10134  1FAD 00                  DEFB    %00000000
10135  1FAE             
10136  1FAE             ; $75 - Character: 'u'          CHR$(117)
10137  1FAE             
10138  1FAE 00                  DEFB    %00000000
10139  1FAF 44                  DEFB    %01000100
10140  1FB0 44                  DEFB    %01000100
10141  1FB1 44                  DEFB    %01000100
10142  1FB2 44                  DEFB    %01000100
10143  1FB3 3C                  DEFB    %00111100
10144  1FB4 00                  DEFB    %00000000
10145  1FB5             
10146  1FB5             ; $76 - Character: 'v'          CHR$(118)
10147  1FB5             
10148  1FB5 00                  DEFB    %00000000
10149  1FB6 44                  DEFB    %01000100
10150  1FB7 44                  DEFB    %01000100
10151  1FB8 28                  DEFB    %00101000
10152  1FB9 28                  DEFB    %00101000
10153  1FBA 10                  DEFB    %00010000
10154  1FBB 00                  DEFB    %00000000
10155  1FBC             
10156  1FBC             ; $77 - Character: 'w'          CHR$(119)
10157  1FBC             
10158  1FBC 00                  DEFB    %00000000
10159  1FBD 44                  DEFB    %01000100
10160  1FBE 54                  DEFB    %01010100
10161  1FBF 54                  DEFB    %01010100
10162  1FC0 54                  DEFB    %01010100
10163  1FC1 28                  DEFB    %00101000
10164  1FC2 00                  DEFB    %00000000
10165  1FC3             
10166  1FC3             ; $78 - Character: 'x'          CHR$(120)
10167  1FC3             
10168  1FC3 00                  DEFB    %00000000
10169  1FC4 44                  DEFB    %01000100
10170  1FC5 28                  DEFB    %00101000
10171  1FC6 10                  DEFB    %00010000
10172  1FC7 28                  DEFB    %00101000
10173  1FC8 44                  DEFB    %01000100
10174  1FC9 00                  DEFB    %00000000
10175  1FCA             
10176  1FCA             ; $79 - Character: 'y'          CHR$(121)
10177  1FCA             
10178  1FCA 00                  DEFB    %00000000
10179  1FCB 44                  DEFB    %01000100
10180  1FCC 44                  DEFB    %01000100
10181  1FCD 44                  DEFB    %01000100
10182  1FCE 3C                  DEFB    %00111100
10183  1FCF 04                  DEFB    %00000100
10184  1FD0 38                  DEFB    %00111000
10185  1FD1             
10186  1FD1             ; $7A - Character: 'z'          CHR$(122)
10187  1FD1             
10188  1FD1 00                  DEFB    %00000000
10189  1FD2 7C                  DEFB    %01111100
10190  1FD3 08                  DEFB    %00001000
10191  1FD4 10                  DEFB    %00010000
10192  1FD5 20                  DEFB    %00100000
10193  1FD6 7C                  DEFB    %01111100
10194  1FD7 00                  DEFB    %00000000
10195  1FD8             
10196  1FD8             ; $7B - Character: '{'          CHR$(123)
10197  1FD8             
10198  1FD8 0E                  DEFB    %00001110
10199  1FD9 08                  DEFB    %00001000
10200  1FDA 30                  DEFB    %00110000
10201  1FDB 30                  DEFB    %00110000
10202  1FDC 08                  DEFB    %00001000
10203  1FDD 0E                  DEFB    %00001110
10204  1FDE 00                  DEFB    %00000000
10205  1FDF             
10206  1FDF             ; $7C - Character: '|'          CHR$(124)
10207  1FDF             
10208  1FDF 08                  DEFB    %00001000
10209  1FE0 08                  DEFB    %00001000
10210  1FE1 08                  DEFB    %00001000
10211  1FE2 08                  DEFB    %00001000
10212  1FE3 08                  DEFB    %00001000
10213  1FE4 08                  DEFB    %00001000
10214  1FE5 00                  DEFB    %00000000
10215  1FE6             
10216  1FE6             ; $7D - Character: '}'          CHR$(125)
10217  1FE6             
10218  1FE6 70                  DEFB    %01110000
10219  1FE7 10                  DEFB    %00010000
10220  1FE8 0C                  DEFB    %00001100
10221  1FE9 0C                  DEFB    %00001100
10222  1FEA 10                  DEFB    %00010000
10223  1FEB 70                  DEFB    %01110000
10224  1FEC 00                  DEFB    %00000000
10225  1FED             
10226  1FED             ; $7E - Character: '~'          CHR$(126)
10227  1FED             
10228  1FED 32                  DEFB    %00110010
10229  1FEE 4C                  DEFB    %01001100
10230  1FEF 00                  DEFB    %00000000
10231  1FF0 00                  DEFB    %00000000
10232  1FF1 00                  DEFB    %00000000
10233  1FF2 00                  DEFB    %00000000
10234  1FF3 00                  DEFB    %00000000
10235  1FF4             
10236  1FF4             ; $7F - Character:  Â©           CHR$(127)
10237  1FF4             
10238  1FF4 3C                  DEFB    %00111100
10239  1FF5 42                  DEFB    %01000010
10240  1FF6 99                  DEFB    %10011001
10241  1FF7 A1                  DEFB    %10100001
10242  1FF8 A1                  DEFB    %10100001
10243  1FF9 99                  DEFB    %10011001
10244  1FFA 42                  DEFB    %01000010
10245  1FFB 3C          L1FFB:  DEFB    %00111100
10246  1FFC             
10247  1FFC             
10248  1FFC             ; ---------------
10249  1FFC             ; THE 'SPARE' ROM
10250  1FFC             ; ---------------
10251  1FFC             
10252  1FFC FF          L1FFC:  DEFB    $FF                     ; unused
10253  1FFD             
10254  1FFD             ; ----------
10255  1FFD             ; THE 'LINK'
10256  1FFD             ; ----------
10257  1FFD             
10258  1FFD             ; The FORTH word copied to RAM links back to L1FFF
10259  1FFD             
10260  1FFD 58 1D       L1FFD:  DEFW    L1D58                   ; pointer to prev - UFLOAT
10261  1FFF 00          L1FFF:  DEFB    $00                     ; length of dummy word zero
10262  2000             
10263  2000             
10264  2000             .END
10265  2000             
10266  2000             ; -----------
10267  2000             ;
10268  2000             ; -----------
10269  2000             ; ----------------------
10270  2000             ; THE 'SYSTEM VARIABLES'
10271  2000             ; ----------------------
10272  2000             ; "Here is a list of system variables. We have given them all names, but that
10273  2000             ; is just for ease of reference. The Ace will not recognize these names,
10274  2000             ; except for a few, like 'BASE', that are FORTH words. I've written these
10275  2000             ; FORTH words in bold type in the usual way."
10276  2000             ;
10277  2000             ;
10278  2000             ; FP_WS         $3C00 (15360)   19 bytes used as work space for floating point
10279  2000             ;                               arithmetic.
10280  2000             ;
10281  2000             ; LISTWS        $3C13 (15379)   5 bytes used as workspace by 'LIST' and 'EDIT'.
10282  2000             ;
10283  2000             ; RAMTOP        $3C18 (15384)   2 bytes - the first address past the last
10284  2000             ;                               address in RAM.
10285  2000             ;
10286  2000             ; HLD           $3C1A (15386)   2 bytes. The address of the latest character
10287  2000             ;                               held in the pad by formatted output.
10288  2000             ;                               ('#', 'HOLD' and so on).
10289  2000             ;
10290  2000             ; SCRPOS        $3C1C (15388)   2 bytes. The address of the place in video RAM
10291  2000             ;                               where the next character is to be printed
10292  2000             ;                               (i.e. the 'print position').
10293  2000             ;
10294  2000             ; INSCRN        $3C1E (15390)   2 bytes. The address of the start of the
10295  2000             ;                               current 'logical line' in the input buffer.
10296  2000             ;
10297  2000             ; CURSOR        $3C20 (15392)   2 bytes. The address of the cursor in the
10298  2000             ;                               input buffer.
10299  2000             ;
10300  2000             ; ENDBUF        $3C22 (15394)   2 bytes. The address of the end of the current
10301  2000             ;                               logical line in the input buffer.
10302  2000             ;
10303  2000             ; L_HALF        $3C24 (15396)   2 bytes. The address of the start of the the
10304  2000             ;                               input buffer. The input buffer itself is stored
10305  2000             ;                               in the video RAM, where you see it.
10306  2000             ;
10307  2000             ; KEYCOD        $3C26 (15398)   1 byte. The ASCII code of the last key pressed.
10308  2000             ;
10309  2000             ; KEYCNT        $3C27 (15399)   1 byte. Used by the routine that reads the
10310  2000             ;                               keyboard.
10311  2000             ;
10312  2000             ; STATIN        $3C28 (15400)   1 byte. Used by the routine that reads the
10313  2000             ;                               keyboard.
10314  2000             ;
10315  2000             ; EXWRCH        $3C29 (15401)   2 bytes. This is normally 0 but it can be
10316  2000             ;                               changed to allow printing to be sent to some
10317  2000             ;                               device other than the screen.
10318  2000             ;
10319  2000             ; FRAMES        $3C2B (15403)   4 bytes. These four bytes form a double length
10320  2000             ;                               integer that counts the time since the Ace was
10321  2000             ;                               switched on in 50ths of a second.
10322  2000             ;
10323  2000             ; XCOORD        $3C2F (15407)   1 byte. The x-coordinate last used by 'PLOT'.
10324  2000             ;
10325  2000             ; YCOORD        $3C30 (15408)   1 byte. The y-coordinate last used by 'PLOT'.
10326  2000             ;
10327  2000             ; CURRENT       $3C31 (15409)   2 bytes. The parameter field address for the
10328  2000             ;                               vocabulary word of the current vocabulary.
10329  2000             ;
10330  2000             ; CONTEXT       $3C33 (15411)   2 bytes. The parameter field address for the
10331  2000             ;                               vocabulary word of the context vocabulary.
10332  2000             ;
10333  2000             ; VOCLNK        $3C35 (15413)   2 bytes. The address of the fourth byte in the
10334  2000             ;                               parameter field - the vocabulary linkage - of
10335  2000             ;                               the vocabulary word of the most recently
10336  2000             ;                               defined vocabulary.
10337  2000             ;
10338  2000             ; STKBOT        $3C37 (15415)   2 bytes. The address of the next byte into
10339  2000             ;                               which anything will be enclosed in the
10340  2000             ;                               dictionary, i.e. one byte past the present end
10341  2000             ;                               of the dictionary.
10342  2000             ;                               'HERE' is equivalent to 15415 @.
10343  2000             ;
10344  2000             ; DICT          $3C39 (15417)   2 bytes. The address of the length field in the
10345  2000             ;                               newest word in the dictionary. If that length
10346  2000             ;                               field is correctly filled in then DICT may
10347  2000             ;                               be 0.
10348  2000             ;
10349  2000             ; SPARE         $3C3B (15419)   2 bytes. The address of the first byte past the
10350  2000             ;                               top of the stack.
10351  2000             ;
10352  2000             ; ERR_NO        $3C3D (15421)   1 byte. This is usually 255, meaning "no error".
10353  2000             ;                               If 'ABORT' is used, and ERR_NO is between 0 and
10354  2000             ;                               127, then "ERROR" will be printed out, followed
10355  2000             ;                               by the error number ERR_NO.
10356  2000             ;
10357  2000             ; FLAGS         $3C3E (15422)   1 byte. Shows the state of various parts of the
10358  2000             ;                               system, each bit showing whether something
10359  2000             ;                               particular is happening or not. Some of these
10360  2000             ;                               may be useful.
10361  2000             ;
10362  2000             ;                               Bit 2, when 1, shows that there is an incomplete
10363  2000             ;                               definition at the end of the dictionary.
10364  2000             ;
10365  2000             ;                               Bit 3, when 1, shows that output is to fed into
10366  2000             ;                               the input buffer.
10367  2000             ;
10368  2000             ;                               Bit 4, when 1, shows that the Ace is in
10369  2000             ;                               invisible mode.
10370  2000             ;
10371  2000             ;                               Bit 6, when 1, shows that the Ace is in compile
10372  2000             ;                               mode.
10373  2000             ;
10374  2000             ; BASE          $3C3F (15423)   1 byte. The system number base.
10375  2000             ;
10376  2000             ;
10377  2000             ;
10378  2000             ; -----------------------------------------------------------------------------
10379  2000             ;                                    ---------
10380  2000             ;                                   -------------------------------------------
10381  2000             ; ------------                     --------------------------------------------
10382  2000             ; ACE KEYBOARD                    ---------
10383  2000             ; ------------                   ---------
10384  2000             ;
10385  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10386  2000             ;|   ! | |   @ | |   # | |   $ | |   % | |   & | |   ' | |   ( | |   ) | |   _ |
10387  2000             ;| 1 []| | 2 []| | 3 []| | 4 []| | 5 []| | 6 []| | 7 []| | 8   | | 9   | | 0 []|
10388  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10389  2000             ; DELETE   CAPS            INV    <=        ^       v        =>  GRAPHIC  DELETE
10390  2000             ;  LINE    LOCK           VIDEO
10391  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10392  2000             ;|     | |     | |     | |   < | |   > | |   [ | |   ] | |   Â© | |   ; | |   " |
10393  2000             ;| Q   | | W   | | E   | | R   | | T   | | Y   | | U   | | I   | | O   | | P   |
10394  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10395  2000             ;
10396  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10397  2000             ;|   ~ | |   | | |   \ | |   { | |   } | |   ^ | |   - | |   + | |   = | |     |
10398  2000             ;| A   | | S   | | D   | | F   | | G   | | H   | | J   | | K   | | L   | |ENTER|
10399  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10400  2000             ;
10401  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10402  2000             ;|     | |   : | |   Â£ | |   ? | |   / | |   * | |   , | |   . | | SYM | |     |
10403  2000             ;|SHIFT| | Z   | | X   | | C   | | V   | | B   | | N   | | M   | |SHIFT| |SPACE|
10404  2000             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
10405  2000             ;
10406  2000             ;
10407  2000             ;                     [] mosaic graphic          Â£  currency symbol
10408  2000             ;
10409  2000             ; -----------------------------------------------------------------------------

ADDR  00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
-----------------------------------------------------
0000  F3 21 00 3C 3E FC 18 20 D9 DD CB 3E 5E C3 EE 03
0010  2A 3B 3C 73 23 C3 5F 08 2A 3B 3C 2B 56 C3 59 08
0020  E1 7E 32 3D 3C C3 AD 00 24 77 BE 28 FB A4 67 22
0030  18 3C F9 21 0D 01 18 03 C3 3A 01 11 24 3C 01 2D
0040  00 ED B0 DD 21 00 3C FD 21 C8 04 CD 24 0A AF 32
0050  00 27 21 00 2C 7D E6 BF 0F 0F 0F 30 02 0F 0F 0F
0060  47 9F CB 18 47 9F A8 E6 F0 A8 77 2C 20 E7 11 FF
0070  2F 21 FB 1F 01 08 00 ED B8 EB 3E 5F 0E 07 CB 6F
0080  28 03 70 2B 0D EB ED B8 EB 70 2B 3D 20 EE ED 56
0090  18 09 51 55 49 D4 00 00 04 9B 00 ED 7B 18 3C FB
00A0  C3 F2 04 41 42 4F 52 D4 98 00 05 AD 00 FD E5 FD
00B0  21 B9 04 2A 37 3C 22 3B 3C 21 3E 3C 7E E6 B3 CB
00C0  56 77 28 1A CD B9 04 90 04 B3 08 4B 10 05 D2 0D
00D0  6B 08 10 16 B5 15 11 10 37 3C C1 08 0E 1A DD CB
00E0  3D 7E 20 1B CD 08 18 45 52 52 4F D2 CD B9 04 11
00F0  10 3D 3C 96 08 B3 09 95 0A 0E 1A DD 36 3D FF 2A
0100  37 3C 01 0C 00 09 22 3B 3C FD E1 18 8E E0 26 00
0110  00 00 00 00 00 00 00 00 00 00 4C 3C 4C 3C 4F 3C
0120  51 3C 45 3C 5D 3C FF 00 0A 46 4F 52 54 C8 00 00
0130  FF 1F 05 B5 11 49 3C 00 00 00 F5 08 F5 C5 D5 E5
0140  06 3E 10 FE 21 2B 3C 34 23 28 FC CD 10 03 21 28
0150  3C CB 46 28 21 A7 28 1E FE 20 38 14 CB 4E C4 07
0160  08 CB 56 28 02 E6 9F CB 5E 28 02 F6 80 CD 96 01
0170  CD E6 01 CD 82 02 E1 D1 C1 F1 08 F1 FB C9 FE 0D
0180  20 14 21 00 27 22 22 3C 22 20 3C AF CD 98 01 21
0190  E0 26 22 1E 3C C9 A7 C8 08 2A 22 3C 7E A7 28 06
01A0  11 00 D9 19 30 28 ED 5B 24 3C 21 A0 DB 19 30 34
01B0  2A 1C 3C 01 20 00 09 ED 52 D5 D4 21 04 CD B0 02
01C0  D1 CD 2F 04 21 1E 3C 06 04 CD 43 04 10 FB CD 02
01D0  03 54 5D 23 22 22 3C 2B 2B 28 02 ED B8 08 12 13
01E0  ED 53 20 3C AF C9 21 F0 01 16 00 5F 19 5E 19 E9
01F0  20 13 0C 1E 0A 37 1A 50 06 9C C9 15 14 D3 21 28
0200  3C AE 77 C9 2A 20 3C 2B 7E A7 C8 22 20 3C 23 77
0210  C9 2A 20 3C 23 ED 5B 22 3C A7 ED 52 C8 19 22 20
0220  3C 7E 2B 77 C9 2A 20 3C 23 22 20 3C CD 02 03 62
0230  6B 1B 1A A7 C8 ED 53 20 3C 78 B1 28 02 ED B0 2B
0240  36 20 22 22 3C 0C C9 CD 04 02 28 08 06 1F CD 04
0250  02 10 FB C9 2A 1E 3C ED 5B 24 3C A7 ED 52 C8 CD
0260  25 02 2A 1E 3C 11 E0 FF AF 19 BE 20 FC 22 1E 3C
0270  CD F4 02 22 20 3C 3E A0 CD 7E 01 2A 20 3C 2B 22
0280  20 3C 2A 20 3C 3A 28 3C 1F 36 97 1F 30 02 36 C3
0290  1F D0 36 C7 C9 CD 11 02 28 08 06 1F CD 11 02 10
02A0  FB C9 CD B0 02 E0 E5 CD 25 02 E1 CD ED 02 18 C6
02B0  21 00 27 ED 5B 1E 3C A7 ED 52 44 4D EB 23 AF ED
02C0  B1 2B C9 2A 22 3C 2B 22 20 3C CD 2C 02 20 FB C9
02D0  21 28 3C CB EE CB 86 C9 21 00 27 ED 5B 24 3C CD
02E0  FA 07 21 E0 26 22 24 3C 36 00 2A 24 3C 22 1E 3C
02F0  23 22 20 3C CD B0 02 3E 20 2B BE 28 FC 23 22 22
0300  3C C9 2A 22 3C ED 5B 20 3C A7 ED 52 44 4D 19 C9
0310  CD 36 03 47 2A 26 3C AD 28 0B AD 28 03 AF BD C0
0320  68 26 20 18 0D 25 7C FE 1E 28 06 AF BC 20 03 26
0330  04 7D 22 26 3C C9 01 FE FE ED 50 5A CB 3A 9F E6
0340  D8 CB 3A 38 02 3E 28 C6 57 6F 7B F6 03 1E FF 2F
0350  E6 1F 57 28 0D 7D 1C 20 12 D6 08 CB 3A 30 FA 5F
0360  20 09 2D CB 00 30 06 ED 78 18 E4 1E FF 7B 3C C8
0370  21 76 03 19 7E C9 76 68 79 36 35 74 67 63 62 6A
0380  75 37 34 72 66 78 6E 6B 69 38 33 65 64 7A 6D 6C
0390  6F 39 32 77 73 00 20 0D 70 30 31 71 61 00 56 48
03A0  59 07 01 54 47 43 42 4A 55 09 08 52 46 58 4E 4B
03B0  49 03 33 45 44 5A 4D 4C 4F 04 02 57 53 00 20 0D
03C0  50 05 0A 51 41 00 2F 5E 5B 26 25 3E 7D 3F 2A 2D
03D0  5D 27 24 3C 7B 60 2C 2B 7F 28 23 45 5C 3A 2E 3D
03E0  3B 29 40 57 7C 00 20 0D 22 5F 21 51 7E 00 28 05
03F0  CD 7E 01 D9 C9 47 2A 29 3C 7C B5 78 28 01 E9 2A
0400  1C 3C ED 5B 24 3C EB 37 ED 52 EB DC 21 04 FE 0D
0410  28 04 77 23 18 06 23 7D E6 1F 20 FA 22 1C 3C D9
0420  C9 F5 21 1C 3C CD 43 04 F1 2A 24 3C 11 20 24 A7
0430  ED 52 44 4D 21 E0 FF 19 EB ED B0 06 20 2B 36 20
0440  10 FB C9 7E D6 20 77 23 30 01 35 23 C9 EB 5E 16
0450  00 21 00 3C 19 EB D7 FD E9 48 45 52 C5 AA 00 04
0460  62 04 ED 5B 37 3C D7 FD E9 43 4F 4E 54 45 58 D4
0470  5F 04 07 4D 04 33 43 55 52 52 45 4E D4 72 04 07
0480  4D 04 31 42 41 53 C5 7F 04 04 4D 04 3F 4D 04 3E
0490  4D 04 39 50 41 C4 89 04 03 F5 0F 01 27 BB 98 04
04A0  41 08 11 B6 04 D8 12 0A 0E 1A 21 3E 3C 7E E6 BB
04B0  77 FD E9 00 E8 FF B8 04 E1 E1 5E 23 56 23 E5 EB
04C0  5E 23 56 23 EB E9 C8 04 01 0B 00 ED 5B 3B 3C 2A
04D0  37 3C 09 ED 52 38 02 E7 02 01 00 00 CD 8C 0F CD
04E0  E4 04 18 D5 3E FE DB FE 1F D8 3E 7F DB FE 1F D8
04F0  E7 03 CD B9 04 8C 05 06 05 36 05 76 12 F7 FF 4C
0500  49 4E C5 A0 04 04 C3 0E C6 04 3D 06 EE 08 83 12
0510  07 00 4F 05 76 12 F1 FF A9 06 EE 08 83 12 07 00
0520  64 05 76 12 E3 FF 1B 06 1A 0C 83 12 03 00 B6 04
0530  78 05 76 12 D3 FF 38 05 3A 3E 3C CB 77 20 0E CB
0540  67 20 0A CD 08 18 20 4F 4B A0 3E 0D CF FD E9 51
0550  05 DF 1B 1A 2F DD A6 3E E6 40 13 28 04 D7 11 4E
0560  0F C3 BF 04 66 05 DF DD CB 3E 76 20 F4 FD E9 52
0570  45 54 59 50 C5 8B 05 06 7A 05 CD EA 02 CD 76 02
0580  36 BF 18 10 51 55 45 52 D9 05 05 05 8E 05 CD D8
0590  02 CD 76 02 21 28 3C CB C6 CB AE CB 6E 28 FC CD
05A0  25 02 FD E9 57 4F 52 C4 77 05 04 AD 05 DF 21 FE
05B0  27 06 FD 36 20 2B 10 FB D5 EB D7 D1 CD E1 05 04
05C0  05 28 03 01 FF 00 21 01 27 71 23 3E FC B9 30 01
05D0  4F 0C D5 C5 EB ED B0 C1 D1 0D CD DA 07 FD E9 1E
05E0  20 2A 24 3C 22 1E 3C 01 00 00 23 7E BB 28 FB A7
05F0  28 0E E5 03 23 7E A7 28 03 BB 20 F7 D1 AF B8 C9
0600  D5 CD B0 02 E2 14 06 ED 5B 24 3C CD FA 07 22 24
0610  3C D1 18 CD EB C1 01 00 00 37 C9 1D 06 CD DF 05
0620  50 59 D7 FD E9 56 4C 49 53 D4 AA 05 05 2F 06 3E
0630  0D CF 0E 00 18 0E 46 49 4E C4 2C 06 04 3F 06 CD
0640  DF 05 38 46 2A 33 3C 7E 23 66 6F 7E E6 3F 28 2F
0650  A9 28 04 79 A7 20 28 D5 E5 CD E8 15 B1 28 17 41
0660  1A CD 07 08 13 AE E6 7F 23 20 12 10 F3 D1 13 D7
0670  D1 CD DA 07 FD E9 CD FB 17 76 CD E4 04 E1 D1 2B
0680  7E 2B 6E 67 B5 20 C4 C3 8A 06 11 00 00 D7 FD E9
0690  45 58 45 43 55 54 C5 3C 06 07 9C 06 DF C3 BF 04
06A0  4E 55 4D 42 45 D2 99 06 06 AB 06 CD DF 05 38 DA
06B0  C5 D5 CD 4C 07 20 05 11 06 10 18 58 DF 11 00 00
06C0  D7 11 00 45 C1 C5 0A FE 2D 20 03 16 C5 03 D7 50
06D0  59 2B 2B CD 23 07 23 34 2B 30 F8 FE FE 20 3D CD
06E0  23 07 30 FB C6 30 CD 7B 07 20 04 1E 00 18 0E E6
06F0  DF FE 45 20 27 E5 CD 4C 07 DF E1 20 1F CD 40 07
0700  28 0F 23 7E E6 7F 83 FA 1C 07 28 10 AE E6 7F AE
0710  77 11 55 10 D7 D1 C1 CD DA 07 FD E9 E1 E1 DF DF
0720  C3 8A 06 1A 13 D6 30 D8 FE 0A 3F D8 4F 7E E6 F0
0730  C0 79 2B 2B 0E 03 ED 6F 23 0D 20 FA 35 2B BF C9
0740  06 06 AF CD 2C 07 C0 10 F9 23 70 C9 D7 CD B9 04
0750  6B 08 96 08 4B 10 2D 4A 0C 6B 08 A9 0D D2 08 D2
0760  0D 1F 0E 88 06 88 06 FF 08 8A 07 FF 08 DF 08 94
0770  0D FF 08 79 08 85 08 0E 1A DF 1A FE 20 C8 A7 C9
0780  43 4F 4E 56 45 52 D4 A8 06 07 C3 0E 09 0E 6B 08
0790  D2 08 96 08 B8 07 83 12 1B 00 85 08 8A 04 96 08
07A0  A8 0C 79 08 FF 08 8A 04 96 08 A8 0C EE 0D DF 08
07B0  76 12 D9 FF DF 08 B6 04 BA 07 DF 7B CD 07 08 C6
07C0  D0 30 14 FE 0A 38 06 C6 EF 30 0C C6 0A DD BE 3F
07D0  30 05 16 00 5F D7 37 C3 21 0C 62 6B 03 09 E5 DD
07E0  CB 3E 66 CC 7F 09 CD B0 02 D1 A7 ED 52 44 4D 2A
07F0  1E 3C 23 EB 38 05 28 02 ED B0 A7 ED 52 EB 7A B3
0800  C8 36 20 23 1B 18 F7 E6 7F FE 61 D8 FE 7B D0 E6
0810  5F C9 56 49 D3 89 07 03 1A 08 DD CB 3E A6 FD E9
0820  49 4E 56 49 D3 17 08 05 2A 08 DD CB 3E E6 FD E9
0830  46 41 53 D4 27 08 04 39 08 FD 21 B9 04 FD E9 53
0840  4C 4F D7 36 08 04 48 08 FD 21 C8 04 FD E9 2A 3B
0850  3C 2B 46 2B 4E 22 3B 3C C9 2B 5E 22 3B 3C C9 72
0860  23 22 3B 3C C9 44 55 D0 45 08 03 6D 08 DF D7 D7
0870  FD E9 44 52 4F D0 6A 08 04 7B 08 DF FD E9 53 57
0880  41 D0 78 08 04 87 08 DF CD 4E 08 D7 50 59 D7 FD
0890  E9 43 C0 84 08 02 98 08 DF 1A 5F 16 00 D7 FD E9
08A0  43 A1 95 08 02 A7 08 DF CD 4E 08 79 12 FD E9 C0
08B0  A4 08 01 B5 08 DF EB 5E 23 56 D7 FD E9 A1 B2 08
08C0  01 C3 08 DF CD 4E 08 EB 71 23 70 FD E9 3E D2 C0
08D0  08 02 D4 08 DF C1 D5 C5 FD E9 52 BE D1 08 02 E1
08E0  08 C1 D1 C5 D7 FD E9 3F 44 55 D0 DE 08 04 F0 08
08F0  DF D7 7A B3 C4 10 00 FD E9 52 4F D4 ED 08 03 C3
0900  0E D2 08 85 08 DF 08 85 08 B6 04 4F 56 45 D2 FE
0910  08 04 C3 0E D2 08 6B 08 DF 08 85 08 B6 04 50 49
0920  43 CB 11 09 04 27 09 CD 4D 09 FD E9 52 4F 4C CC
0930  24 09 04 35 09 CD 4D 09 EB 2A 37 3C ED 52 D2 D7
0940  04 62 6B 23 23 ED B0 ED 53 3B 3C FD E9 CD 4E 08
0950  0B CB 21 CB 10 03 03 30 02 E7 07 2A 3B 3C ED 42
0960  E5 5E 23 56 D7 E1 C9 54 59 50 C5 32 09 04 70 09
0970  CD 4E 08 DF CD 7F 09 FD E9 1A 4F 13 1A 47 13 78
0980  B1 C8 1A 13 0B CF 18 F7 3C A3 6D 09 02 8F 09 21
0990  FF 27 22 1A 3C FD E9 23 BE 8C 09 02 9E 09 DF DF
09A0  ED 5B 1A 3C D7 21 FF 27 A7 ED 52 EB D7 FD E9 AE
09B0  49 0A 01 C3 0E 8D 09 6B 08 0D 0C 88 06 E1 09 FF
09C0  08 4A 0A 9C 09 6E 09 73 0A B6 04 55 AE B2 09 02
09D0  C3 0E 88 06 8D 09 E1 09 76 12 E8 FF 23 D3 CF 09
09E0  02 C3 0E F7 09 12 09 12 09 36 0E 1A 0C 8D 12 F3
09F0  FF B6 04 A3 E0 09 01 C3 0E 8A 04 96 08 C4 0C FF
0A00  08 07 0A 5C 0A B6 04 09 0A DF 7B C6 30 FE 3A 38
0A10  02 C6 07 5F D7 FD E9 43 4C D3 F6 09 03 1F 0A CD
0A20  24 0A FD E9 11 FF 26 2A 24 3C 01 20 00 09 2B ED
0A30  B8 ED 43 2F 3C 21 00 24 22 1C 3C 13 EB 22 24 3C
0A40  C3 FA 07 53 49 47 CE 9B 09 04 4C 0A DF CB 12 1E
0A50  2D 38 0C FD E9 48 4F 4C C4 1C 0A 04 5E 0A DF 2A
0A60  1A 3C 2D 28 04 22 1A 3C 73 FD E9 53 50 41 43 C5
0A70  5B 0A 05 75 0A 3E 20 CF FD E9 53 50 41 43 45 D3
0A80  72 0A 06 85 0A DF 1B CB 7A 20 ED 3E 20 CF 18 F6
0A90  43 D2 82 0A 02 97 0A 3E 0D CF FD E9 45 4D 49 D4
0AA0  94 0A 04 A5 0A DF 7B CF FD E9 46 AE A2 0A 02 B1
0AB0  0A 2A 3B 3C 2B CB 7E CB BE 28 03 3E 2D CF 1E 00
0AC0  7E 3D FE 49 30 04 FE 3C 30 04 36 41 3C 5F 3E 40
0AD0  96 38 09 47 04 3E 2E CF 3E 30 10 FB 3E 40 BE 9F
0AE0  2B B6 2B B6 2B B6 23 23 28 12 AF CD 32 07 C6 30
0AF0  CF 23 7E FE 40 20 E5 3E 2E CF 18 E0 7B A7 20 05
0B00  3E 20 CF 18 0B D6 41 6F 9F 67 3E 45 CF CD 0E 18
0B10  DF DF FD E9 41 D4 AE 0A 02 1B 0B DF CD 4E 08 79
0B20  CD 28 0B 22 1C 3C FD E9 C6 20 6F 26 01 29 29 29
0B30  29 29 16 00 7B E6 1F 5F 19 ED 5B 24 3C ED 52 19
0B40  D8 E7 09 50 4C 4F D4 18 0B 04 4C 0B CD 4E 08 DF
0B50  DD 73 30 CB 3B CB 11 3E 16 93 DF DD 73 2F CB 3B
0B60  CB 11 CD 28 0B 7E E6 78 FE 10 7E 28 02 3E 10 5F
0B70  16 87 79 E6 03 47 28 07 2F C6 02 CE 03 57 43 79
0B80  0F 0F 0F 9F CB 59 20 04 AB 07 9F A8 A2 AB 77 FD
0B90  E9 42 45 45 D0 49 0B 04 C3 0E 12 09 4B 10 7D 85
0BA0  08 7A 0D 0E 1A DF CD 4E 08 21 F9 00 09 2C F3 3E
0BB0  7F DB FE 0F 30 11 CD C9 0B 1B 7A D3 FE CD C9 0B
0BC0  B3 C2 AF 0B FB FD E9 E7 03 45 4C 10 FE 05 0D C2
0BD0  CB 0B C9 49 4E 4B 45 D9 97 0B 05 DD 0B CD 36 03
0BE0  5F 16 00 D7 FD E9 49 CE DA 0B 02 ED 0B CD 4E 08
0BF0  16 00 ED 58 D7 FD E9 4F 55 D4 EA 0B 03 FF 0B CD
0C00  4E 08 DF ED 59 FD E9 41 42 D3 FC 0B 03 C3 0E 6B
0C10  08 94 0D B6 04 30 BD 0C 0C 02 1C 0C DF 7A B3 FE
0C20  01 3E 00 57 17 5F D7 FD E9 30 BC 19 0C 02 30 0C
0C30  DF CB 12 18 EC 30 BE 2D 0C 02 3C 0C DF 7A B3 28
0C40  E0 CB 12 3F 18 DB BD 39 0C 01 C3 0E E1 0D 1A 0C
0C50  B6 04 BE 49 0C 01 58 0C DF D5 DF E1 CD 99 0C 18
0C60  C0 BC 55 0C 01 C3 0E 85 08 56 0C B6 04 55 BC 64
0C70  0C 02 74 0C CD 4E 08 DF EB A7 ED 42 18 A3 44 BC
0C80  71 0C 02 85 0C DF D5 CD 4E 08 DF E1 A7 ED 52 28
0C90  E6 19 EB CD 99 0C DF 18 88 7C AA FA A0 0C ED 52
0CA0  CB 14 C9 55 AA 82 0C 02 AA 0C DF CD 4E 08 21 00
0CB0  00 3E 10 29 EB ED 6A EB 30 04 09 30 01 13 3D 20
0CC0  F2 EB 18 2F C6 0C DF D9 DF D5 DF E1 7C B5 3E 21
0CD0  20 03 EB 3E 11 D9 47 AF 67 6F 4F ED 6A 9F A7 ED
0CE0  52 99 30 01 19 3F D9 EB ED 6A EB ED 6A D9 10 EB
0CF0  EB D7 D9 E5 D7 D1 D7 FD E9 2F 4D 4F C4 A7 0C 04
0D00  C3 0E 85 08 D2 08 E9 12 0D 0C 4B 10 00 FF 08 6B
0D10  08 E9 12 60 0E D2 08 0D 0C 8C 0D DF 08 94 0D 85
0D20  08 DF 08 94 0D 85 08 B6 04 2A 2F 4D 4F C4 FF 0C
0D30  05 C3 0E FF 08 D2 08 E9 12 0D 0C FF 08 6B 08 DF
0D40  08 60 0E D2 08 0D 0C A8 0C 76 12 C1 FF AF 30 0D
0D50  01 C3 0E 00 0D 85 08 79 08 B6 04 4D 4F C4 50 0D
0D60  03 C3 0E 00 0D 79 08 B6 04 AA 60 0D 01 C3 0E A8
0D70  0C 79 08 B6 04 2A AF 6C 0D 02 C3 0E 31 0D 85 08
0D80  79 08 B6 04 55 2F 4D 4F C4 79 0D 05 C3 0E C4 0C
0D90  79 08 B6 04 C3 0E 2E 0C 83 12 03 00 A9 0D B6 04
0DA0  4E 45 47 41 54 C5 8B 0D 06 AB 0D 01 02 00 18 0F
0DB0  44 4E 45 47 41 54 C5 A8 0D 07 BC 0D 01 04 00 2A
0DC0  3B 3C A7 ED 42 78 9E 77 23 0D 20 F9 FD E9 AB B9
0DD0  0D 01 D4 0D DF D5 DF E1 19 EB D7 FD E9 AD D1 0D
0DE0  01 C3 0E A9 0D D2 0D B6 04 44 AB E0 0D 02 F0 0D
0DF0  DF D5 CD 4E 08 DF D5 DF EB 09 EB D7 C1 E1 ED 4A
0E00  EB D7 FD E9 31 AB ED 0D 02 0B 0E DF 18 09 32 AB
0E10  08 0E 02 15 0E DF 13 13 18 14 31 AD 12 0E 02 21
0E20  0E DF 18 09 32 AD 1E 0E 02 2B 0E DF 1B 1B D7 FD
0E30  E9 4F D2 28 0E 02 38 0E DF CD 4E 08 7B B1 5F 7A
0E40  B0 57 D7 FD E9 41 4E C4 35 0E 03 4D 0E DF CD 4E
0E50  08 7B A1 5F 7A A0 57 D7 FD E9 58 4F D2 4A 0E 03
0E60  62 0E DF CD 4E 08 7B A9 5F 7A A8 57 D7 FD E9 4D
0E70  41 D8 5F 0E 03 C3 0E 12 09 12 09 65 0C 71 12 0F
0E80  00 4D 49 CE 74 0E 03 C3 0E 12 09 12 09 56 0C 83
0E90  12 03 00 85 08 79 08 B6 04 44 45 43 49 4D 41 CC
0EA0  86 0E 07 A5 0E DD 36 3F 0A FD E9 BA A2 0E 01 85
0EB0  10 C3 0E 4B 10 0A 0E 1A 21 3E 3C 7E F6 44 77 FD
0EC0  E9 E9 FF EB C3 BA 04 43 52 45 41 54 C5 AE 0E 06
0ED0  C3 0E 4B 10 20 AB 05 FB 0E 88 06 4E 0F 80 04 B3
0EE0  08 6B 08 B3 08 4E 0F 60 04 85 08 C1 08 99 04 96
0EF0  08 5F 0F 11 10 EC 0F 4E 0F B6 04 FD 0E CD 2E 0F
0F00  DF 1A 3D FE 3F 38 02 E7 06 C6 08 4F 06 00 CD 8C
0F10  0F 1A 4F 2A 37 3C D5 CD 9E 0F D1 1A 47 13 1A CD
0F20  07 08 77 23 10 F7 22 39 3C 2B CB FE FD E9 DD CB
0F30  3E 56 28 02 E7 0C 2A 37 3C ED 5B 39 3C AF ED 52
0F40  EB 73 23 72 67 6F 22 39 3C C9 AC CF 0E 01 C3 0E
0F50  83 0F 60 04 29 0E C1 08 B6 04 43 AC 4D 0F 02 C3
0F60  0E 4B 10 01 76 0F 60 04 1F 0E A5 08 B6 04 41 4C
0F70  4C 4F D4 5E 0F 05 78 0F CD 4E 08 2A 37 3C CD 9E
0F80  0F FD E9 C3 0E 4B 10 02 76 0F B6 04 21 1E 00 C5
0F90  09 ED 4B 3B 3C 09 C1 38 03 ED 72 D8 E7 01 EB 21
0FA0  28 00 CD 8F 0F 2A 37 3C 09 22 37 3C 2A 3B 3C E5
0FB0  09 22 3B 3C E3 E5 A7 ED 52 44 4D E1 D1 C8 2B 1B
0FC0  ED B8 23 C9 56 41 52 49 41 42 4C C5 75 0F 08 85
0FD0  10 F0 0F 4E 0F B6 04 43 4F 4E 53 54 41 4E D4 CE
0FE0  0F 08 85 10 F5 0F 4E 0F B6 04 DC FE 18 02 D5 FF
0FF0  D7 FD E9 E3 FF EB 5E 23 56 D7 FD E9 4C 49 54 45
1000  52 41 CC E1 0F 47 08 11 11 10 4E 0F B6 04 02 FF
1010  FF 13 10 06 01 E1 5E 23 56 23 E5 D7 10 F7 FD E9
1020  41 53 43 49 C9 05 10 45 C3 0E 4B 10 20 AB 05 09
1030  0E 96 08 0E 1A DD CB 3E 76 28 E3 CD B9 04 11 10
1040  4B 10 4E 0F 5F 0F B6 04 01 D6 FF 4D 10 E1 5E 16
1050  00 06 01 18 C4 08 11 64 10 85 08 4E 0F 4E 0F B6
1060  04 04 FF FF 66 10 06 02 18 AB 44 45 46 49 4E 45
1070  D2 27 10 07 85 10 85 10 60 04 4B 10 0C 83 0F 76
1080  12 34 FE E6 FF CD F0 0F D0 0E 6B 08 B3 08 60 04
1090  29 0E C1 08 13 0E 9A 10 B6 04 9C 10 DF C3 C3 0E
10A0  43 41 4C CC 73 10 04 A9 10 DF EB E9 44 4F 45 53
10B0  BE F4 10 45 08 11 E8 10 D8 12 0C CD 10 4B 10 CD
10C0  5F 0F 11 10 F0 0F 4E 0F 4B 10 0A B6 04 C3 0E 6B
10D0  08 29 0E B5 15 60 04 E1 0D 1F 0E 4E 0F 60 04 85
10E0  08 C1 08 B6 04 05 C5 FF B8 04 43 4F 4D 50 49 4C
10F0  45 D2 A6 10 08 85 10 08 11 60 11 60 04 4B 10 0B
1100  83 0F 76 12 B1 FD E3 FF DD CB 3E 76 20 02 E7 04
1110  CD F0 0F 6B 08 B3 08 4E 0F 76 12 78 FF 52 55 4E
1120  53 BE B3 10 45 08 11 40 11 D8 12 0B 85 08 5F 0F
1130  CD 10 11 10 42 11 4E 0F 4B 10 0A B6 04 05 DE FF
1140  B8 04 E1 D5 EB D7 42 4B D1 D5 1B 1B CD 9E 15 D1
1150  C5 C3 C3 0E 49 4D 4D 45 44 49 41 54 C5 24 11 09
1160  C3 0E 80 04 B3 08 B3 08 0E 1A DF EB CB F6 FD E9
1170  56 4F 43 41 42 55 4C 41 52 D9 5F 11 0A 85 10 B5
1180  11 80 04 B3 08 13 0E 4E 0F 88 06 5F 0F 60 04 11
1190  10 35 3C 6B 08 B3 08 4E 0F C1 08 B6 04 44 45 46
11A0  49 4E 49 54 49 4F 4E D3 7C 11 0B AD 11 2A 33 3C
11B0  22 31 3C FD E9 ED 53 33 3C FD E9 49 C6 E0 13 42
11C0  08 11 83 12 60 04 4B 10 02 83 0F B6 04 57 48 49
11D0  4C C5 BF 11 45 08 11 88 12 D8 12 01 60 04 4B 10
11E0  04 83 0F B6 04 45 4C 53 C5 D4 11 44 08 11 71 12
11F0  D8 12 02 83 0F 25 12 60 04 29 0E 4B 10 02 B6 04
1200  54 48 45 CE EB 11 44 08 11 A4 12 D8 12 02 25 12
1210  B6 04 42 45 47 49 CE 06 12 45 08 11 9F 12 60 04
1220  4B 10 01 B6 04 C3 0E 6B 08 60 04 85 08 E1 0D 1F
1230  0E 85 08 C1 08 B6 04 C3 0E 60 04 E1 0D 1F 0E 4E
1240  0F B6 04 52 45 50 45 41 D4 19 12 46 08 11 76 12
1250  D8 12 04 85 08 37 12 25 12 B6 04 55 4E 54 49 CC
1260  4B 12 45 08 11 8D 12 D8 12 01 37 12 B6 04 02 75
1270  FF 78 12 02 CE FF 78 12 E1 5E 23 56 19 C3 BA 04
1280  02 39 FF 8F 12 02 46 FF 8F 12 02 CF FF 8F 12 CD
1290  4E 08 78 B1 28 E2 E1 23 23 C3 BA 04 00 74 FF B9
12A0  04 00 5D FF B9 04 44 CF 62 12 42 08 11 23 13 60
12B0  04 4B 10 03 B6 04 4C 4F 4F D0 AA 12 44 08 11 32
12C0  13 D8 12 03 37 12 B6 04 2B 4C 4F 4F D0 BC 12 45
12D0  08 11 3C 13 76 12 EA FF DA 12 DF E1 7E 23 E5 93
12E0  B2 28 4A E7 05 C9 AA 11 01 EB 12 C1 D1 D5 C5 D7
12F0  FD E9 49 A7 E8 12 02 F9 12 21 04 00 18 09 CA F6
1300  12 01 04 13 21 06 00 39 5E 23 56 D7 FD E9 4C 45
1310  41 56 C5 01 13 05 18 13 C1 E1 E1 E5 E5 C5 FD E9
1320  00 84 FF 25 13 CD 4E 08 DF E1 D5 C5 E5 FD E9 02
1330  85 FF 34 13 11 01 00 18 06 02 8D FF 3E 13 DF C1
1340  E1 A7 ED 5A 7A D1 37 EA 58 13 D5 E5 07 30 01 EB
1350  CD 99 0C 3F 30 02 E1 E1 C5 9F C3 94 12 A8 D4 13
1360  41 08 11 79 13 4B 10 29 60 04 85 08 83 0F 9F 13
1370  85 08 C1 08 B6 04 FF E5 FF 7B 13 E1 5E 23 56 13
1380  C3 7C 12 2E A2 60 13 42 08 11 96 13 4B 10 22 76
1390  12 D6 FF FF EE FF 98 13 D1 CD 79 09 D5 FD E9 A1
13A0  13 DF D5 CD E1 05 62 6B 09 7E E1 BD 28 0A EB D7
13B0  11 78 05 CD 15 18 18 E9 D5 C5 2A 37 3C CD 9E 0F
13C0  C1 D1 D5 C5 EB ED B0 C1 50 59 D7 D1 CD DA 07 FD
13D0  E9 DB CF 12 41 D7 13 DD CB 3E B6 FD E9 DD 15 13
13E0  01 E3 13 DD CB 3E F6 FD E9 45 58 49 D4 87 13 04
13F0  B8 04 52 45 44 45 46 49 4E C5 EF 13 08 FF 13 CD
1400  2E 0F 2A 31 3C 5E 23 56 EB 23 22 05 27 E5 CD C0
1410  15 22 0D 27 ED 43 07 27 ED 53 0B 27 2A 37 3C ED
1420  52 C2 DA 14 D1 D7 CD B9 04 10 16 3D 06 0E 1A DF
1430  21 AF C3 19 D2 CF 14 EB 22 03 27 CD C0 15 22 01
1440  27 E5 ED 53 09 27 78 B1 ED 5B 07 27 28 04 7A B3
1450  28 7D E1 ED 4B 0D 27 ED 42 EB 19 22 07 27 2A 0B
1460  27 19 ED 4B 09 27 A7 ED 42 22 0B 27 01 2E 00 09
1470  CB 7C 20 0B ED 4B 3B 3C 09 38 54 ED 72 30 50 2A
1480  03 27 E5 2B 2B 46 2B 4E 2A 05 27 E5 2B 2B 70 2B
1490  71 E1 19 C1 A7 ED 42 22 05 27 ED 5B 01 27 2A 09
14A0  27 A7 ED 52 44 4D D5 C5 CD DC 14 2A 0B 27 C1 09
14B0  44 4D E1 C5 CD 9E 0F EB 2A 0D 27 ED 4B 0B 27 09
14C0  C1 C5 E5 ED B0 D1 C1 CD DC 14 CD F8 14 FD E9 2A
14D0  31 3C ED 5B 05 27 1B 73 23 72 E7 0B 2A 37 3C A7
14E0  ED 42 22 37 3C 2A 3B 3C ED 42 22 3B 3C ED 52 C8
14F0  C5 44 4D E1 19 ED B0 C9 01 31 3C CD 57 15 CD 57
1500  15 01 40 3C 2A 37 3C 37 ED 42 D8 0A 17 03 30 FB
1510  03 03 CD 57 15 03 CD 57 15 CD FB 15 C3 0E 1C 85
1520  10 16 08 11 13 B5 11 18 00 00 21 F9 FF 09 4E 23
1530  46 2B 09 44 4D 18 CD CD 57 15 CD 48 15 18 C5 CD
1540  57 15 03 CD 57 15 18 BC CD 57 15 21 B6 04 A7 ED
1550  52 C8 CD 9E 15 18 F1 0A 5F 03 0A 57 0B CD 68 15
1560  EB 7B 02 03 7A 02 03 C9 2A 01 27 A7 ED 52 62 6B
1570  D0 2A 09 27 ED 52 30 0C 2A 0D 27 ED 52 38 13 2A
1580  0B 27 19 C9 2A 03 27 ED 52 2A 07 27 D8 2A 05 27
1590  19 C9 2A 01 27 19 ED 5B 0D 27 A7 ED 52 C9 1B 1A
15A0  17 D0 1B 1B 1A 6F 26 00 3C 20 06 0A 6F 03 0A 67
15B0  03 09 44 4D C9 B7 15 DF EB CD E7 15 EB D7 FD E9
15C0  E5 5E 23 56 CD FB 15 08 11 0B 85 10 08 00 00 01
15D0  00 00 18 07 E1 E5 23 23 4E 23 46 E1 E5 2B 2B 2B
15E0  2B 56 2B 5E 19 EB E1 2B 7C FE 3C 7E CB B7 38 02
15F0  C6 02 2B 2B 2B 3D 20 FC C9 23 E5 E1 7E 23 E5 66
1600  6F B4 C8 ED 52 E1 23 20 F0 D5 16 00 5E 19 D1 E9
1610  C3 0E 1F 0E 29 0E B3 08 80 04 B3 08 C1 08 B6 04
1620  CD B9 04 3D 06 0E 1A DF 21 AF C3 19 D8 E7 0D 46
1630  4F 52 47 45 D4 FC 13 06 3A 16 2A 31 3C ED 5B 33
1640  3C A7 ED 52 C2 DA 14 CD 20 16 21 FB FF 19 22 39
1650  3C DD CB 3E D6 E7 FF 45 44 49 D4 37 16 04 60 16
1660  CD 20 16 DD CB 3E DE 18 0C 4C 49 53 D4 5D 16 04
1670  72 16 CD 20 16 3E 0D CF DD CB 3E 5E D5 C4 D8 02
1680  C1 0A 5F 03 0A 57 0B CD FB 15 C3 0E 0B 08 11 0D
1690  85 10 1F 00 00 E7 0E 21 02 00 18 18 D5 21 02 00
16A0  09 7E 23 66 6F 2B 2B 2B 6E 7D 07 9F 67 CD 0E 18
16B0  D1 21 04 00 09 E5 C5 CD E4 17 D1 C1 CD E4 17 DD
16C0  36 14 01 DD 36 16 10 CD 08 17 38 06 DD 35 16 F2
16D0  C7 16 DD CB 3E 5E 20 10 38 28 21 26 3C 36 00 7E
16E0  A7 28 FC CD E4 04 18 DB F5 DD CB 3E 9E C5 CD B9
16F0  04 78 05 06 05 0E 1A DD CB 3E DE CD D8 02 C1 F1
1700  30 C1 DD CB 3E 9E FD E9 3A 14 3C 32 15 3C DD 36
1710  13 05 0A 5F 03 0A 57 03 CD FB 15 83 12 40 71 12
1720  44 A4 12 48 9F 12 37 8D 12 42 88 12 38 76 12 3C
1730  23 13 2B 32 13 36 3C 13 33 E8 10 29 40 11 26 11
1740  10 3B 64 10 47 4B 10 51 79 13 62 96 13 63 B6 04
1750  54 00 00 CD E1 17 DD 35 13 20 B7 A7 C9 2A 14 3C
1760  65 2C 18 0C 2A 14 3C 65 25 18 05 2A 14 3C 2D 65
1770  22 14 3C DD 36 13 01 DD 35 16 18 D7 CD DA 17 D7
1780  11 B3 09 CD C1 17 CD 15 18 18 CB CD DA 17 D7 CD
1790  DA 17 D7 11 AF 0A 18 EB 0A F5 CD E1 17 F1 CF 3E
17A0  20 CF 18 B2 CD 08 18 0D 3B 8D 37 C9 3E 29 18 02
17B0  3E 22 F5 C5 CD E1 17 D1 CD 79 09 42 4B F1 CF A7
17C0  C9 3A 15 3C A7 F8 C5 47 3E 0D CF 04 05 28 05 3E
17D0  20 CF 10 FB DD 36 15 FF C1 C9 0A 5F 03 0A 57 03
17E0  C9 CD C1 17 EB 2B 7E CB 7F 20 05 CD E8 15 18 0B
17F0  EB CD A2 15 13 1A 6F 13 1A 67 19 7E E6 7F CF CB
1800  7E 23 28 F7 3E 20 CF C9 E3 CD FB 17 E3 C9 11 B3
1810  09 D5 EB D7 D1 C5 CD BF 04 1B 18 1D 18 C1 C1 C9
1820  FD E5 E5 FD E1 21 92 18 E5 21 00 E0 CB 79 28 02
1830  26 FC 13 FD 2B F3 AF 06 97 10 FE D3 FE EE 08 2C
1840  20 01 24 20 F2 06 2B 10 FE D3 FE 69 01 08 3B 10
1850  FE 79 D3 FE 06 38 C3 8A 18 79 CB 78 10 FE 30 04
1860  06 3D 10 FE D3 FE 06 3A C2 59 18 05 AF CB 15 C2
1870  5C 18 1B FD 23 06 2E 3E 7F DB FE 1F D0 7A FE FF
1880  D0 B3 28 0B FD 6E 00 7C AD 67 AF 37 C3 6D 18 6C
1890  18 F5 FD E1 08 06 3B 10 FE AF D3 FE 3E 7F DB FE
18A0  1F FB D2 F0 04 08 C9 F3 FD E5 E5 FD E1 21 92 18
18B0  E5 61 08 AF 4F C0 2E 00 06 B8 CD 11 19 30 F6 3E
18C0  DF B8 30 F2 2C 20 F1 06 CF CD 15 19 30 E7 78 FE
18D0  D8 30 F4 CD 15 19 D0 CD FC 18 D0 3F C0 18 11 08
18E0  30 05 FD 75 00 18 05 FD 7E 00 AD C0 FD 23 1B 08
18F0  CD FC 18 D0 7A B3 20 E7 7C FE 01 C9 2E 01 06 C7
1900  CD 11 19 D0 3E E2 B8 CB 15 D2 FE 18 7C AD 67 37
1910  C9 CD 15 19 D0 3E 14 3D 20 FD A7 04 C8 3E 7F DB
1920  FE 1F D0 A9 E6 10 28 F3 79 2F 4F 37 C9 53 41 56
1930  C5 6F 16 04 C3 0E 10 1A 4F 1A B6 04 42 53 41 56
1940  C5 33 19 05 C3 0E 3D 1A 4F 1A B6 04 42 4C 4F 41
1950  C4 43 19 05 C3 0E 3D 1A 74 1A B8 1A B6 04 56 45
1960  52 49 46 D9 53 19 06 C3 0E 10 1A 71 12 0F 00 42
1970  56 45 52 49 46 D9 66 19 07 C3 0E 3D 1A 74 1A BE
1980  1A B6 04 4C 4F 41 C4 78 19 04 C3 0E 10 1A 0E 1A
1990  2A 37 3C 22 0E 23 EB 21 CC FF 39 A7 ED 52 22 0C
19A0  23 CD B9 04 74 1A B8 1A 0E 1A ED 4B 37 3C 21 50
19B0  3C 22 01 27 23 22 09 27 2A 25 23 09 22 37 3C 21
19C0  AF C3 09 22 0B 27 ED 5B 29 23 19 ED 5B 4C 3C 22
19D0  4C 3C C5 D5 ED 73 0D 27 CD 04 15 C1 E1 CB 7E 23
19E0  28 FB 23 23 71 23 70 2A 37 3C 01 0C 00 09 22 3B
19F0  3C FD E9 C3 0E 4B 10 20 AB 05 0E 1A CD 2E 0F DF
1A00  3E 20 12 11 0C 27 21 FF 27 CD FA 07 FD E9 FB 18
1A10  C3 0E F3 19 0E 1A AF 32 01 23 21 51 3C 22 0E 23
1A20  EB 2A 37 3C A7 ED 52 22 0C 23 2A 4C 3C 22 10 23
1A30  21 31 3C 11 12 23 01 08 00 ED B0 FD E9 C3 0E F3
1A40  19 11 10 0C 23 C1 08 11 10 0E 23 C1 08 B6 04 51
1A50  1A 3A 02 23 A7 28 5F 2A 0C 23 7C B5 28 58 E5 11
1A60  19 00 21 01 23 4A CD 20 18 D1 2A 0E 23 0E FF CD
1A70  20 18 FD E9 76 1A 11 19 00 21 1A 23 4A 37 CD A7
1A80  18 30 F3 11 1A 23 1A A7 20 0B CD 08 18 0D 44 69
1A90  63 74 BA 18 0A CD 08 18 0D 42 79 74 65 73 BA 21
1AA0  01 23 01 0B 0B 18 02 1A CF 1A BE 20 01 0D 23 13
1AB0  10 F5 20 C2 FD E9 E7 0A BA 1A 06 FF 18 12 C0 1A
1AC0  21 12 23 11 2B 23 06 08 1A 13 BE 23 20 E8 10 F8
1AD0  2A 0C 23 ED 5B 25 23 7C B5 28 04 ED 52 38 D7 2A
1AE0  0E 23 7C B5 20 03 2A 27 23 0E FF CB 18 CD A7 18
1AF0  30 C4 FD E9 01 0F 3C AF 02 0D 20 FC 2A 3B 3C 11
1B00  FC FF 2B 4E 77 19 23 22 3B 3C 2B 46 77 79 0F A8
1B10  E6 7F A8 32 02 3C CB B8 CB B9 ED 43 00 3C 23 EB
1B20  19 C9 3E 09 B8 30 01 47 0E 04 23 23 23 AF ED 67
1B30  2B 0D 20 FA 23 10 F1 C6 FB E5 7E 88 27 77 23 38
1B40  F9 E1 C9 C5 E5 06 04 A7 3E 00 9E 27 77 23 10 F8
1B50  E1 C1 C9 0E 01 E5 D5 C5 79 E6 0F 47 A9 4F 0F 0F
1B60  81 0F 80 4F 06 04 AF C5 D5 E5 86 27 6F 1A 26 00
1B70  54 CB 14 A7 28 1B 5F CB 39 30 08 7D 83 27 6F 7C
1B80  8A 27 67 0C 0D 28 0A 7B 87 27 5F 7A 8F 27 57 18
1B90  E6 EB E1 73 7A D1 C1 13 23 10 CC C1 D1 E1 C9 46
1BA0  AD 89 19 02 C3 0E 0F 1D 0E 1A 18 07 46 AB A3 1B
1BB0  02 B3 1B CD F4 1A 79 90 F5 30 06 EB ED 44 DD 70
1BC0  00 47 C4 22 1B F1 30 01 EB 06 02 DD 4E 02 CB 11
1BD0  DC 43 1B EB 10 F8 CD 53 1B 1B 1A C6 68 CB 18 DD
1BE0  70 02 C4 43 1B 1A A7 20 19 DD 35 00 DD 35 00 D5
1BF0  62 6B 2B 01 FF 03 B6 ED A8 10 FB EB 70 D1 20 E5
1C00  FD E9 54 5D D5 01 04 00 ED B0 E1 1B 1A A7 28 11
1C10  FE 10 9F 3C 3C 47 DD 86 00 32 00 3C CD 22 1B 18
1C20  EB 3A 00 3C 3D FE BF 3C 30 13 FE 80 30 0D 47 3A
1C30  02 3C 4F 17 A9 E6 80 A8 12 FD E9 E7 08 01 00 04
1C40  71 23 10 FC FD E9 46 AA B0 1B 02 4D 1C CD F4 1A
1C50  AF B8 9F A1 28 E7 E5 01 02 3C C5 06 03 4E 23 E3
1C60  23 CD 55 1B E3 10 F6 ED 4B 00 3C 78 81 D6 42 32
1C70  00 3C E1 D1 18 8E 46 AF 4A 1C 02 7D 1C CD F4 1A
1C80  AF B8 28 B9 B9 28 B4 13 13 1A 1B 1B C6 01 27 08
1C90  EB CD 43 1B EB E5 11 10 3C 01 04 00 ED B0 EB 2B
1CA0  06 05 D5 7E 2B 5E 08 4F 08 0C 0D 20 03 5F 18 1B
1CB0  C5 06 02 16 10 CB 23 17 CB 12 30 F9 14 91 27 1C
1CC0  30 FB 15 20 F8 81 27 1D 10 E9 C1 4B D1 0C 0D 28
1CD0  17 E5 2B 2B CD 55 1B D5 11 FB FF 19 11 03 3C 79
1CE0  12 CD 53 1B D1 E1 23 04 10 B8 2A 00 3C 7C 95 C6
1CF0  40 21 08 3C 47 3A 0B 3C A7 20 03 05 05 2B DD 70
1D00  00 D1 C3 04 1C 46 4E 45 47 41 54 C5 7A 1C 07 11
1D10  1D DF 7A A7 28 02 EE 80 57 D7 FD E9 49 4E D4 0E
1D20  1D 03 24 1D 2A 3B 3C 2B 11 00 00 7E 07 FE 82 38
1D30  14 AF 2B CD 32 07 23 EB 44 4D 29 29 09 29 4F 06
1D40  00 09 EB 18 E6 2B 2B 72 2B 73 11 94 0D C3 BF 04
1D50  55 46 4C 4F 41 D4 21 1D 06 5B 1D DF EB 01 00 10
1D60  51 59 29 7B 8F 27 5F 7A 8F 27 57 CB 11 10 F3 D7
1D70  16 46 59 D7 2B 2B CD 40 07 FD E9 00 00 00 00 00
1D80  00 00 10 10 10 10 00 10 00 24 24 00 00 00 00 00
1D90  24 7E 24 24 7E 24 00 08 3E 28 3E 0A 3E 08 62 64
1DA0  08 10 26 46 00 10 28 10 2A 44 3A 00 08 10 00 00
1DB0  00 00 00 04 08 08 08 08 04 00 20 10 10 10 10 20
1DC0  00 00 14 08 3E 08 14 00 00 08 08 3E 08 08 00 00
1DD0  00 00 00 08 08 10 00 00 00 3E 00 00 00 00 00 00
1DE0  00 18 18 00 00 02 04 08 10 20 00 3C 46 4A 52 62
1DF0  3C 00 18 28 08 08 08 3E 00 3C 42 02 3C 40 7E 00
1E00  3C 42 0C 02 42 3C 00 08 18 28 48 7E 08 00 7E 40
1E10  7C 02 42 3C 00 3C 40 7C 42 42 3C 00 7E 02 04 08
1E20  10 10 00 3C 42 3C 42 42 3C 00 3C 42 42 3E 02 3C
1E30  00 00 00 10 00 00 10 00 00 10 00 00 10 10 20 00
1E40  04 08 10 08 04 00 00 00 3E 00 3E 00 00 00 10 08
1E50  04 08 10 00 3C 42 04 08 00 08 3C 4A 56 5E 40 3C
1E60  3C 42 42 7E 42 42 7C 42 7C 42 42 7C 3C 42 40 40
1E70  42 3C 78 44 42 42 44 78 7E 40 7C 40 40 7E 7E 40
1E80  7C 40 40 40 3C 42 40 4E 42 3C 42 42 7E 42 42 42
1E90  3E 08 08 08 08 3E 02 02 02 42 42 3C 44 48 70 48
1EA0  44 42 40 40 40 40 40 7E 42 66 5A 42 42 42 42 62
1EB0  52 4A 46 42 3C 42 42 42 42 3C 7C 42 42 7C 40 40
1EC0  3C 42 42 52 4A 3C 7C 42 42 7C 44 42 3C 40 3C 02
1ED0  42 3C FE 10 10 10 10 10 42 42 42 42 42 3E 42 42
1EE0  42 42 24 18 42 42 42 42 5A 24 42 24 18 18 24 42
1EF0  82 44 28 10 10 10 7E 04 08 10 20 7E 0E 08 08 08
1F00  08 0E 00 40 20 10 08 04 70 10 10 10 10 70 10 38
1F10  54 10 10 10 00 00 00 00 00 00 FF 1C 22 78 20 20
1F20  7E 00 00 38 04 3C 44 3E 00 20 20 3C 22 22 3C 00
1F30  00 1C 20 20 20 1C 00 04 04 3C 44 44 3E 00 00 38
1F40  44 78 40 3C 00 0C 10 18 10 10 10 00 00 3C 44 44
1F50  3C 04 38 40 40 78 44 44 44 00 10 00 30 10 10 38
1F60  00 04 00 04 04 04 24 18 20 28 30 30 28 24 00 10
1F70  10 10 10 10 0C 00 00 68 54 54 54 54 00 00 78 44
1F80  44 44 44 00 00 38 44 44 44 38 00 00 78 44 44 78
1F90  40 40 00 3C 44 44 3C 04 06 00 1C 20 20 20 20 00
1FA0  00 38 40 38 04 78 00 10 38 10 10 10 0C 00 00 44
1FB0  44 44 44 3C 00 00 44 44 28 28 10 00 00 44 54 54
1FC0  54 28 00 00 44 28 10 28 44 00 00 44 44 44 3C 04
1FD0  38 00 7C 08 10 20 7C 00 0E 08 30 30 08 0E 00 08
1FE0  08 08 08 08 08 00 70 10 0C 0C 10 70 00 32 4C 00
1FF0  00 00 00 00 3C 42 99 A1 A1 99 42 3C FF 58 1D 00


tasm: Number of errors = 0
