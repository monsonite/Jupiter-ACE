0000                             ;#define DB    .BYTE 
0000                             ;#define DW    .WORD
0000                             ;#define DB   .TEXT
0000                             ;#define EQU     .EQU
0000                             ;#define ORG     .ORG
0000                             ; 
0000                          .ORG   $0000   
0000                             ; 
0000                             ; -------------------
0000                             ; THE "START" RESTART
0000                             ; -------------------
0000                             ; 
0000   F3           L0000:    DI      ; disable interrupts.
0001   21 00 3C               LD   HL,$3C00   ; start of "User" RAM
0004   3E FC                  LD   A,$FC   ; a test byte and 1K masking byte.
0006   18 20                  JR   L0028   ; forward to continue at Part 2.
0008                             ; 
0008                             ; -------------------
0008                             ; THE "PRINT" RESTART
0008                             ; -------------------
0008                             ; 
0008   D9           L0008:    EXX      ; preserve main registers.
0009   DD CB 3E 5E            BIT   3,(IX+$3E)   ; test FLAGS for print destination.
000D   C3 EE 03               JP   L03EE   ; forward to
0010                             ; 
0010                             ; ---------------------------
0010                             ; THE "STACK WORD DE" RESTART
0010                             ; ---------------------------
0010                             ; 
0010   2A 3B 3C     L0010:    LD   HL,($3C3B)   ; SPARE
0013   73                     LD   (HL),E   
0014   23                     INC   HL   
0015   C3 5F 08               JP   L085F   ; 
0018                             ; 
0018                             ; -------------------------
0018                             ; THE "POP WORD DE" RESTART
0018                             ; -------------------------
0018                             ; 
0018                             ; 
0018   2A 3B 3C     L0018:    LD   HL,($3C3B)   ; SPARE
001B   2B                     DEC   HL   
001C   56                     LD   D,(HL)   
001D   C3 59 08               JP   L0859   ; 
0020                             ; 
0020                             ; -------------------
0020                             ; THE "ERROR" RESTART
0020                             ; -------------------
0020                             ; 
0020   E1           L0020:    POP   HL   
0021   7E                     LD   A,(HL)   
0022   32 3D 3C               LD   ($3C3D),A   ; ERR_NO
0025   C3 AD 00               JP   L00AD   ; 
0028                             ; 
0028                             ; ------------------------------------
0028                             ; THE "INITIALIZATION ROUTINE" Part 2.
0028                             ; ------------------------------------
0028                             ; 
0028   24           L0028:    INC   H   ; increase high byte
0029   77                     LD   (HL),A   ; insert A value
002A   BE                     CP   (HL)   ; compare to expected
002B   28 FB                  JR   Z,L0028   ; loop back while RAM is populated.
002D                             ; 
002D   A4                     AND   H   ; limit to nearest 1K segment.
002E   67                     LD   H,A   ; place back in H.
002F   22 18 3C               LD   ($3C18),HL   ; set system variable RAMTOP.
0032   F9                     LD   SP,HL   ; initialize the stack pointer.
0033                             ; 
0033                             ; the Z80 instructions CALL, PUSH and POP can now be used.
0033                             ; 
0033   21 0D 01               LD   HL,L010D   ; prepare to copy the system variables
0036                             ; initial state from ROM.
0036   18 03                  JR   L003B   ; skip past the fixed-position restart.
0038                             ; 
0038                             ; -----------------------
0038                             ; THE "INTERRUPT" RESTART
0038                             ; -----------------------
0038                             ; 
0038   C3 3A 01     L0038:    JP   L013A   ; jump to somewhere more convenient.
003B                             ; 
003B                             ;------------------------------------------------------------------------------
003B                             ; 
003B                             ; MEMORY MAP
003B                             ; 
003B                             ; $0000 +======================================================+
003B                             ;       |                                                      |
003B                             ;       |                   ROM 8K                             |
003B                             ;       |                                     v $2300          |
003B                             ; $2000 +======================================================+ - - - - - -
003B                             ;       |       copy of $2400                 |0|<  cassette  >|
003B                             ; $2400 +-------------------------------------+-+--------------+
003B                             ;       |       VIDEO MEMORY 768 bytes        |0| PAD 254 bytes| 1K RAM
003B                             ; $2800 +-------------------------------------+-+--------------+
003B                             ;       |       copy of $2c00                 ^ $2700          |
003B                             ; $2C00 +------------------------------------------------------+
003B                             ;       |       CHARACTER SET - Write-Only                     | 1K RAM
003B                             ; $3000 +------------------------------------------------------+
003B                             ;       |       copy of $3c00                                  |
003B                             ; $3400 +------------------------------------------------------+
003B                             ;       |       copy of $3c00                                  |
003B                             ; $3800 +------------------------------------------------------+
003B                             ;       |       copy of $3c00                                  |
003B                             ; $3C00 +-------+----------------------------------------------+
003B                             ;       |SYSVARS| DICT 00bbMTI= DATA STACK ->         <- RET STACK | 1K RAM
003B                             ; $4000 +=======+==============================================+ - - - - - -
003B                             ;       |                                                      |
003B                             ;                       48K AVAILABLE FOR EXPANSION.
003B                             ;       |                                                      |
003B                             ; $FFFF +======================================================+
003B                             ; 
003B                             ; The Ace had an 8K ROM and was sold with 3K of RAM each byte of which had
003B                             ; at least two addresses and sometimes four addresses so the mapping of the
003B                             ; 3K of RAM was as above.
003B                             ; The 768 bytes of video memory is accessed by the ROM using addresses
003B                             ; $2400 - $26FF. This gives priority to the video circuitry which also needs
003B                             ; this information to build the TV picture. The byte at $2700 is set to zero
003B                             ; so that it is easy for the ROM to detect when it is at the end of the screen.
003B                             ; The 254 bytes remaining are the PAD - the workspace used by FORTH.
003B                             ; This same area is used by the tape recorder routines to assemble the tape
003B                             ; header information but since, for accurate tape timing, the FORTH ROM needs
003B                             ; priority over the video circuitry, then the ROM uses addresses $2301 - $23FF.
003B                             ; 
003B                             ; Similarly the Character Set is written to by the ROM (and User) at the 1K
003B                             ; section starting at $2C00. The video circuitry accesses this using addresses
003B                             ; $2800 - $2BFF to build the TV picture. It is not possible for the ROM or User
003B                             ; to read back the information from either address so this precludes the saving
003B                             ; of character sets and writing a driver for a device like the ZX Printer.
003B                             ; 
003B                             ; The final 1K or RAM has four addresses although it is normal to use addresses
003B                             ; $3C00 - $3FFF. The first sixty three bytes are the System Variables which
003B                             ; hold information like the number BASE and CONTEXT, and even the plotting
003B                             ; coordinates should the user wish to develop a word like DRAW to draw lines.
003B                             ; 
003B                             ; Then comes the User Dictionary, the first word of which is "FORTH" which links
003B                             ; to the Dictionary in ROM. Next a gap of 12 bytes to allow for Data Stack
003B                             ; underflow and then the Data Stack itself which grows upwards.
003B                             ; At the opposite end of free memory is the Return Stack (machine stack) which
003B                             ; grows downwards.
003B                             ; 
003B                             ; ------------------------------------
003B                             ; THE "INITIALIZATION ROUTINE" Part 3.
003B                             ; ------------------------------------
003B                             ; 
003B   11 24 3C     L003B:    LD   DE,$3C24   ; destination system variable L_HALF
003E   01 2D 00               LD   BC,$002D   ; number of bytes.
0041   ED B0                  LDIR      ; copy initial state from ROM to RAM.
0043                             ; 
0043   DD 21 00 3C            LD   IX,$3C00   ; set IX to index the system variables.
0047   FD 21 C8 04            LD   IY,L04C8   ; set IY to the SLOW return address.
004B                             ; 
004B   CD 24 0A     L004B:    CALL   L0A24   ; routine CLS.
004E                             ; 
004E   AF                     XOR   A   ; clear accumulator.
004F                             ; 
004F   32 00 27               LD   ($2700),A   ; make location after screen zero.
0052                             ; 
0052                             ; There are 128 bit-mapped 8x8 characters.
0052                             ; Define the 8 Battenberg graphics ($10 to $17) from low byte of address.
0052                             ; This routine also sets the other characters $00 to $0F and $18 to $1F
0052                             ; to copies of this range. The inverse form of character $17 is used as the
0052                             ; normal cursor - character $97.
0052                             ; 
0052   21 00 2C     L0052:    LD   HL,$2C00   ; point to the start of the 1K write-
0055                             ; only Character Set RAM.
0055                             ; 
0055   7D           L0055:    LD   A,L   ; set A to low byte of address
0056   E6 BF                  AND   $BF   ; AND %10111111
0058   0F                     RRCA      ; rotate
0059   0F                     RRCA      ; three times
005A   0F                     RRCA      ; to test bit 2
005B   30 02                  JR   NC,L005F   ; forward if not set.
005D                             ; 
005D   0F                     RRCA      ; else rotate
005E   0F                     RRCA      ; twice more.
005F                             ; 
005F   0F           L005F:    RRCA      ; set carry from bit (3) or (6)
0060                             ; 
0060   47                     LD   B,A   
0061                             ; 
0061   9F                     SBC   A,A   ; $00 or $FF
0062   CB 18                  RR   B   
0064   47                     LD   B,A   
0065   9F                     SBC   A,A   
0066   A8                     XOR   B   
0067   E6 F0                  AND   $F0   
0069   A8                     XOR   B   
006A   77                     LD   (HL),A   ; insert the byte.
006B   2C                     INC   L   ; increment low byte of address
006C   20 E7                  JR   NZ,L0055   ; loop back until the first 256 bytes
006E                             ; have been filled with 32 repeating
006E                             ; characters.
006E                             ; 
006E                             ; Now copy the bit patterns at the end of this ROM to the last 768 bytes of
006E                             ; the Character RAM, filling in some blank bytes omitted to save ROM space.
006E                             ; This process starts at high memory and works downwards.
006E                             ; 
006E   11 FF 2F     L006E:    LD   DE,$2FFF   ; top of destination.
0071   21 FB 1F               LD   HL,L1FFB   ; end of copyright character.
0074   01 08 00               LD   BC,$0008   ; 8 characters
0077                             ; 
0077   ED B8                  LDDR      ; copy the  Â©  character
0079                             ; 
0079   EB                     EX   DE,HL   ; switch pointers.
007A                             ; 
007A   3E 5F                  LD   A,$5F   ; set character counter to ninety five.
007C                             ; i.e. %0101 1111
007C                             ; bit 5 shows which 32-character sector
007C                             ; we are in.
007C                             ; 
007C                             ; enter a loop for the remaining characters supplying zero bytes as required.
007C                             ; 
007C   0E 07        L007C:    LD   C,$07   ; set byte counter to seven.
007E                             ; 
007E   CB 6F                  BIT   5,A   ; test bit 5 of the counter.
0080   28 03                  JR   Z,L0085   ; forward if not in middle section
0082                             ; which includes "[A-Z]"
0082                             ; 
0082   70                     LD   (HL),B   ; else insert a zero byte.
0083   2B                     DEC   HL   ; decrement the destination address.
0084   0D                     DEC   C   ; and the byte counter.
0085                             ; 
0085   EB           L0085:    EX   DE,HL   ; switch pointers.
0086                             ; 
0086   ED B8                  LDDR      ; copy the 5 or 6 characters.
0088                             ; 
0088   EB                     EX   DE,HL   ; switch pointers.
0089                             ; 
0089   70                     LD   (HL),B   ; always insert the blank top byte.
008A   2B                     DEC   HL   ; decrement the address.
008B                             ; 
008B   3D                     DEC   A   ; decrement the character counter.
008C                             ; 
008C   20 EE                  JR   NZ,L007C   ; back for all 95 characters.
008E                             ; 
008E   ED 56                  IM   1   ; Select Interrupt Mode 1
0090                             ; 
0090   18 09                  JR   L009B   ; and then jump into the code for the
0092                             ; QUIT word.
0092                             ; 
0092                             ; 
0092                             ; ---------------
0092                             ; THE "QUIT" WORD
0092                             ; ---------------
0092                             ; (  --  )
0092                             ; Clears return stack, empties input buffer and returns control to the
0092                             ; keyboard.
0092                             ; 
0092   51 55 49     L0092:    DB   "QUI"   ; "name field"
0095   D4                     DB   "T" + $80   
0096                             ; 
0096   00 00        L0096:    DW   $0000   ; "link field" - end of linked list.
0098                             ; 
0098   04           L0098:    DB   $04   ; "name length field"
0099                             ; 
0099   9B 00        L0099:    DW   L009B   ; "code field"
009B                             ; address of machine code for routine.
009B                             ; 
009B                             ; ---
009B                             ; 
009B   ED 7B 18 3C  L009B:    LD   SP,($3C18)   ; set stack-pointer to RAMTOP.
009F                             ; 
009F   FB                     EI      ; Enable Interrupts.
00A0                             ; 
00A0   C3 F2 04               JP   L04F2   ; jump forward to the main execution
00A3                             ; loop.
00A3                             ; 
00A3                             ; ----------------
00A3                             ; THE "ABORT" WORD
00A3                             ; ----------------
00A3                             ; Clears the data and return stacks, deletes any incomplete definition
00A3                             ; left in the dictionary, prints "ERROR" and the byte from address $3C3D
00A3                             ; if the byte is non-negative, empties the input buffer, and returns
00A3                             ; control to the keyboard.
00A3                             ; 
00A3                             ; 
00A3   41 42 4F 52  L00A3:    DB   "ABOR"   ; "name field"
00A7   D4                     DB   "T" + $80   
00A8                             ; 
00A8   98 00                  DW   L0098   ; "link field" to previous word QUIT.
00AA                             ; 
00AA   05           L00AA:    DB   $05   ; "name length field"
00AB                             ; 
00AB   AD 00        L00AB:    DW   L00AD   ; "code field"
00AD                             ; 
00AD                             ; ---
00AD                             ; 
00AD                             ; -> also continuation of the error restart.
00AD                             ; 
00AD   FD E5        L00AD:    PUSH   IY   ; preserve current IY value slow/fast.
00AF                             ; 
00AF   FD 21 B9 04            LD   IY,L04B9   ; set IY to FAST
00B3                             ; now empty the data stack
00B3   2A 37 3C               LD   HL,($3C37)   ; STKBOT
00B6   22 3B 3C               LD   ($3C3B),HL   ; SPARE
00B9   21 3E 3C               LD   HL,$3C3E   ; address FLAGS
00BC   7E                     LD   A,(HL)   ; fetch status from FLAGS.
00BD   E6 B3                  AND   $B3   ; AND %10110011
00BF                             ; reset bit 2 - show definition complete
00BF                             ; reset bit 3 - output to screen.
00BF                             ; reset bit 6 - show in interpreter mode
00BF   CB 56                  BIT   2,(HL)   ; was there an incomplete definition ?
00C1   77                     LD   (HL),A   ; update FLAGS
00C2   28 1A                  JR   Z,L00DE   ; forward if no incomplete word.
00C4                             ; 
00C4   CD B9 04     L00C4:    CALL   L04B9   ; do forth
00C7                             ; 
00C7   90 04                  DW   L0490   ; dict          address of sv DICT
00C9   B3 08                  DW   L08B3   ; @             value of sv DICT (d).
00CB   4B 10                  DW   L104B   ; stk_data      d.         length field
00CD   05                     DB   $05   ; five          d, 5.
00CE   D2 0D                  DW   L0DD2   ; +             d+5.       code field
00D0   6B 08                  DW   L086B   ; dup           d+5, d+5.
00D2   10 16                  DW   L1610   ; prvcur        d+5.
00D4   B5 15                  DW   L15B5   ; namefield     n.
00D6   11 10                  DW   L1011   ; stackwrd      n.
00D8   37 3C                  DW   $3C37   ; (stkbot)      n, stkbot.
00DA   C1 08                  DW   L08C1   ; !             .
00DC   0E 1A                  DW   L1A0E   ; end-forth.    .
00DE                             ; 
00DE                             ; at this stage the system variable STKBOT holds the address of the
00DE                             ; obsolete name field and the system variable CURRENT points to the
00DE                             ; address of the previous complete word - obtained from the old link field.
00DE                             ; 
00DE   DD CB 3D 7E  L00DE:    BIT   7,(IX+$3D)   ; test ERR_NO for normal value 255.
00E2   20 1B                  JR   NZ,L00FF   ; set-min then main-loop if OK.
00E4                             ; 
00E4   CD 08 18               CALL   L1808   ; else pr-inline
00E7                             ; 
00E7                             ; ---
00E7                             ; 
00E7   45 52 52 4F  L00E7:    DB   "ERRO"   ; the message "ERROR" with the last
00EB   D2                     DB   "R" + $80   ; character inverted.
00EC                             ; 
00EC                             ; ---
00EC                             ; 
00EC   CD B9 04     L00EC:    CALL   L04B9   ; forth
00EF                             ; 
00EF   11 10                  DW   L1011   ; stack next word
00F1   3D 3C                  DW   $3C3D   ; -> system variable ERR_NO
00F3   96 08                  DW   L0896   ; C@            - fetch content byte
00F5   B3 09                  DW   L09B3   ; .             - print it
00F7   95 0A                  DW   L0A95   ; CR
00F9   0E 1A                  DW   L1A0E   ; end-forth.
00FB                             ; 
00FB   DD 36 3D FF            LD   (IX+$3D),$FF   ; set ERR_NO to "No Error"
00FF                             ; 
00FF   2A 37 3C     L00FF:    LD   HL,($3C37)   ; fetch STKBOT
0102   01 0C 00               LD   BC,$000C   ; allow twelve bytes for stack underflow
0105   09                     ADD   HL,BC   ; add the extra
0106   22 3B 3C               LD   ($3C3B),HL   ; set SPARE
0109   FD E1                  POP   IY   ; restore previous state of IY
010B                             ; 
010B   18 8E                  JR   L009B   ; rejoin main loop
010D                             ; 
010D                             ; -------------------------
010D                             ; THE "DEFAULT ENVIRONMENT"
010D                             ; -------------------------
010D                             ; This is the default environment that is copied from ROM to RAM as part of
010D                             ; the initialization process. This also contains the FORTH word FORTH definition
010D                             ; 
010D   E0 26        L010D:    DW   $26E0   ; L_HALF
010F                             ; 
010F   00                     DB   $00   ; KEYCOD
0110   00                     DB   $00   ; KEYCNT copy the 32 bytes.
0111   00                     DB   $00   ; STATIN
0112   00 00                  DW   $0000   ; EXWRCH
0114   00                     DB   $00   ; FRAMES
0115   00                     DB   $00   ; FRAMES
0116   00                     DB   $00   ; FRAMES
0117   00                     DB   $00   ; FRAMES
0118   00                     DB   $00   ; XCOORD
0119   00                     DB   $00   ; YCOORD
011A   4C 3C                  DW   $3C4C   ; CURRENT
011C   4C 3C                  DW   $3C4C   ; CONTEXT
011E   4F 3C                  DW   $3C4F   ; VOCLNK
0120   51 3C                  DW   $3C51   ; STKBOT
0122   45 3C                  DW   $3C45   ; DICT
0124   5D 3C                  DW   $3C5D   ; SPARE
0126   FF                     DB   $FF   ; ERR_NO
0127   00                     DB   $00   ; FLAGS
0128   0A                     DB   $0A   ; BASE
0129                             ; 
0129                             ; FORTH
0129                             ; 
0129   46 4F 52 54            DB   "FORT"   ; The "name field"
012D   C8                     DB   "H" + $80   ; FORTH
012E                             ; 
012E                             ; 
012E   00 00                  DW   $0000   ; length field - filled when next word
0130                             ; is defined.
0130   FF 1F                  DW   L1FFF   ; link field copied to $3C49.
0132   05                     DB   $05   ; name length field
0133   B5 11                  DW   L11B5   ; code field
0135   49 3C                  DW   $3C49   ; address of parameters
0137   00                     DB   $00   ; VOCLNK                        [$3C4F]
0138   00                     DB   $00   ; - link to next vocabulary.
0139   00                     DB   $00   ; last byte to be copied.    to [$3C51]
013A                             ; 
013A                             ; -----------------------------------------------
013A                             ; THE "CONTINUATION OF THE Z80 INTERRUPT" ROUTINE
013A                             ; -----------------------------------------------
013A                             ; The destination of the jump at $0038.
013A                             ; Begin by saving both accumulators and the 3 main registers.
013A                             ; 
013A   F5           L013A:    PUSH   AF   ; preserve both accumulators
013B   08                     EX   AF,AF'   ; 
013C   F5                     PUSH   AF   ; 
013D                             ; 
013D   C5                     PUSH   BC   ; and main registers.
013E   D5                     PUSH   DE   ; 
013F   E5                     PUSH   HL   ; 
0140                             ; 
0140                             ; Now wait for 62 * 12 clock cycles. ( To avoid flicker perhaps? ).
0140                             ; 
0140   06 3E                  LD   B,$3E   ; delay counter.
0142                             ; 
0142   10 FE        L0142:    DJNZ   L0142   ; self loop for delay
0144                             ; 
0144                             ; Increment the 4-byte frames counter for use as a system clock.
0144                             ; 
0144   21 2B 3C               LD   HL,$3C2B   ; FRAMES1
0147                             ; 
0147   34           L0147:    INC   (HL)   ; increment timer.
0148   23                     INC   HL   ; next significant byte of four.
0149   28 FC                  JR   Z,L0147   ; loop back if the value wrapped back
014B                             ; to zero.
014B                             ; 
014B                             ; Note. as manual points out, there is no actual check on this and if
014B                             ; you leave your Ace switched on for 2.75 years it will advance to the
014B                             ; following system variables although it takes several millennia to advance
014B                             ; through the screen coordinates.
014B                             ; 
014B                             ; Now read the keyboard and if no new key then exit after restoring the
014B                             ; preserved registers.
014B                             ; 
014B   CD 10 03               CALL   L0310   ; routine KEYBOARD.
014E                             ; 
014E   21 28 3C               LD   HL,$3C28   ; address system variable STATIN
0151                             ; 
0151   CB 46                  BIT   0,(HL)   ; new key?
0153   28 21                  JR   Z,L0176   ; forward if not to RESTORE/EXIT
0155                             ; 
0155   A7                     AND   A   ; zero key code ?
0156   28 1E                  JR   Z,L0176   ; forward if so to EXIT.
0158                             ; 
0158   FE 20                  CP   $20   ; compare to SPACE
015A   38 14                  JR   C,L0170   ; forward if less as an Editing Key.
015C                             ; 
015C   CB 4E                  BIT   1,(HL)   ; CAPS shift?
015E   C4 07 08               CALL   NZ,L0807   ; routine TO_UPPER
0161                             ; 
0161   CB 56                  BIT   2,(HL)   ; GRAPHICS mode?
0163   28 02                  JR   Z,L0167   ; skip forward if not
0165                             ; 
0165   E6 9F                  AND   $9F   ; convert to one of 8 mosaic characters
0167                             ; 
0167   CB 5E        L0167:    BIT   3,(HL)   ; INVERSE mode?
0169   28 02                  JR   Z,L016D   ; forward if not.
016B                             ; 
016B   F6 80                  OR   $80   ; set bit 7 to make character inverse.
016D                             ; 
016D   CD 96 01     L016D:    CALL   L0196   ; routine pr_buffer
0170                             ; 
0170   CD E6 01     L0170:    CALL   L01E6   ; routine EDIT_KEY
0173   CD 82 02               CALL   L0282   ; routine pr_cursor
0176                             ; 
0176                             ; Before exiting restore the preserved registers.
0176                             ; 
0176   E1           L0176:    POP   HL   ; 
0177   D1                     POP   DE   ; 
0178   C1                     POP   BC   ; 
0179   F1                     POP   AF   ; 
017A   08                     EX   AF,AF'   ; 
017B   F1                     POP   AF   ; 
017C                             ; 
017C   FB                     EI      ; Enable Interrupts
017D                             ; 
017D   C9                     RET      ; return.
017E                             ; 
017E                             ; -----------------------------------
017E                             ; THE "PRINT to LOWER SCREEN" ROUTINE
017E                             ; -----------------------------------
017E                             ; 
017E   FE 0D        L017E:    CP   $0D   ; carriage return?
0180   20 14                  JR   NZ,L0196   ; forward if not
0182                             ; 
0182                             ; a carriage return to input buffer i.e. lower screen memory.
0182                             ; 
0182   21 00 27               LD   HL,$2700   ; set pointer to location after the
0185                             ; input buffer.
0185                             ; 
0185   22 22 3C               LD   ($3C22),HL   ; set ENDBUF - end of logical line
0188   22 20 3C               LD   ($3C20),HL   ; set the CURSOR
018B                             ; 
018B   AF                     XOR   A   ; clear A
018C                             ; 
018C   CD 98 01               CALL   L0198   ; print character zero.
018F                             ; 
018F   21 E0 26               LD   HL,$26E0   ; left hand position of bottom line.
0192   22 1E 3C               LD   ($3C1E),HL   ; set INSCRN to this position.
0195   C9                     RET      ; return.
0196                             ; 
0196                             ; ---------------------------------------
0196                             ; THE "PRINT CHARACTER TO BUFFER" ROUTINE
0196                             ; ---------------------------------------
0196                             ; 
0196   A7           L0196:    AND   A   ; check for zero character
0197   C8                     RET   Z   ; return if so.
0198                             ; 
0198                             ; => also called from previous routine only to print a zero skipping above test.
0198                             ; 
0198   08           L0198:    EX   AF,AF'   ; preserve the output character.
0199                             ; 
0199   2A 22 3C               LD   HL,($3C22)   ; fetch ENDBUF end of logical line
019C   7E                     LD   A,(HL)   ; fetch character from position
019D   A7                     AND   A   ; is it zero ?
019E   28 06                  JR   Z,L01A6   ; skip forward if so.
01A0                             ; 
01A0                             ; else lower screen scrolling is required.
01A0                             ; 
01A0   11 00 D9               LD   DE,$D900   ; $0000 - $2700
01A3   19                     ADD   HL,DE   ; test if position is within video RAM
01A4   30 28                  JR   NC,L01CE   ; forward if < $26FF
01A6                             ; 
01A6                             ; now check that the limit of 22 lines in lower screen is not exceeded.
01A6                             ; 
01A6   ED 5B 24 3C  L01A6:    LD   DE,($3C24)   ; fetch start of buffer from L_HALF
01AA   21 A0 DB               LD   HL,$DBA0   ; $0000 - $2460
01AD   19                     ADD   HL,DE   ; 
01AE   30 34                  JR   NC,L01E4   ; forward to exit if buffer full.
01B0                             ; 
01B0                             ; 
01B0   2A 1C 3C               LD   HL,($3C1C)   ; fetch position SCRPOS for upper screen
01B3   01 20 00               LD   BC,$0020   ; allow an extra 32 characters - 1 line.
01B6   09                     ADD   HL,BC   ; 
01B7   ED 52                  SBC   HL,DE   ; subtract the start of input buffer
01B9   D5                     PUSH   DE   ; and save the L_HALF value
01BA                             ; 
01BA   D4 21 04               CALL   NC,L0421   ; routine to scroll upper display.
01BD                             ; 
01BD   CD B0 02               CALL   L02B0   ; find zerobyte loc in HL
01C0                             ; 
01C0   D1                     POP   DE   ; retrieve the L_HALF value
01C1                             ; 
01C1   CD 2F 04               CALL   L042F   ; routine scroll and blank
01C4                             ; 
01C4                             ; The four system variables INSCRN, CURSOR, ENDBUF and L_HALF are each
01C4                             ; reduced by 32 bytes a screen line.
01C4                             ; 
01C4   21 1E 3C               LD   HL,$3C1E   ; address INSCRN the left-hand location
01C7                             ; of the current input line.
01C7                             ; 
01C7   06 04                  LD   B,$04   ; four system variables to update
01C9                             ; 
01C9   CD 43 04     L01C9:    CALL   L0443   ; routine SCR-PTRS
01CC                             ; 
01CC   10 FB                  DJNZ   L01C9   ; repeat for all four pointers.
01CE                             ; 
01CE                             ; ok to print
01CE                             ; 
01CE   CD 02 03     L01CE:    CALL   L0302   ; routine find characters to EOL.
01D1                             ; 
01D1   54                     LD   D,H   ; HL is end of line
01D2   5D                     LD   E,L   ; transfer to DE register.
01D3   23                     INC   HL   ; increment
01D4   22 22 3C               LD   ($3C22),HL   ; update ENDBUF
01D7   2B                     DEC   HL   ; decrement
01D8   2B                     DEC   HL   ; so HL = DE -1
01D9                             ; 
01D9   28 02                  JR   Z,L01DD   ; skip if BC zero.
01DB                             ; 
01DB   ED B8                  LDDR      ; else move the characters.
01DD                             ; 
01DD   08           L01DD:    EX   AF,AF'   ; restore the output character.
01DE   12                     LD   (DE),A   ; insert at screen position.
01DF                             ; (a zero if CR lower)
01DF   13                     INC   DE   ; next character position
01E0   ED 53 20 3C            LD   ($3C20),DE   ; update CURSOR
01E4                             ; 
01E4   AF           L01E4:    XOR   A   ; ?
01E5   C9                     RET      ; return.
01E6                             ; 
01E6                             ; -------------------------
01E6                             ; THE "EDIT KEY" SUBROUTINE
01E6                             ; -------------------------
01E6                             ; 
01E6   21 F0 01     L01E6:    LD   HL,L01F0   ; address the EDIT KEYS table.
01E9                             ; 
01E9   16 00                  LD   D,$00   ; prepare to index by one byte.
01EB   5F                     LD   E,A   ; character code to E.
01EC   19                     ADD   HL,DE   ; index into the table.
01ED                             ; 
01ED   5E                     LD   E,(HL)   ; pick up required offset to the
01EE                             ; handling routine.
01EE                             ; 
01EE   19                     ADD   HL,DE   ; add to the current address.
01EF   E9                     JP   (HL)   ; exit via the routine.
01F0                             ; 
01F0                             ; ---------------------
01F0                             ; THE "EDIT KEYS" TABLE
01F0                             ; ---------------------
01F0                             ; 
01F0   20           L01F0:    DB   $20   ; L0210         $00     - RET
01F1   13           L01F1:    DB   $13   ; L0204         $01     - LEFT
01F2   0C           L01F2:    DB   $0C   ; L01FE         $02     - CAPS
01F3   1E           L01F3:    DB   $1E   ; L0211         $03     - RIGHT
01F4   0A           L01F4:    DB   $0A   ; L01FE         $04     - GRAPH
01F5   37           L01F5:    DB   $37   ; L022C         $05     - DEL
01F6   1A           L01F6:    DB   $1A   ; L0210         $06     - RET
01F7   50           L01F7:    DB   $50   ; L0247         $07     - UP
01F8   06           L01F8:    DB   $06   ; L01FE         $08     - INV
01F9   9C           L01F9:    DB   $9C   ; L0295         $09     - DOWN
01FA   C9           L01FA:    DB   $C9   ; L02C3         $0A     - DEL LINE
01FB   15           L01FB:    DB   $15   ; L0210         $0B     - RET
01FC   14           L01FC:    DB   $14   ; L0210         $0C     - RET
01FD   D3           L01FD:    DB   $D3   ; L02D0         $0D     - KEY-ENTER
01FE                             ; 
01FE                             ; -------------------------------
01FE                             ; THE "TOGGLE STATUS BIT" ROUTINE
01FE                             ; -------------------------------
01FE                             ; The keycodes have been cleverly mapped to individual bits of the STATIN
01FE                             ; system variable so this simple routine maintains all three status bits.
01FE                             ; KEY "2" - CAPS SHIFT, "4" - GRAPHICS, "8" - INVERSE VIDEO.
01FE                             ; 
01FE   21 28 3C     L01FE:    LD   HL,$3C28   ; system variable STATIN
0201   AE                     XOR   (HL)   ; toggle the single relevant bit.
0202   77                     LD   (HL),A   ; put back.
0203   C9                     RET      ; return.
0204                             ; 
0204                             ; ----------------------------
0204                             ; THE "CURSOR LEFT" SUBROUTINE
0204                             ; ----------------------------
0204                             ; this subroutine moves the cursor to the left unless the character at that
0204                             ; position is zero.
0204                             ; 
0204   2A 20 3C     L0204:    LD   HL,($3C20)   ; fetch CURSOR.
0207   2B                     DEC   HL   ; decrement value.
0208   7E                     LD   A,(HL)   ; fetch character at new position.
0209   A7                     AND   A   ; test for zero. (cr)
020A   C8                     RET   Z   ; return if so.                  >>
020B                             ; 
020B   22 20 3C               LD   ($3C20),HL   ; else update CURSOR
020E   23                     INC   HL   ; step back
020F   77                     LD   (HL),A   ; and put character that was at new
0210                             ; cursor position where cursor is now.
0210                             ; 
0210   C9           L0210:    RET      ; return.
0211                             ; 
0211                             ; Note. various unallocated keys in the EDIT KEYS table point to the
0211                             ; above RET instruction.
0211                             ; 
0211                             ; -----------------------------
0211                             ; THE "CURSOR RIGHT" SUBROUTINE
0211                             ; -----------------------------
0211                             ; 
0211   2A 20 3C     L0211:    LD   HL,($3C20)   ; fetch CURSOR position
0214   23                     INC   HL   ; and increment it.
0215                             ; 
0215   ED 5B 22 3C            LD   DE,($3C22)   ; fetch ENDBUF - end of current line.
0219   A7                     AND   A   ; prepare to subtract.
021A   ED 52                  SBC   HL,DE   ; test
021C   C8                     RET   Z   ; return if zero - CURSOR is at ENDBUF
021D                             ; 
021D   19                     ADD   HL,DE   ; else reform the pointers.
021E   22 20 3C               LD   ($3C20),HL   ; update CURSOR
0221   7E                     LD   A,(HL)   ; fetch character at new position.
0222   2B                     DEC   HL   ; decrement
0223   77                     LD   (HL),A   ; and insert where cursor was.
0224   C9                     RET      ; ret.
0225                             ; 
0225                             ; ---------------------------
0225                             ; THE "DELETE CURSOR" ROUTINE
0225                             ; ---------------------------
0225                             ; Moves cursor position to right and then continues into DEL-CHAR
0225                             ; 
0225   2A 20 3C     L0225:    LD   HL,($3C20)   ; fetch CURSOR
0228   23                     INC   HL   ; increment position.
0229   22 20 3C               LD   ($3C20),HL   ; update CURSOR
022C                             ; 
022C                             ; 
022C                             ; ------------------------------
022C                             ; THE "DELETE CHARACTER" ROUTINE
022C                             ; ------------------------------
022C                             ; 
022C   CD 02 03     L022C:    CALL   L0302   ; routine finds characters to EOL.
022F                             ; 
022F   62                     LD   H,D   ; transfer CURSOR position DE to HL.
0230   6B                     LD   L,E   ; 
0231   1B                     DEC   DE   ; decrement DE
0232   1A                     LD   A,(DE)   ; fetch character to left of original
0233                             ; cursor.
0233   A7                     AND   A   ; test for zero.
0234   C8                     RET   Z   ; return if so.                 >>
0235                             ; 
0235   ED 53 20 3C            LD   ($3C20),DE   ; else update CURSOR
0239   78                     LD   A,B   ; check for count of characters
023A   B1                     OR   C   ; being zero
023B   28 02                  JR   Z,L023F   ; skip if so.
023D                             ; 
023D   ED B0        L023D:    LDIR      ; else shift characters to left.
023F                             ; 
023F   2B           L023F:    DEC   HL   ; decrement HL so that points to end -
0240                             ; last position on the logical line.
0240   36 20                  LD   (HL),$20   ; insert a space.
0242   22 22 3C               LD   ($3C22),HL   ; set ENDBUF
0245   0C                     INC   C   ; reset zero flag??
0246   C9                     RET      ; return.
0247                             ; 
0247                             ; -----------------------
0247                             ; THE "CURSOR UP" ROUTINE
0247                             ; -----------------------
0247                             ; When the cursor is moved up while editing a multi-line word definition,
0247                             ; then the cursor is first moved to the left of the screen abutting the
0247                             ; character zeros at the leftmost position.
0247                             ; These zero characters appear as spaces but mark the beginning of each logical
0247                             ; line. A logical line may, for instance if it contains a text item, extend over
0247                             ; several physical screen lines.
0247                             ; 
0247   CD 04 02     L0247:    CALL   L0204   ; routine CURSOR-LEFT
024A   28 08                  JR   Z,L0254   ; skip forward if not possible.
024C                             ; 
024C                             ; else move left by thirty two positions. This may achieve a vertical move if
024C                             ; attempted when a word is first being entered. Alternatively if one of the
024C                             ; calls to cursor left fails having encountered a zero, then all subsequent
024C                             ; calls will fail. The routine will return with the cursor adjacent to the zero.
024C                             ; 
024C   06 1F                  LD   B,$1F   ; count 31 decimal
024E   CD 04 02     L024E:    CALL   L0204   ; move cursor left thirty one times.
0251   10 FB                  DJNZ   L024E   ; makes thirty two moves counting first
0253                             ; 
0253   C9                     RET      ; return.
0254                             ; 
0254                             ; ---
0254                             ; 
0254   2A 1E 3C     L0254:    LD   HL,($3C1E)   ; fetch INSCRN start of current line.
0257   ED 5B 24 3C            LD   DE,($3C24)   ; fetch L_HALF start of buffer.
025B   A7                     AND   A   ; reset carry for
025C   ED 52                  SBC   HL,DE   ; true subtraction.
025E   C8                     RET   Z   ; return if at beginning of input buffer
025F                             ; 
025F   CD 25 02               CALL   L0225   ; routine DEL-CURSOR
0262                             ; 
0262   2A 1E 3C               LD   HL,($3C1E)   ; fetch INSCRN leftmost location of
0265                             ; current line.
0265   11 E0 FF               LD   DE,$FFE0   ; make DE minus thirty two.
0268   AF                     XOR   A   ; clear accumulator to zero.
0269                             ; 
0269   19           L0269:    ADD   HL,DE   ; subtract 32
026A   BE                     CP   (HL)   ; compare contents to zero
026B                             ; ( i.e. prev (cr) or buffer start?)
026B   20 FC                  JR   NZ,L0269   ; loop back until HL holds zero.
026D                             ; 
026D   22 1E 3C               LD   ($3C1E),HL   ; update INSCRN
0270                             ; 
0270   CD F4 02               CALL   L02F4   ; find endbuf
0273                             ; 
0273   22 20 3C               LD   ($3C20),HL   ; set CURSOR
0276                             ; 
0276                             ; ----------
0276                             ; PR_CURSOR
0276                             ; ----------
0276                             ; 
0276   3E A0        L0276:    LD   A,$A0   ; inverse space - so solid square
0278                             ; 
0278   CD 7E 01               CALL   L017E   ; routine PR_LOWER
027B                             ; 
027B   2A 20 3C               LD   HL,($3C20)   ; CURSOR
027E   2B                     DEC   HL   
027F   22 20 3C               LD   ($3C20),HL   ; CURSOR
0282                             ; 
0282                             ; -> from interrupt
0282   2A 20 3C     L0282:    LD   HL,($3C20)   ; CURSOR
0285                             ; 
0285   3A 28 3C               LD   A,($3C28)   ; STATIN
0288   1F                     RRA      ; ignore bit 0
0289   36 97                  LD   (HL),$97   ; pixel cursor.
028B   1F                     RRA      ; test bit 1 - CAPS
028C   30 02                  JR   NC,L0290   ; forward if no CAPS SHIFT
028E                             ; 
028E   36 C3                  LD   (HL),$C3   ; inverse [C] cursor.
0290                             ; 
0290   1F           L0290:    RRA      ; test bit 2 - GRAPHICS.
0291   D0                     RET   NC   ; return if not
0292                             ; 
0292   36 C7        L0292:    LD   (HL),$C7   ; inverse [G] cursor.
0294   C9                     RET      ; return
0295                             ; 
0295                             ; -------------------------
0295                             ; THE "CURSOR DOWN" ROUTINE
0295                             ; -------------------------
0295                             ; 
0295                             ; 
0295   CD 11 02     L0295:    CALL   L0211   ; routine CURSOR RIGHT
0298   28 08                  JR   Z,L02A2   ; forward if not possible.
029A                             ; 
029A   06 1F                  LD   B,$1F   ; set counter to thirty one.
029C                             ; 
029C   CD 11 02     L029C:    CALL   L0211   ; routine CURSOR RIGHT
029F   10 FB                  DJNZ   L029C   ; thirty two moves altogether.
02A1   C9                     RET      ; return.
02A2                             ; 
02A2                             ; ---
02A2                             ; 
02A2   CD B0 02     L02A2:    CALL   L02B0   ; find zerobyte
02A5   E0                     RET   PO   ; return if    found
02A6                             ; 
02A6   E5                     PUSH   HL   ; save position
02A7   CD 25 02               CALL   L0225   ; routine DEL-CURSOR
02AA   E1                     POP   HL   ; retrieve position.
02AB   CD ED 02               CALL   L02ED   ; set logical line
02AE   18 C6                  JR   L0276   ; back to exit via pr_cursor.
02B0                             ; 
02B0                             ; ---
02B0                             ; find zerobyte
02B0                             ; ---
02B0                             ; -> called 5 times
02B0                             ; 
02B0   21 00 27     L02B0:    LD   HL,$2700   ; this location is always zero.
02B3                             ; the byte following video RAM.
02B3   ED 5B 1E 3C            LD   DE,($3C1E)   ; INSCRN        e.g. $26E0
02B7                             ; 
02B7   A7                     AND   A   ; prepare for true subtraction
02B8                             ; 
02B8   ED 52                  SBC   HL,DE   ; subtract to give number of chars
02BA                             ; 
02BA   44                     LD   B,H   ; transfer count to
02BB   4D                     LD   C,L   ; the BC register pair.
02BC                             ; 
02BC   EB                     EX   DE,HL   ; transfer INSCR value to HL.
02BD                             ; 
02BD   23                     INC   HL   ; start next location
02BE   AF                     XOR   A   ; search for a zero character.
02BF                             ; 
02BF   ED B1                  CPIR      ; at most BC locations.
02C1                             ; sets P/O flag if BC!=0
02C1                             ; 
02C1   2B                     DEC   HL   ; step back to last non-zero
02C2   C9                     RET      ; return.
02C3                             ; 
02C3                             ; -------------------------
02C3                             ; THE "DELETE LINE" ROUTINE
02C3                             ; -------------------------
02C3                             ; CHR$ 10
02C3                             ; 
02C3   2A 22 3C     L02C3:    LD   HL,($3C22)   ; ENDBUF
02C6   2B                     DEC   HL   ; 
02C7   22 20 3C               LD   ($3C20),HL   ; CURSOR
02CA                             ; 
02CA   CD 2C 02     L02CA:    CALL   L022C   ; KEY-DEL
02CD   20 FB                  JR   NZ,L02CA   ; repeat
02CF                             ; 
02CF   C9                     RET      ; return.
02D0                             ; 
02D0                             ; --------------------------
02D0                             ; THE "KEY-ENTER" SUBROUTINE
02D0                             ; --------------------------
02D0                             ; 
02D0   21 28 3C     L02D0:    LD   HL,$3C28   ; STATIN
02D3   CB EE                  SET   5,(HL)   ; signal new key.
02D5   CB 86                  RES   0,(HL)   ; reset new key flag
02D7   C9                     RET      ; return.
02D8                             ; 
02D8                             ; 
02D8                             ; ------------------------
02D8                             ; THE "SET BUFFER" ROUTINE
02D8                             ; ------------------------
02D8                             ; called by LIST, QUERY
02D8                             ; 
02D8   21 00 27     L02D8:    LD   HL,$2700   ; one past end of screen.
02DB   ED 5B 24 3C            LD   DE,($3C24)   ; fetch start of buffer from L_HALF
02DF                             ; 
02DF   CD FA 07               CALL   L07FA   ; routine SPACE_FILL
02E2                             ; 
02E2   21 E0 26               LD   HL,$26E0   ; first location of bottom line.
02E5   22 24 3C               LD   ($3C24),HL   ; set L_HALF
02E8                             ; 
02E8   36 00                  LD   (HL),$00   ; insert a ZERO.
02EA                             ; 
02EA                             ; -> called by retype
02EA   2A 24 3C     L02EA:    LD   HL,($3C24)   ; fetch L_HALF
02ED                             ; 
02ED                             ; -> from cursor down
02ED   22 1E 3C     L02ED:    LD   ($3C1E),HL   ; set INSCRN
02F0   23                     INC   HL   ; step past the zero
02F1   22 20 3C               LD   ($3C20),HL   ; set CURSOR
02F4                             ; 
02F4                             ; => from cursor up.
02F4   CD B0 02     L02F4:    CALL   L02B0   ; find zerobyte
02F7                             ; 
02F7   3E 20                  LD   A,$20   ; prepare a space
02F9                             ; 
02F9   2B           L02F9:    DEC   HL   ; move to the left.
02FA   BE                     CP   (HL)   ; compare to space.
02FB   28 FC                  JR   Z,L02F9   ; back while spaces exist.
02FD                             ; 
02FD   23                     INC   HL   ; point to last space encountered.
02FE   22 22 3C               LD   ($3C22),HL   ; set ENDBUF - end of logical line.
0301   C9                     RET      ; return.
0302                             ; 
0302                             ; ----------------------------------
0302                             ; THE "COUNT TO END OF LINE" ROUTINE
0302                             ; ----------------------------------
0302                             ; Find the number of characters to the end of the logical line.
0302                             ; 
0302   2A 22 3C     L0302:    LD   HL,($3C22)   ; system variable ENDBUF
0305   ED 5B 20 3C            LD   DE,($3C20)   ; system variable CURSOR
0309   A7                     AND   A   ; prepare to subtract.
030A   ED 52                  SBC   HL,DE   ; subtract to give character places
030C   44                     LD   B,H   ; transfer result
030D   4D                     LD   C,L   ; to the BC register pair.
030E   19                     ADD   HL,DE   ; reform the pointers.
030F                             ; 
030F   C9                     RET      ; return with zero flag set if cursor
0310                             ; at EOL.
0310                             ; 
0310                             ; ----------------------
0310                             ; THE "KEYBOARD" ROUTINE
0310                             ; ----------------------
0310                             ; 
0310   CD 36 03     L0310:    CALL   L0336   ; routine KEY_SCAN
0313                             ; 
0313   47                     LD   B,A   ; save key in B
0314                             ; 
0314   2A 26 3C               LD   HL,($3C26)   ; load L with KEYCOD - last key pressed
0317                             ; load H with KEYCNT - debounce counter
0317                             ; 
0317   AD                     XOR   L   ; compare to previous key.
0318   28 0B                  JR   Z,L0325   ; forward if a match.
031A                             ; 
031A   AD                     XOR   L   ; reform original
031B   28 03                  JR   Z,L0320   ; forward if zero - no key.
031D                             ; 
031D   AF                     XOR   A   ; else clear accumulator.
031E                             ; 
031E   BD                     CP   L   ; compare with last.
031F   C0                     RET   NZ   ; return if not zero.
0320                             ; 
0320   68           L0320:    LD   L,B   ; set L to original keycode
0321   26 20                  LD   H,$20   ; set counter to thirty two.
0323   18 0D                  JR   L0332   ; forward to store values and exit
0325                             ; returning zero.
0325                             ; 
0325                             ; ---
0325                             ; 
0325                             ; Key is same as previously accepted key.
0325                             ; It repeats after two interrupts
0325                             ; 
0325   25           L0325:    DEC   H   ; decrement the counter.
0326   7C                     LD   A,H   ; fetch counter to A.
0327   FE 1E                  CP   $1E   ; compare to thirty.
0329   28 06                  JR   Z,L0331   ; forward if so to return key in A.
032B                             ; 
032B   AF                     XOR   A   ; clear accumulator.
032C   BC                     CP   H   ; is counter zero?
032D   20 03                  JR   NZ,L0332   ; forward if not to keep counting.
032F                             ; 
032F   26 04                  LD   H,$04   ; else set counter to four.
0331                             ; 
0331   7D           L0331:    LD   A,L   ; pick up previous key.
0332                             ; 
0332   22 26 3C     L0332:    LD   ($3C26),HL   ;  update KEYCOD/KEYCNT
0335                             ; 
0335   C9                     RET      ; return.
0336                             ; 
0336                             ;----------------------------------------------------------------------------
0336                             ;                          LOGICAL VIEW OF KEYBOARD
0336                             ; 
0336                             ;         0     1     2     3     4 -Bits-  4     3     2     1     0
0336                             ; PORT                                                                    PORT
0336                             ; 
0336                             ; F7FE  [ 1 ] [ 2 ] [ 3 ] [ 4 ] [ 5 ]  |  [ 6 ] [ 7 ] [ 8 ] [ 9 ] [ 0 ]   EFFE
0336                             ;  ^                                   |                                   v
0336                             ; FBFE  [ Q ] [ W ] [ E ] [ R ] [ T ]  |  [ Y ] [ U ] [ I ] [ O ] [ P ]   DFFE
0336                             ;  ^                                   |                                   v
0336                             ; FDFE  [ A ] [ S ] [ D ] [ F ] [ G ]  |  [ H ] [ J ] [ K ] [ L ] [ ENT ] BFFE
0336                             ;  ^                                   |                                   v
0336                             ; FEFE  [SHI] [SYM] [ Z ] [ X ] [ C ]  |  [ V ] [ B ] [ N ] [ M ] [ SPC ] 7FFE
0336                             ;  ^            v                                                ^         v
0336                             ; Start         +------------>--------------------->-------------+        End
0336                             ; 
0336                             ; 
0336                             ;----------------------------------------------------------------------------
0336                             ; 
0336                             ; 
0336                             ; ----------------------------------
0336                             ; THE "KEYBOARD SCANNING" SUBROUTINE
0336                             ; ----------------------------------
0336                             ; This routine is called by the KEYBOARD routine 50 times a second and
0336                             ; by the ACE FORTH "INKEY" WORD.
0336                             ; The above diagram shows the logical view of the Keyboard and PORTS.
0336                             ; The physical view is similar except that the symbol shift key is to the
0336                             ; left of the space key.
0336                             ; 
0336                             ; 
0336   01 FE FE     L0336:    LD   BC,$FEFE   ; port address - B is also an 8 counter
0339                             ; 
0339   ED 50                  IN   D,(C)   ; read from port to D.
033B                             ; when a key is pressed, the
033B                             ; corresponding bit is reset.
033B                             ; 
033B   5A                     LD   E,D   ; save in E
033C                             ; 
033C   CB 3A                  SRL   D   ; read the outer SHIFT key.
033E                             ; 
033E   9F                     SBC   A,A   ; $00 if SHIFT else $FF.
033F   E6 D8                  AND   $D8   ; $00 if SHIFT else $D8.
0341                             ; 
0341   CB 3A                  SRL   D   ; read the symbol shift bit
0343   38 02                  JR   C,L0347   ; skip if not pressed.
0345                             ; 
0345   3E 28                  LD   A,$28   ; load A with 40 decimal.
0347                             ; 
0347   C6 57        L0347:    ADD   A,$57   ; gives $7F SYM, $57 SHIFT, or $2F
0349                             ; 
0349                             ; Since 8 will be subtracted from the initial key value there are three
0349                             ; distinct ranges 0 - 39, 40 - 79, 80 - 119.
0349                             ; 
0349   6F                     LD   L,A   ; save key range value in L
034A   7B                     LD   A,E   ; fetch the original port reading.
034B   F6 03                  OR   $03   ; cancel the two shift bits.
034D                             ; 
034D   1E FF                  LD   E,$FF   ; set a flag to detect multiple keys.
034F                             ; 
034F                             ; KEY_LINE the half-row loop.
034F                             ; 
034F   2F           L034F:    CPL      ; complement bits
0350                             ; 
0350   E6 1F                  AND   $1F   ; mask off the rightmost five key bits.
0352   57                     LD   D,A   ; save a copy in D.
0353   28 0D                  JR   Z,L0362   ; forward if no keys pressed to do the
0355                             ; next row.
0355                             ; 
0355   7D                     LD   A,L   ; else fetch the key value
0356   1C                     INC   E   ; test E for $FF
0357   20 12                  JR   NZ,L036B   ; forward if not now zero to quit
0359                             ; 
0359   D6 08        L0359:    SUB   $08   ; subtract 8 from key value
035B                             ; 
035B   CB 3A                  SRL   D   ; test next bit affecting zero and carry
035D                             ; 
035D   30 FA                  JR   NC,L0359   ; loop back until the set bit is found.
035F                             ; 
035F   5F                     LD   E,A   ; transfer key value to E.
0360   20 09                  JR   NZ,L036B   ; forward to abort if more than one key
0362                             ; is pressed in the row.
0362                             ; 
0362   2D           L0362:    DEC   L   ; decrement the key value for next row.
0363                             ; 
0363   CB 00                  RLC   B   ; rotate the 8 counter and port address
0365                             ; 
0365   30 06                  JR   NC,L036D   ; skip forward when all 8 rows have
0367                             ; been read.
0367                             ; 
0367   ED 78                  IN   A,(C)   ; else read the next half-row.
0369   18 E4                  JR   L034F   ; and back to KEY_LINE.
036B                             ; 
036B                             ; ---
036B                             ; ABORTKEY
036B                             ; 
036B   1E FF        L036B:    LD   E,$FF   ; signal invalid key.
036D                             ; 
036D                             ; the normal exit checks if E holds a key and not $FF.
036D                             ; 
036D   7B           L036D:    LD   A,E   ; fetch possible key value.
036E   3C                     INC   A   ; increment
036F   C8                     RET   Z   ; return if was $FF as original.
0370                             ; 
0370   21 76 03               LD   HL,L0376   ; else address KEY TABLE
0373   19                     ADD   HL,DE   ; index into table.
0374                             ; (D is zero)
0374                             ; 
0374   7E                     LD   A,(HL)   ; pick up character.
0375                             ; 
0375   C9                     RET      ; return with translated character.
0376                             ; 
0376                             ; 
0376                             ; 
0376                             ; ---------------
0376                             ; THE "KEY TABLE"
0376                             ; ---------------
0376                             ; 
0376                             ; -----------------------
0376                             ; THE "40 UNSHIFTED KEYS"
0376                             ; -----------------------
0376                             ; 
0376   76           L0376:    DB   $76   ; V - v
0377   68                     DB   $68   ; H - h
0378   79                     DB   $79   ; Y - y
0379   36                     DB   $36   ; 6 - 6
037A   35                     DB   $35   ; 5 - 5
037B   74                     DB   $74   ; T - t
037C   67                     DB   $67   ; G - g
037D   63                     DB   $63   ; C - c
037E   62                     DB   $62   ; B - b
037F   6A                     DB   $6A   ; J - j
0380   75                     DB   $75   ; U - u
0381   37                     DB   $37   ; 7 - 7
0382   34                     DB   $34   ; 4 - 4
0383   72                     DB   $72   ; R - r
0384   66                     DB   $66   ; F - f
0385   78                     DB   $78   ; X - x
0386   6E                     DB   $6E   ; N - n
0387   6B                     DB   $6B   ; K - k
0388   69                     DB   $69   ; I - i
0389   38                     DB   $38   ; 8 - 8
038A   33                     DB   $33   ; 3 - 3
038B   65                     DB   $65   ; E - e
038C   64                     DB   $64   ; D - d
038D   7A                     DB   $7A   ; Z - z
038E   6D                     DB   $6D   ; M - m
038F   6C                     DB   $6C   ; L - l
0390   6F                     DB   $6F   ; O - o
0391   39                     DB   $39   ; 9 - 9
0392   32                     DB   $32   ; 2 - 2
0393   77                     DB   $77   ; W - w
0394   73                     DB   $73   ; S - s
0395   00                     DB   $00   ; SYMBOL
0396   20                     DB   $20   ; SPACE
0397   0D                     DB   $0D   ; ENTER
0398   70                     DB   $70   ; P - p
0399   30                     DB   $30   ; 0 - 0
039A   31                     DB   $31   ; 1 - 1
039B   71                     DB   $71   ; Q - q
039C   61                     DB   $61   ; A - a
039D   00                     DB   $00   ; SHIFT
039E                             ; 
039E                             ; ---------------------
039E                             ; THE "40 SHIFTED KEYS"
039E                             ; ---------------------
039E                             ; 
039E   56                     DB   $56   ; V - V
039F   48                     DB   $48   ; H - H
03A0   59                     DB   $59   ; Y - Y
03A1   07                     DB   $07   ; 6 - 7 KEY-UP
03A2   01                     DB   $01   ; 5 - 1 KEY-LEFT
03A3   54                     DB   $54   ; 
03A4   47                     DB   $47   
03A5   43                     DB   $43   
03A6   42                     DB   $42   
03A7   4A                     DB   $4A   
03A8   55                     DB   $55   
03A9   09                     DB   $09   ; 7 - 9 KEY-DOWN
03AA   08                     DB   $08   ; 4 - 8 INV-VIDEO
03AB   52                     DB   $52   
03AC   46                     DB   $46   
03AD   58                     DB   $58   
03AE   4E                     DB   $4E   
03AF   4B                     DB   $4B   
03B0   49                     DB   $49   
03B1   03                     DB   $03   ; 8 - 3 KEY-RIGHT
03B2   33                     DB   $33   ; 3 - 3
03B3   45                     DB   $45   
03B4   44                     DB   $44   
03B5   5A                     DB   $5A   
03B6   4D                     DB   $4D   
03B7   4C                     DB   $4C   
03B8   4F                     DB   $4F   
03B9   04                     DB   $04   ; 9 - 4 GRAPH
03BA   02                     DB   $02   ; 2 - 2 CAPS LOCK
03BB   57                     DB   $57   ; W - W
03BC   53                     DB   $53   ; S - S
03BD   00                     DB   $00   ; SYMB
03BE   20                     DB   $20   ; SPACE
03BF   0D                     DB   $0D   ; ENTER
03C0   50                     DB   $50   ; P - P
03C1   05                     DB   $05   ; 0 - 5   DEL
03C2   0A                     DB   $0A   ; 1 - 0A  DEL_LINE
03C3   51                     DB   $51   ; Q - Q
03C4   41                     DB   $41   ; A - A
03C5   00                     DB   $00   ; SHIFT
03C6                             ; 
03C6                             ; --------------------------
03C6                             ; THE "40 SYMBOL SHIFT KEYS"
03C6                             ; --------------------------
03C6                             ; 
03C6   2F                     DB   $2F   ; V - /
03C7   5E                     DB   $5E   ; H - ^
03C8   5B                     DB   $5B   ; Y - [
03C9   26                     DB   $26   ; 6 - &
03CA   25                     DB   $25   ; 5 - %
03CB   3E                     DB   $3E   ; T - >
03CC   7D                     DB   $7D   ; 
03CD   3F                     DB   $3F   
03CE   2A                     DB   $2A   
03CF   2D                     DB   $2D   
03D0   5D                     DB   $5D   
03D1   27                     DB   $27   
03D2   24                     DB   $24   
03D3   3C                     DB   $3C   
03D4   7B                     DB   $7B   
03D5   60                     DB   $60   
03D6   2C                     DB   $2C   
03D7   2B                     DB   $2B   
03D8   7F                     DB   $7F   
03D9   28                     DB   $28   
03DA   23                     DB   $23   
03DB   45                     DB   $45   
03DC   5C                     DB   $5C   
03DD   3A                     DB   $3A   
03DE   2E                     DB   $2E   
03DF   3D                     DB   $3D   
03E0   3B                     DB   $3B   
03E1   29                     DB   $29   
03E2   40                     DB   $40   ; 2 - @
03E3   57                     DB   $57   ; W - W
03E4   7C                     DB   $7C   ; S
03E5   00                     DB   $00   ; SYMB
03E6   20                     DB   $20   ; SPACE
03E7   0D                     DB   $0D   ; ENTER
03E8   22                     DB   $22   ; P - "
03E9   5F                     DB   $5F   ; 0 - _
03EA   21                     DB   $21   ; 1 - !
03EB   51                     DB   $51   ; Q - Q
03EC   7E                     DB   $7E   ; A - ~
03ED   00                     DB   $00   ; SHIFT
03EE                             ; 
03EE                             ; end of key tables
03EE                             ; 
03EE                             ; 
03EE                             ; ---------------------------
03EE                             ; THE "PRINT ROUTINE" Part 2.
03EE                             ; ---------------------------
03EE                             ; If output is not directed into the input buffer then jump forward else
03EE                             ; call the routine to output to lower screen.
03EE                             ; 
03EE   28 05        L03EE:    JR   Z,L03F5   ; forward to main screen print.
03F0                             ; 
03F0   CD 7E 01               CALL   L017E   ; PR_LOWER
03F3                             ; 
03F3   D9                     EXX      ; restore main set
03F4   C9                     RET      ; return.                >>
03F5                             ; 
03F5                             ; the print output is not directed to the input buffer but first check that
03F5                             ; the user has not set up a vector to their own routine to print characters
03F5                             ; for instance to a printer.
03F5                             ; 
03F5   47           L03F5:    LD   B,A   ; save the character in the B register.
03F6                             ; 
03F6   2A 29 3C               LD   HL,($3C29)   ; fetch possible vector from EXWRCH
03F9                             ; (normally 0)
03F9   7C                     LD   A,H   ; test for
03FA   B5                     OR   L   ; the value zero.
03FB   78                     LD   A,B   ; fetch the character back to A.
03FC                             ; 
03FC   28 01                  JR   Z,L03FF   ; skip forward if no user-supplied
03FE                             ; routine.
03FE                             ; 
03FE   E9           L03FE:    JP   (HL)   ; else jump to user-supplied routine
03FF                             ; which should finish with a JP (IY)**
03FF                             ; ** 2022 update This is an error in the
03FF                             ; listing **
03FF                             ; The character is provided in the A register
03FF                             ; of the Z80.
03FF                             ; The output routine should preserve the
03FF                             ; auxiliary registers, ix and iy, and
03FF                             ; finish off with exx and ret.
03FF                             ; see page  142 of manual.
03FF                             ; ---
03FF                             ; PRINTING TO UPPER SCREEN
03FF                             ; ---
03FF                             ; 
03FF   2A 1C 3C     L03FF:    LD   HL,($3C1C)   ; SCRPOS
0402   ED 5B 24 3C            LD   DE,($3C24)   ; L_HALF
0406                             ; 
0406   EB                     EX   DE,HL   ; ??
0407                             ; 
0407   37                     SCF      ; inclusive byte.
0408   ED 52                  SBC   HL,DE   ; subtract screen position+1 from
040A                             ; the start of input buffer.
040A   EB                     EX   DE,HL   ; hl=scrpos
040B                             ; 
040B   DC 21 04               CALL   C,L0421   ; if no room then scroll upper display
040E                             ; 
040E   FE 0D                  CP   $0D   ; carriage return?
0410                             ; 
0410   28 04                  JR   Z,L0416   ; skip forward if so.
0412                             ; 
0412   77                     LD   (HL),A   ; else insert the character.
0413                             ; 
0413   23                     INC   HL   ; point to next position.
0414   18 06                  JR   L041C   ; forward
0416                             ; 
0416                             ; ---
0416                             ; 
0416                             ; a carriage return
0416                             ; 
0416   23           L0416:    INC   HL   ; increment screen address.
0417   7D                     LD   A,L   ; fetch low byte of address and mask.
0418   E6 1F                  AND   $1F   ; a zero result indicates a line skip.
041A   20 FA                  JR   NZ,L0416   ; loop until a new line of 32 columns
041C                             ; is started.
041C                             ; 
041C                             ; both paths converge.
041C                             ; 
041C   22 1C 3C     L041C:    LD   ($3C1C),HL   ; update SCRPOS
041F                             ; 
041F   D9                     EXX      ; back to main set.
0420                             ; 
0420   C9                     RET      ; return.
0421                             ; 
0421                             ; -------------------------------------
0421                             ; The "UPPER DISPLAY SCROLLING" ROUTINE
0421                             ; -------------------------------------
0421                             ; 
0421   F5           L0421:    PUSH   AF   ; save character
0422                             ; 
0422   21 1C 3C               LD   HL,$3C1C   ; address the low order byte SCRPOS
0425                             ; 
0425   CD 43 04               CALL   L0443   ; routine cursor up
0428                             ; i.e. SCRPOS = SCRPOS - 32
0428                             ; 
0428   F1                     POP   AF   ; restore character
0429                             ; 
0429                             ; now calculate the number of characters to scroll in the upper display.
0429                             ; 
0429   2A 24 3C               LD   HL,($3C24)   ; fetch L_HALF the start of input buffer
042C   11 20 24               LD   DE,$2420   ; second line in video display
042F                             ; 
042F                             ; 
042F                             ; => scroll lower display enters here
042F   A7           L042F:    AND   A   ; prepare for true subtraction.
0430   ED 52                  SBC   HL,DE   ; find number of characters to scroll.
0432                             ; 
0432   44                     LD   B,H   ; result to BC
0433   4D                     LD   C,L   
0434                             ; 
0434   21 E0 FF               LD   HL,$FFE0   ; set HL to -32d
0437   19                     ADD   HL,DE   ; now HL = DE -32d
0438   EB                     EX   DE,HL   ; switch so DE = HL - 32
0439                             ; 
0439   ED B0                  LDIR      ; scroll the lines up.
043B                             ; 
043B   06 20                  LD   B,$20   ; blank a line of 32 characters
043D                             ; 
043D   2B           L043D:    DEC   HL   ; decrement screen address.
043E   36 20                  LD   (HL),$20   ; insert a space character
0440   10 FB                  DJNZ   L043D   ; and loop for all 32 characters
0442                             ; 
0442   C9                     RET      ; return.
0443                             ; 
0443                             ; --------------------------------
0443                             ; THE "SCREEN POINTERS" SUBROUTINE
0443                             ; --------------------------------
0443                             ; 
0443                             ; 
0443   7E           L0443:    LD   A,(HL)   ; fetch low byte of screen address
0444   D6 20                  SUB   $20   ; subtract thirty two characters.
0446   77                     LD   (HL),A   ; and put back.
0447                             ; 
0447   23                     INC   HL   ; address high-order byte.
0448   30 01                  JR   NC,L044B   ; forward if low byte did not wrap
044A                             ; 
044A   35                     DEC   (HL)   ; else decrement the high byte as the
044B                             ; position has moved across a third of
044B                             ; the display.
044B                             ; 
044B   23           L044B:    INC   HL   ; address following System Variable
044C   C9                     RET      ; return.
044D                             ; 
044D                             ; -----------------------------------
044D                             ; THE "INDEX SYSTEM VARIABLE" ROUTINE
044D                             ; -----------------------------------
044D                             ; This routine is used by words CONTEXT, CURRENT, BASE etc. to index and then
044D                             ; stack a system variable associated with a FORTH word. See shortly.
044D                             ; 
044D                             ; It is a bit overblown considering the eventual position of the System
044D                             ; Variables and ld d,$3c; rst 10h; jp (iy) could have been used instead of
044D                             ; the long-winded addition below.
044D                             ; 
044D   EB           L044D:    EX   DE,HL   ; HL addresses the offset byte.
044E   5E                     LD   E,(HL)   ; fetch to E register
044F                             ; 
044F   16 00                  LD   D,$00   ; prepare to add.
0451   21 00 3C               LD   HL,$3C00   ; the address of start of SYSVARS
0454   19                     ADD   HL,DE   ; add the 8-bit offset
0455   EB                     EX   DE,HL   ; location to DE.
0456   D7                     RST   10H   ; push word DE
0457                             ; 
0457   FD E9                  JP   (IY)   ; to "next".
0459                             ; 
0459                             ; ---------------
0459                             ; THE "HERE" WORD
0459                             ; ---------------
0459                             ; ( -- address)
0459                             ; Leaves the address of one past the end of the dictionary.
0459                             ; 
0459   48 45 52     L0459:    DB   "HER"   ; "name field"
045C   C5                     DB   "E" + $80   
045D                             ; 
045D   AA 00                  DW   L00AA   ; "link field"
045F                             ; 
045F   04           L045F:    DB   $04   ; "name length field"
0460                             ; 
0460   62 04        L0460:    DW   L0462   ; "code field"
0462                             ; 
0462                             ; ---
0462                             ; 
0462   ED 5B 37 3C  L0462:    LD   DE,($3C37)   ; system variable STKBOT.
0466   D7                     RST   10H   ; push word DE
0467                             ; 
0467   FD E9                  JP   (IY)   ; to "next".
0469                             ; 
0469                             ; ------------------
0469                             ; THE "CONTEXT" WORD
0469                             ; ------------------
0469                             ; (  -- 15411 )
0469                             ; A system variable pointing to the context vocabulary.
0469                             ; $3C33 CONTEXT
0469                             ; 
0469   43 4F 4E 54 45 58 L0469:   DB   "CONTEX"   ; "name field"
046F   D4                     DB   "T" + $80   
0470                             ; 
0470   5F 04                  DW   L045F   ; "link field"
0472                             ; 
0472   07           L0472:    DB   $07   ; "name length field"
0473                             ; 
0473   4D 04        L0473:    DW   L044D   ; "code field"
0475                             ; 
0475                             ; ---
0475                             ; 
0475   33           L0475:    DB   $33   ; low byte of system variable.
0476                             ; 
0476                             ; ------------------
0476                             ; THE "CURRENT" WORD
0476                             ; ------------------
0476                             ; (  -- 15409 )
0476                             ; A system variable pointing to the current vocabulary.
0476                             ; $3C31 CURRENT
0476                             ; 
0476   43 55 52 52 45 4E L0476:   DB   "CURREN"   ; "name field"
047C   D4                     DB   "T" + $80   
047D                             ; 
047D   72 04                  DW   L0472   ; "link field"
047F                             ; 
047F   07           L047F:    DB   $07   ; "name length field"
0480                             ; 
0480   4D 04        L0480:    DW   L044D   ; "code field"
0482                             ; 
0482                             ; ---
0482                             ; 
0482   31           L0482:    DB   $31   ; a single parameter low-byte of $3C31.
0483                             ; 
0483                             ; ---------------
0483                             ; THE "BASE" WORD
0483                             ; ---------------
0483                             ; ( -- 15423)
0483                             ; A one-byte variable containing the system number base.
0483                             ; $3C3F BASE
0483                             ; 
0483   42 41 53     L0483:    DB   "BAS"   ; "name field"
0486   C5                     DB   "E" + $80   
0487                             ; 
0487   7F 04                  DW   L047F   ; "link field"
0489                             ; 
0489   04           L0489:    DB   $04   ; "name length field"
048A                             ; 
048A   4D 04        L048A:    DW   L044D   ; "code field"
048C                             ; 
048C                             ; ---
048C                             ; 
048C   3F           L048C:    DB   $3F   ; low-byte of system variable BASE
048D                             ; 
048D                             ; ---
048D                             ; 
048D                             ; These two Internal Words are used to stack the value of FLAGS and DICT.
048D                             ; 
048D                             ; -------------------------
048D                             ; The "flags" Internal Word
048D                             ; -------------------------
048D                             ; 
048D   4D 04        L048D:    DW   L044D   ; headerless "code field"
048F                             ; 
048F                             ; ---
048F                             ; 
048F   3E           L048F:    DB   $3E   ; low-order byte of FLAGS $3C3E
0490                             ; 
0490                             ; -------------------------
0490                             ; The "dict" Internal Word
0490                             ; -------------------------
0490                             ; 
0490   4D 04        L0490:    DW   L044D   ; headerless "code field"
0492                             ; 
0492                             ; ---
0492                             ; 
0492   39           L0492:    DB   $39   ; low-order byte of DICT $3C39
0493                             ; 
0493                             ; 
0493                             ; --------------
0493                             ; THE "PAD" WORD
0493                             ; --------------
0493                             ; (  -- 9985 )
0493                             ; Stacks the address of the 254-byte workpad.
0493                             ; On most FORTH systems the PAD floats about in memory but on the Ace it is
0493                             ; fixed in location and size. Its definition is simply a constant.
0493                             ; 
0493   50 41        L0493:    DB   "PA"   ; "name field"
0495   C4                     DB   "D" + $80   
0496                             ; 
0496   89 04                  DW   L0489   ; "link field"
0498                             ; 
0498   03           L0498:    DB   $03   ; "name length field"
0499                             ; 
0499   F5 0F        L0499:    DW   L0FF5   ; "code field" - stack word
049B                             ; 
049B                             ; ---
049B                             ; 
049B   01 27        L049B:    DW   $2701   ; parameter is 9985 decimal -
049D                             ; work pad address
049D                             ; 
049D                             ; ------------
049D                             ; THE ";" WORD
049D                             ; ------------
049D                             ; Terminates colon, DEFINER and COMPILER definitions.
049D                             ; 
049D   BB           L049D:    DB   ";" + $80   ; "name field"
049E                             ; 
049E   98 04                  DW   L0498   ; "link field"
04A0                             ; 
04A0   41           L04A0:    DB   $41   ; length 1 + $40 (immediate word)
04A1                             ; 
04A1   08 11        L04A1:    DW   L1108   ; "code field" - compile
04A3                             ; 
04A3                             ; ---
04A3                             ; 
04A3   B6 04        L04A3:    DW   L04B6   ; exit
04A5                             ; 
04A5   D8 12        L04A5:    DW   L12D8   ; check-for
04A7   0A                     DB   $0A   ; ten                   marker byte?
04A8   0E 1A                  DW   L1A0E   ; end-forth.
04AA                             ; 
04AA                             ; code gels
04AA                             ; 
04AA   21 3E 3C     L04AA:    LD   HL,$3C3E   ; address FLAGS
04AD   7E                     LD   A,(HL)   ; fetch FLAGS value.
04AE                             ; 
04AE   E6 BB                  AND   $BB   ; AND %10111011
04B0                             ; reset bit 2 - show definition complete
04B0                             ; reset bit 6 - show in interpreter mode
04B0                             ; 
04B0   77                     LD   (HL),A   ; update FLAGS value.
04B1                             ; 
04B1   FD E9                  JP   (IY)   ; to "next".
04B3                             ; 
04B3                             ; ----
04B3                             ; Note. these backward links to the beginning of words will probably be less
04B3                             ; of a mystery when the syntax checking and listing modules are more fully
04B3                             ; explored. A value of $FFFF sometimes occurs.
04B3                             ; 
04B3   00           X04B3:    DB   $00   ; 
04B4                             ; 
04B4   E8           X04B4:    DB   $E8   ; 
04B5   FF           X04B5:    DB   $FF   ; 04b5 + ffe8 = 049d  = ";"
04B6                             ; 
04B6                             ; ----------------------------------
04B6                             ; THE "ADDRESS" INTERPRETER ROUTINES
04B6                             ; ----------------------------------
04B6                             ; 
04B6                             ; ------------------------
04B6                             ; The "Exit" Internal Word
04B6                             ; ------------------------
04B6                             ; Drops the "Next Word" pointer from the Return Stack thereby ending a
04B6                             ; subroutine and returning to next word in calling thread.
04B6                             ; 
04B6   B8 04        L04B6:    DW   L04B8   ; headerless "code field"
04B8                             ; 
04B8                             ; ---
04B8                             ; 
04B8   E1           L04B8:    POP   HL   ; discard the next word pointer.
04B9                             ; 
04B9                             ; ------------------------------
04B9                             ; THE "ADDRESS INTERPRETER" LOOP
04B9                             ; ------------------------------
04B9                             ; Sometimes known as the Sequencer.
04B9                             ; 
04B9                             ; iy_fast
04B9                             ; 
04B9   E1           L04B9:    POP   HL   ; word pointer.
04BA                             ; 
04BA                             ; =====> from DOCOLON and BRANCH
04BA                             ; 
04BA   5E           L04BA:    LD   E,(HL)   
04BB   23                     INC   HL   
04BC   56                     LD   D,(HL)   
04BD   23                     INC   HL   
04BE                             ; 
04BE   E5                     PUSH   HL   ; word pointer.
04BF                             ; 
04BF                             ; ==>
04BF                             ; 
04BF   EB           L04BF:    EX   DE,HL   
04C0   5E                     LD   E,(HL)   
04C1   23                     INC   HL   
04C2   56                     LD   D,(HL)   
04C3   23                     INC   HL   
04C4   EB                     EX   DE,HL   
04C5                             ; 
04C5   E9                     JP   (HL)   ; jump to machine code (4 clock cycles)
04C6                             ; which will terminate with a JP (IY)
04C6                             ; instruction (8 clock cycles).
04C6                             ; 
04C6                             ; 
04C6                             ; 
04C6                             ; --------------------------------
04C6                             ; The "Memory Check" Internal Word
04C6                             ; --------------------------------
04C6                             ; This internal word which also checks the BREAK key is only used from the
04C6                             ; start of the LINE definition. However the machine code entry point is the
04C6                             ; normal value of the IY register and so this code is executed at the end of
04C6                             ; every word.
04C6                             ; 
04C6   C8 04        L04C6:    DW   L04C8   ; headerless "code field"
04C8                             ; 
04C8                             ; iy_slow
04C8                             ; 
04C8   01 0B 00     L04C8:    LD   BC,$000B   ; allow overhead of eleven bytes
04CB   ED 5B 3B 3C            LD   DE,($3C3B)   ; SPARE
04CF   2A 37 3C               LD   HL,($3C37)   ; STKBOT
04D2   09                     ADD   HL,BC   ; add the overhead
04D3   ED 52                  SBC   HL,DE   ; subtract the SPARE value
04D5   38 02                  JR   C,L04D9   ; forward if the original 12 byte gap
04D7                             ; remains.
04D7                             ; 
04D7                             ; else stack underflow has occurred.
04D7                             ; 
04D7   E7           L04D7:    RST   20H   ; Error 2
04D8   02                     DB   $02   ; Data stack underflow.
04D9                             ; 
04D9                             ; ---
04D9                             ; 
04D9   01 00 00     L04D9:    LD   BC,$0000   ; allow no overhead.
04DC                             ; 
04DC   CD 8C 0F               CALL   L0F8C   ; check free memory
04DF   CD E4 04               CALL   L04E4   ; check BREAK key.
04E2   18 D5                  JR   L04B9   ; back to iy_fast
04E4                             ; 
04E4                             ; ------------------------------------
04E4                             ; THE "CHECK FOR BREAK KEY" SUBROUTINE
04E4                             ; ------------------------------------
04E4                             ; Check for the key combination SHIFT/SPACE.
04E4                             ; 
04E4   3E FE        L04E4:    LD   A,$FE   ; read port $FEFE -
04E6   DB FE                  IN   A,($FE)   ; keys SPACE, SYMSHIFT, M, N, B.
04E8                             ; 
04E8   1F                     RRA      ; test bit for outermost key
04E9   D8                     RET   C   ; return if not pressed.
04EA                             ; 
04EA   3E 7F                  LD   A,$7F   ; read port $7FFE -
04EC   DB FE                  IN   A,($FE)   ; keys SHIFT, Z, X, C, V.
04EE                             ; 
04EE   1F                     RRA      ; test bit for outermost key
04EF   D8                     RET   C   ; return if not pressed.
04F0                             ; 
04F0   E7           L04F0:    RST   20H   ; Error 3.
04F1   03                     DB   $03   ; BREAK pressed.
04F2                             ; 
04F2                             ; -------------------------
04F2                             ; THE "MAIN EXECUTION" LOOP
04F2                             ; -------------------------
04F2                             ; The final part of the QUIT definition, as in all FORTH implementations,
04F2                             ; just loops through two FORTH words.
04F2                             ; 
04F2                             ; The first call - to the Address Interpreter - does not return.
04F2                             ; The return address is the next word QUERY which the interpreter pops off
04F2                             ; the Return Stack and then before executing puts the address of the next word
04F2                             ; on Return Stack. The default action of the Address Interpreter is to execute
04F2                             ; words in turn until some word, such as branch, alters this default behaviour.
04F2                             ; 
04F2   CD B9 04     L04F2:    CALL   L04B9   ; forth.
04F5                             ; 
04F5   8C 05        L04F5:    DW   L058C   ; QUERY         - input buffer
04F7   06 05                  DW   L0506   ; LINE          - interpret buffer
04F9   36 05                  DW   L0536   ; prOK          - print OK
04FB   76 12                  DW   L1276   ; branch        - relative jump
04FD                             ; 
04FD   F7 FF        L04FD:    DW   $FFF7   ; back to L04F5
04FF                             ; 
04FF                             ; ---
04FF                             ; the first high-level interpreted word.
04FF                             ; ---
04FF                             ; 
04FF                             ; ---------------
04FF                             ; THE "LINE" WORD
04FF                             ; ---------------
04FF                             ; Interprets input buffer as a normal FORTH line.
04FF                             ; 
04FF   4C 49 4E     L04FF:    DB   "LIN"   ; "name field"
0502   C5                     DB   "E" + $80   
0503                             ; 
0503   A0 04                  DW   L04A0   ; "link field"
0505                             ; 
0505   04           L0505:    DB   $04   ; "name length field"
0506                             ; 
0506   C3 0E        L0506:    DW   L0EC3   ; "code field" - docolon
0508                             ; 
0508                             ; ---
0508                             ; 
0508   C6 04        L0508:    DW   L04C6   ; check mem each time through loop
050A                             ; as dictionary could be expanding.
050A                             ; 
050A   3D 06                  DW   L063D   ; FIND          - search the dictionary
050C   EE 08                  DW   L08EE   ; ?DUP          - duplicate if found
050E   83 12                  DW   L1283   ; ?branch       - forward if not a
0510   07 00        L0510:    DW   $0007   ; to L0518      - word.
0512                             ; 
0512   4F 05                  DW   L054F   ; test and stack??
0514   76 12                  DW   L1276   ; branch
0516   F1 FF        L0516:    DW   $FFF1   ; back to L0508
0518                             ; 
0518   A9 06        L0518:    DW   L06A9   ; NUMBER
051A   EE 08                  DW   L08EE   ; ?DUP
051C   83 12                  DW   L1283   ; ?branch       - forward if not a
051E   07 00        L051E:    DW   $0007   ; to L0526      - number.
0520                             ; 
0520   64 05                  DW   L0564   ; pop de with test
0522   76 12                  DW   L1276   ; branch
0524   E3 FF        L0524:    DW   $FFE3   ; loop back to L0508
0526                             ; 
0526   1B 06        L0526:    DW   L061B   ; stack-length
0528   1A 0C                  DW   L0C1A   ; 0=
052A   83 12                  DW   L1283   ; ?branch       - forward with anything
052C   03 00        L052C:    DW   $0003   ; to L0530      - else
052E                             ; 
052E   B6 04        L052E:    DW   L04B6   ; EXIT                          >>>
0530                             ; 
0530                             ; ---
0530                             ; 
0530   78 05        L0530:    DW   L0578   ; RETYPE        - [?] at relevant place
0532   76 12                  DW   L1276   ; branch        - once corrected back
0534   D3 FF        L0534:    DW   $FFD3   ; to L0508      - to the loop.
0536                             ; 
0536                             ; ----------------------------
0536                             ; The "Print OK" Internal Word
0536                             ; ----------------------------
0536                             ; prints the OK message after successful execution.
0536                             ; 
0536   38 05        L0536:    DW   L0538   ; headerless "code field"
0538                             ; 
0538   3A 3E 3C     L0538:    LD   A,($3C3E)   ; fetch system variable FLAGS
053B                             ; 
053B   CB 77                  BIT   6,A   ; test for "COMPILER" mode.
053D   20 0E                  JR   NZ,L054D   ; forward if so.
053F                             ; 
053F   CB 67                  BIT   4,A   ; test for "INVIS" mode.
0541   20 0A                  JR   NZ,L054D   ; forward if so.
0543                             ; 
0543   CD 08 18               CALL   L1808   ; else print the inline string.
0546                             ; 
0546                             ; ---
0546                             ; 
0546   20 4F 4B               DB   " OK"   ; the OK message between two spaces.
0549   A0                     DB   " " + $80   ; last one inverted.
054A                             ; 
054A                             ; ---
054A                             ; 
054A   3E 0D        L054A:    LD   A,$0D   ; prepare a carriage return.
054C   CF                     RST   08H   ; and PRINT also.
054D                             ; 
054D   FD E9        L054D:    JP   (IY)   ; to "next".
054F                             ; 
054F                             ; ------------------------------
054F                             ; The "XXXXXXXXXX" Internal Word
054F                             ; ------------------------------
054F                             ; to handle a Word from LINE
054F                             ; 
054F   51 05        L054F:    DW   L0551   ; headerless "code field"
0551                             ; 
0551                             ; ---
0551                             ; 
0551   DF           L0551:    RST   18H   ; pop address from Data Stack to DE
0552                             ; 
0552   1B                     DEC   DE   ; point to the "name length field"
0553                             ; 
0553   1A                     LD   A,(DE)   ; fetch contents of the address.
0554                             ; 
0554   2F                     CPL      ; complement.
0555                             ; 
0555   DD A6 3E               AND   (IX+$3E)   ; FLAGS
0558                             ; 
0558   E6 40                  AND   $40   ; isolate BIT 6 of FLAGS, set if in
055A                             ; compiler mode.
055A                             ; 
055A   13                     INC   DE   ; increment address to "code field"
055B                             ; 
055B   28 04                  JR   Z,L0561   ; forward if not in compiling mode
055D                             ; 
055D   D7                     RST   10H   ; push word DE          - add to dict
055E   11 4E 0F               LD   DE,L0F4E   ; ","                   - enclose
0561                             ; 
0561   C3 BF 04     L0561:    JP   L04BF   ; next word.
0564                             ; 
0564                             ; -----------------------
0564                             ; The "???" Internal Word
0564                             ; -----------------------
0564                             ; after handling a number from LINE
0564                             ; 
0564   66 05        L0564:    DW   L0566   ; headerless "code field"
0566                             ; 
0566                             ; ---
0566                             ; 
0566   DF           L0566:    RST   18H   ; pop word DE
0567                             ; 
0567   DD CB 3E 76            BIT   6,(IX+$3E)   ; test FLAGS - compiler mode ?
056B                             ; 
056B   20 F4                  JR   NZ,L0561   ; loop back while in compiler mode.
056D                             ; 
056D   FD E9                  JP   (IY)   ; to "next".
056F                             ; 
056F                             ; -----------------
056F                             ; THE "RETYPE" WORD
056F                             ; -----------------
056F                             ; Allows user to edit the input line. Turns cursor to [?].
056F                             ; 
056F   52 45 54 59 50 L056F:   DB   "RETYP"   ; "name field"
0574   C5                     DB   "E" + $80   
0575                             ; 
0575   8B 05                  DW   L058B   ; "link field"
0577                             ; 
0577   06           L0577:    DB   $06   ; "name length field"
0578                             ; 
0578   7A 05        L0578:    DW   L057A   ; "code field"
057A                             ; 
057A                             ; ---
057A                             ; 
057A   CD EA 02     L057A:    CALL   L02EA   ; routine sets logical line.
057D                             ; 
057D   CD 76 02               CALL   L0276   ; routine pr_cursor
0580                             ; 
0580   36 BF                  LD   (HL),$BF   ; the inverse [?] character
0582                             ; 
0582   18 10                  JR   L0594   ; forward to join the QUERY routine.
0584                             ; 
0584                             ; ----------------
0584                             ; THE "QUERY" WORD
0584                             ; ----------------
0584                             ; Clears input buffer, then accepts characters until ENTER pressed.
0584                             ; Buffer can be edited as usual and is limited to 22 lines.
0584                             ; 
0584   51 55 45 52  L0584:    DB   "QUER"   ; "name field"
0588   D9                     DB   "Y" + $80   
0589                             ; 
0589   05 05                  DW   L0505   ; "link field"
058B                             ; 
058B   05           L058B:    DB   $05   ; "name length field"
058C                             ; 
058C   8E 05        L058C:    DW   L058E   ; "code field"
058E                             ; 
058E                             ; ---
058E                             ; 
058E   CD D8 02     L058E:    CALL   L02D8   ; routine SETBUF
0591                             ; 
0591   CD 76 02               CALL   L0276   ; routine pr_cursor
0594                             ; 
0594                             ; ->
0594   21 28 3C     L0594:    LD   HL,$3C28   ; fetch STATIN
0597   CB C6                  SET   0,(HL)   ; 
0599   CB AE                  RES   5,(HL)   ; (bit 5 set by interrupt when the user
059B                             ; presses the ENTER key)
059B                             ; 
059B   CB 6E        L059B:    BIT   5,(HL)   ; wait for interrupt to set the bit.
059D   28 FC                  JR   Z,L059B   ; loop until.
059F                             ; 
059F   CD 25 02               CALL   L0225   ; routine DEL-CURSOR
05A2   FD E9                  JP   (IY)   ; to "next".
05A4                             ; 
05A4                             ; ---------------
05A4                             ; THE "WORD" WORD
05A4                             ; ---------------
05A4                             ; WORD text
05A4                             ; ( delimiter -- address )
05A4                             ; Takes text out of the input buffer up as far as a delimiter, and copies it
05A4                             ; to pad, starting at the second byte there. Puts the length (not including
05A4                             ; the delimiter) in the first byte of the pad, and stacks the address of the
05A4                             ; first byte of the pad.
05A4                             ; At most 253 characters are taken from the input buffer. If there are more
05A4                             ; left before the delimiter, then the first byte of the pad shows 254.
05A4                             ; Initial delimiters are ignored.
05A4                             ; 
05A4   57 4F 52     L05A4:    DB   "WOR"   ; "name field"
05A7   C4                     DB   "D" + $80   
05A8                             ; 
05A8   77 05                  DW   L0577   ; "link field"
05AA                             ; 
05AA   04           L05AA:    DB   $04   ; "name length field"
05AB                             ; 
05AB   AD 05        L05AB:    DW   L05AD   ; "code field"
05AD                             ; 
05AD                             ; ---
05AD                             ; 
05AD   DF           L05AD:    RST   18H   ; pop word DE
05AE   21 FE 27               LD   HL,$27FE   ; set HL to penultimate byte of "pad".
05B1   06 FD                  LD   B,$FD   ; the count is 253.
05B3                             ; 
05B3   36 20        L05B3:    LD   (HL),$20   ; insert a space in pad.
05B5   2B                     DEC   HL   ; decrement the address.
05B6   10 FB                  DJNZ   L05B3   ; repeat for the 253 locations.
05B8                             ; 
05B8   D5                     PUSH   DE   ; save the delimiter.
05B9   EB                     EX   DE,HL   ; save in HL also, DE is start of pad.
05BA                             ; 
05BA   D7                     RST   10H   ; stack data word DE
05BB   D1                     POP   DE   ; retrieve the delimiter.
05BC                             ; 
05BC   CD E1 05               CALL   L05E1   ; 
05BF                             ; 
05BF   04                     INC   B   
05C0   05                     DEC   B   
05C1   28 03                  JR   Z,L05C6   ; 
05C3                             ; 
05C3   01 FF 00               LD   BC,$00FF   
05C6                             ; 
05C6   21 01 27     L05C6:    LD   HL,$2701   
05C9   71                     LD   (HL),C   
05CA   23                     INC   HL   
05CB   3E FC                  LD   A,$FC   
05CD   B9                     CP   C   
05CE   30 01                  JR   NC,L05D1   ; 
05D0                             ; 
05D0   4F                     LD   C,A   
05D1                             ; 
05D1   0C           L05D1:    INC   C   
05D2   D5                     PUSH   DE   
05D3   C5                     PUSH   BC   
05D4   EB                     EX   DE,HL   
05D5   ED B0                  LDIR      
05D7   C1                     POP   BC   
05D8   D1                     POP   DE   
05D9   0D                     DEC   C   
05DA   CD DA 07               CALL   L07DA   ; 
05DD   FD E9                  JP   (IY)   ; to "next".
05DF                             ; 
05DF                             ; --------------------------------
05DF                             ; THE "GET BUFFER TEXT" SUBROUTINE
05DF                             ; --------------------------------
05DF                             ; Called from FIND, NUMBER and XXXXX. Word may have leading spaces and is
05DF                             ; terminated by a space or newline (zero).
05DF                             ; It is also used to find the end of a comment delimited by ")".
05DF                             ; 
05DF                             ; =>
05DF   1E 20        L05DF:    LD   E,$20   ; set a space as the skip character.
05E1                             ; 
05E1                             ; =>called with E holding delimiter.
05E1                             ; 
05E1   2A 24 3C     L05E1:    LD   HL,($3C24)   ; fetch L_HALF - start of screen buffer.
05E4   22 1E 3C               LD   ($3C1E),HL   ; make INSCRN start of logical line the
05E7                             ; same.
05E7                             ; 
05E7   01 00 00               LD   BC,$0000   ; initialize letter count to zero.
05EA                             ; 
05EA                             ; -> loop
05EA   23           L05EA:    INC   HL   ; increment screen address.
05EB   7E                     LD   A,(HL)   ; fetch character to A.
05EC   BB                     CP   E   ; compare to character in E.
05ED   28 FB                  JR   Z,L05EA   ; loop while character matches.
05EF                             ; 
05EF   A7                     AND   A   ; test for zero (at $2700?)
05F0   28 0E                  JR   Z,L0600   ; forward if so.
05F2                             ; 
05F2                             ; a word has been found on the screen line.
05F2                             ; 
05F2   E5                     PUSH   HL   ; save pointer to start of word.
05F3                             ; 
05F3   03           L05F3:    INC   BC   ; increment the letter count.
05F4   23                     INC   HL   ; increment the screen pointer.
05F5                             ; 
05F5   7E                     LD   A,(HL)   ; fetch new character
05F6   A7                     AND   A   ; test for zero.
05F7   28 03                  JR   Z,L05FC   ; skip forward as at end of word.
05F9                             ; 
05F9   BB                     CP   E   ; compare to the skip character.
05FA   20 F7                  JR   NZ,L05F3   ; loop back if still within a word.
05FC                             ; 
05FC   D1           L05FC:    POP   DE   ; retrieve pointer to start of word.
05FD                             ; 
05FD   AF                     XOR   A   ; clear A
05FE   B8                     CP   B   ; compare to B zero
05FF                             ; 
05FF   C9                     RET      ; return. with carry reset for success.
0600                             ; 
0600                             ; ---
0600                             ; 
0600   D5           L0600:    PUSH   DE   ; save delimiter
0601                             ; 
0601   CD B0 02               CALL   L02B0   ; routine find zerobyte
0604   E2 14 06               JP   PO,L0614   ; jump if found to exit failure
0607                             ; 
0607   ED 5B 24 3C            LD   DE,($3C24)   ; else set DE from L_HALF
060B   CD FA 07               CALL   L07FA   ; routine SPACE_FILL (DE-HL)
060E   22 24 3C               LD   ($3C24),HL   ; set L_HALF to next line
0611                             ; 
0611   D1                     POP   DE   ; restore delimiter
0612                             ; 
0612   18 CD                  JR   L05E1   ; loop back using new line.
0614                             ; 
0614                             ; ---
0614                             ; 
0614                             ; branch here if a word not found.
0614                             ; 
0614   EB           L0614:    EX   DE,HL   ; DE addresses cursor.
0615   C1                     POP   BC   ; discard saved delimiter
0616   01 00 00               LD   BC,$0000   ; set BC, to zero
0619   37                     SCF      ; signal not found
061A   C9                     RET      ; return.
061B                             ; 
061B                             ; --------------------------------
061B                             ; The "stack length" Internal Word
061B                             ; --------------------------------
061B                             ; used once only from LINE to check for any extraneous text that is not a Word
061B                             ; or a Number.
061B                             ; 
061B   1D 06        L061B:    DW   L061D   ; headerless "code field"
061D                             ; 
061D                             ; ---
061D                             ; 
061D   CD DF 05     L061D:    CALL   L05DF   ; get buffer
0620                             ; 
0620   50                     LD   D,B   ; transfer length of word
0621   59                     LD   E,C   ; from BC to DE
0622   D7                     RST   10H   ; push word DE
0623   FD E9                  JP   (IY)   ; to "next".
0625                             ; 
0625                             ; 
0625                             ; ----------------
0625                             ; THE "VLIST" WORD
0625                             ; ----------------
0625                             ; List dictionary to screen, including words in ROM.
0625                             ; (no pause after 18 lines)
0625                             ; 
0625   56 4C 49 53  L0625:    DB   "VLIS"   ; "name field"
0629   D4                     DB   "T" + $80   
062A                             ; 
062A   AA 05                  DW   L05AA   ; "link field"
062C                             ; 
062C   05           L062C:    DB   $05   ; "name length field"
062D                             ; 
062D   2F 06        L062D:    DW   L062F   ; "code field"
062F                             ; 
062F                             ; ---
062F                             ; 
062F   3E 0D        L062F:    LD   A,$0D   ; prepare a newline
0631                             ; 
0631   CF                     RST   08H   ; print it.
0632                             ; 
0632   0E 00                  LD   C,$00   ; set a flag for "do all names".
0634                             ; 
0634   18 0E                  JR   L0644   ; forward to FIND.
0636                             ; 
0636                             ; 
0636                             ; ---------------
0636                             ; THE "FIND" WORD
0636                             ; ---------------
0636                             ; ( -- compilation address )
0636                             ; Leaves compilation address of first word in input buffer, if defined in
0636                             ; context vocabulary; else 0.
0636                             ; 
0636   46 49 4E     L0636:    DB   "FIN"   ; "name field"
0639   C4                     DB   "D" + $80   
063A                             ; 
063A   2C 06                  DW   L062C   ; "link field"
063C                             ; 
063C   04           L063C:    DB   $04   ; "name length field"
063D                             ; 
063D   3F 06        L063D:    DW   L063F   ; "code field"
063F                             ; 
063F                             ; ---
063F                             ; 
063F   CD DF 05     L063F:    CALL   L05DF   ; get buffer word, gets length in C.
0642                             ; 
0642   38 46                  JR   C,L068A   ; back if null to stack word zero
0644                             ; 
0644                             ; ->
0644                             ; 
0644   2A 33 3C     L0644:    LD   HL,($3C33)   ; fetch value of system variable CONTEXT
0647   7E                     LD   A,(HL)   ; extract low byte of address.
0648   23                     INC   HL   ; increment pointer.
0649   66                     LD   H,(HL)   ; extract high byte of address.
064A   6F                     LD   L,A   ; address now in HL.
064B                             ; 
064B                             ; The address points to the "name length field" of the most recent word in the
064B                             ; Dictionary.
064B                             ; 
064B                             ; 
064B   7E           L064B:    LD   A,(HL)   ; fetch addressed byte.
064C   E6 3F                  AND   $3F   ; discount bit 6, the immediate word
064E                             ; indicator, to give length 1-31
064E                             ; 
064E   28 2F                  JR   Z,L067F   ; a "zero" length indicates this is a
0650                             ; link like the example at the end of
0650                             ; this ROM.
0650                             ; 
0650   A9                     XOR   C   ; match against C.
0651   28 04                  JR   Z,L0657   ; skip forward if lengths match.
0653                             ; 
0653   79                     LD   A,C   ; test flag C
0654   A7                     AND   A   ; for value zero.
0655   20 28                  JR   NZ,L067F   ; forward if C not zero.
0657                             ; 
0657                             ; else a name that matches the search length or all names are required - VLIST.
0657                             ; 
0657                             ; 
0657   D5           L0657:    PUSH   DE   ; preserve DE
0658   E5                     PUSH   HL   ; preserve "name length field" pointer.
0659                             ; 
0659   CD E8 15               CALL   L15E8   ; routine WORDSTART finds start of name.
065C                             ; A is returned as zero.
065C                             ; 
065C   B1                     OR   C   ; test C for zero
065D   28 17                  JR   Z,L0676   ; branch forward to print if in VLIST.
065F                             ; 
065F                             ; else the search is for a specific word and a word with same length, at least,
065F                             ; has been found.
065F                             ; 
065F   41                     LD   B,C   ; copy the length to counter B.
0660                             ; 
0660   1A           L0660:    LD   A,(DE)   ; fetch first letter of match word.
0661                             ; 
0661   CD 07 08               CALL   L0807   ; routine UPPERCASE
0664                             ; 
0664   13                     INC   DE   ; update pointer (in lower screen)
0665   AE                     XOR   (HL)   ; match against letter (in dictionary).
0666   E6 7F                  AND   $7F   ; disregard any inverted bit.
0668   23                     INC   HL   ; increment dictionary pointer.
0669                             ; 
0669   20 12                  JR   NZ,L067D   ; exit loop to try next link if no match
066B                             ; 
066B   10 F3                  DJNZ   L0660   ; else loop back for all letters.
066D                             ; 
066D                             ; Oh Frabjous day - a match.
066D                             ; 
066D   D1                     POP   DE   ; pop "name length field" pointer.
066E   13                     INC   DE   ; increment to point to compilation
066F                             ; address.
066F   D7                     RST   10H   ; stack date word DE.
0670                             ; 
0670                             ; the remaining task is to clean up the input buffer in the lower screen.
0670                             ; 
0670   D1                     POP   DE   ; pop the DE - screen pointer.
0671                             ; 
0671   CD DA 07               CALL   L07DA   ; clean up - backfill with spaces.
0674                             ; 
0674   FD E9                  JP   (IY)   ; to "next".
0676                             ; 
0676                             ; -----------------------
0676                             ; THE "PRINT NAME" BRANCH
0676                             ; -----------------------
0676                             ; This branch is taken from the above loop when all found words are to be
0676                             ; printed by VLIST. It takes its time as if the user has expanded the
0676                             ; dictionary then the list will scroll off the top of the screen. By waiting
0676                             ; for an interrupt each time, it ensures that a standard listing takes about
0676                             ; three seconds and there is ample opportunity to press BREAK to stop at a
0676                             ; certain point.
0676                             ; 
0676   CD FB 17     L0676:    CALL   L17FB   ; routine print string and space
0679                             ; 
0679   76                     HALT      ; wait for an interrupt.
067A                             ; 
067A   CD E4 04               CALL   L04E4   ; routine checks BREAK key.
067D                             ; 
067D   E1           L067D:    POP   HL   ; restore "name length field" pointer
067E   D1                     POP   DE   ; restore DE
067F                             ; 
067F   2B           L067F:    DEC   HL   ; point to high byte of "link field"
0680   7E                     LD   A,(HL)   ; hold it in A.
0681   2B                     DEC   HL   ; point to low byte of "link field"
0682   6E                     LD   L,(HL)   ; transfer address of the new
0683   67                     LD   H,A   ; "name length field" to HL pointer.
0684                             ; 
0684   B5                     OR   L   ; test if address is zero - for the
0685                             ; last entry in the linked list.
0685                             ; 
0685   20 C4                  JR   NZ,L064B   ; loop back while this is not the
0687                             ; last entry in the vocabulary.
0687                             ; 
0687   C3           L0687:    DB   $C3   ; A JP instruction i.e. JP L068A
0688                             ; 
0688                             ; Note. The intention is to jump past the headerless code word for the internal
0688                             ; word stk_zero. Since the word that would follow the first byte of the jump
0688                             ; instruction would be identical to the word it is jumping over then the word
0688                             ; can be omitted. Only saves one byte but this is back in 1983.
0688                             ; 
0688                             ; ----------------------------
0688                             ; The "stk-zero" Internal Word
0688                             ; ----------------------------
0688                             ; (  -- 0 )
0688                             ; 
0688   8A 06        L0688:    DW   L068A   ; headerless "code field"
068A                             ; 
068A                             ; ---
068A                             ; 
068A   11 00 00     L068A:    LD   DE,$0000   ; load DE with the value zero.
068D   D7                     RST   10H   ; stack Data Word DE
068E                             ; 
068E   FD E9                  JP   (IY)   ; to "next".
0690                             ; 
0690                             ; ------------------
0690                             ; THE "EXECUTE" WORD
0690                             ; ------------------
0690                             ; ( compilation address --  )
0690                             ; Executes the word with the given compilation address.
0690                             ; 
0690   45 58 45 43 55 54 L0690:   DB   "EXECUT"   ; "name field"
0696   C5                     DB   "E" + $80   
0697                             ; 
0697   3C 06                  DW   L063C   ; "link field"
0699                             ; 
0699   07           L0699:    DB   $07   ; "name length field"
069A                             ; 
069A   9C 06        L069A:    DW   L069C   ; "code field"
069C                             ; 
069C                             ; ---
069C                             ; 
069C   DF           L069C:    RST   18H   
069D                             ; 
069D   C3 BF 04               JP   L04BF   ; 
06A0                             ; 
06A0                             ; -----------------
06A0                             ; THE "NUMBER" WORD
06A0                             ; -----------------
06A0                             ; Takes a number from the start of the input buffer. Leaves the number and
06A0                             ; a non-zero address on the stack. (The address is the compilation address
06A0                             ; of a literal compiler, so that if you then say EXECUTE, the literal compiler
06A0                             ; compiles the number into the dictionary as a literal - for an integer it
06A0                             ; is 4102, for a floating point number it is 4181).
06A0                             ; If no valid number then leaves just 0 on the stack.
06A0                             ; 
06A0   4E 55 4D 42 45 L06A0:   DB   "NUMBE"   ; "name field"
06A5   D2                     DB   "R" + $80   
06A6                             ; 
06A6   99 06                  DW   L0699   ; "link field"
06A8                             ; 
06A8   06           L06A8:    DB   $06   ; "name length field"
06A9                             ; 
06A9   AB 06        L06A9:    DW   L06AB   ; "code field"
06AB                             ; 
06AB                             ; ---
06AB                             ; 
06AB   CD DF 05     L06AB:    CALL   L05DF   ; get buffer
06AE                             ; 
06AE   38 DA                  JR   C,L068A   ; if empty stack word zero.
06B0                             ; 
06B0   C5                     PUSH   BC   
06B1   D5                     PUSH   DE   
06B2                             ; 
06B2   CD 4C 07               CALL   L074C   ; 
06B5                             ; 
06B5   20 05                  JR   NZ,L06BC   ; 
06B7                             ; 
06B7   11 06 10               LD   DE,$1006   ; addr literal?
06BA   18 58                  JR   L0714   ; 
06BC                             ; 
06BC                             ; ---
06BC                             ; 
06BC   DF           L06BC:    RST   18H   ; pop word DE
06BD   11 00 00               LD   DE,$0000   
06C0   D7                     RST   10H   ; push word DE
06C1   11 00 45               LD   DE,$4500   
06C4   C1                     POP   BC   
06C5   C5                     PUSH   BC   
06C6   0A                     LD   A,(BC)   
06C7   FE 2D                  CP   $2D   ; is it "-" ?
06C9   20 03                  JR   NZ,L06CE   ; 
06CB                             ; 
06CB   16 C5                  LD   D,$C5   
06CD   03                     INC   BC   
06CE   D7           L06CE:    RST   10H   ; push word DE
06CF   50                     LD   D,B   
06D0   59                     LD   E,C   
06D1   2B                     DEC   HL   
06D2   2B                     DEC   HL   
06D3                             ; 
06D3   CD 23 07     L06D3:    CALL   L0723   ; routine GET_DECIMAL
06D6                             ; 
06D6   23                     INC   HL   
06D7   34                     INC   (HL)   
06D8   2B                     DEC   HL   
06D9   30 F8                  JR   NC,L06D3   ; 
06DB                             ; 
06DB   FE FE                  CP   $FE   
06DD   20 3D                  JR   NZ,L071C   ; 
06DF                             ; 
06DF   CD 23 07     L06DF:    CALL   L0723   ; routine GET_DECIMAL
06E2                             ; 
06E2   30 FB                  JR   NC,L06DF   ; 
06E4                             ; 
06E4   C6 30                  ADD   A,$30   ; add "0" converting to letter.
06E6   CD 7B 07               CALL   L077B   ; 
06E9   20 04                  JR   NZ,L06EF   ; 
06EB                             ; 
06EB   1E 00                  LD   E,$00   
06ED   18 0E                  JR   L06FD   ; 
06EF                             ; 
06EF   E6 DF        L06EF:    AND   $DF   ; 
06F1                             ; 
06F1   FE 45                  CP   $45   ; is it "E" - extended format?
06F3   20 27                  JR   NZ,L071C   ; 
06F5                             ; 
06F5   E5                     PUSH   HL   
06F6                             ; 
06F6   CD 4C 07               CALL   L074C   ; 
06F9                             ; 
06F9   DF                     RST   18H   ; pop word DE
06FA   E1                     POP   HL   
06FB   20 1F                  JR   NZ,L071C   ; 
06FD                             ; 
06FD   CD 40 07     L06FD:    CALL   L0740   ; 
0700   28 0F                  JR   Z,L0711   ; 
0702                             ; 
0702   23                     INC   HL   
0703   7E                     LD   A,(HL)   
0704   E6 7F                  AND   $7F   
0706   83                     ADD   A,E   
0707                             ; 
0707   FA 1C 07               JP   M,L071C   ; forward +->
070A                             ; 
070A   28 10                  JR   Z,L071C   ; forward +->
070C                             ; 
070C   AE                     XOR   (HL)   
070D   E6 7F                  AND   $7F   
070F   AE                     XOR   (HL)   
0710   77                     LD   (HL),A   
0711   11 55 10     L0711:    LD   DE,L1055   ; stk_fp
0714   D7           L0714:    RST   10H   ; push word DE
0715   D1                     POP   DE   
0716   C1                     POP   BC   
0717   CD DA 07               CALL   L07DA   ; 
071A   FD E9                  JP   (IY)   ; to "next".
071C                             ; 
071C                             ; ---
071C                             ; 
071C                             ; +->
071C   E1           L071C:    POP   HL   
071D   E1                     POP   HL   
071E   DF                     RST   18H   ; pop word DE
071F   DF                     RST   18H   ; pop word DE
0720   C3 8A 06               JP   L068A   ; 
0723                             ; 
0723                             ; ----------------------------
0723                             ; THE "GET DECIMAL" SUBROUTINE
0723                             ; ----------------------------
0723                             ; Fetch character and return with carry set if after conversion is not in
0723                             ; range 0 to 9.
0723                             ; 
0723   1A           L0723:    LD   A,(DE)   
0724   13                     INC   DE   
0725   D6 30                  SUB   $30   ; subtract "0"
0727   D8                     RET   C   ; return if was less than "0"
0728                             ; 
0728   FE 0A                  CP   $0A   ; compare to ten.
072A   3F                     CCF      ; complement
072B   D8                     RET   C   ; return - with carry set if over 9.
072C                             ; 
072C                             ; ---------
072C                             ; normalize?
072C                             ; ---------
072C                             ; => from below only.
072C   4F           L072C:    LD   C,A   
072D   7E                     LD   A,(HL)   
072E   E6 F0                  AND   $F0   
0730   C0                     RET   NZ   
0731                             ; 
0731   79                     LD   A,C   
0732                             ; 
0732                             ; => (int/print_fp)
0732   2B           L0732:    DEC   HL   
0733   2B                     DEC   HL   
0734   0E 03                  LD   C,$03   
0736                             ; 
0736   ED 6F        L0736:    RLD      ;  A = xxxx3210  <--   7654<-3210 (HL)
0738                             ; 
0738   23                     INC   HL   ; 
0739   0D                     DEC   C   
073A   20 FA                  JR   NZ,L0736   ; 
073C                             ; 
073C   35                     DEC   (HL)   ; decrement exponent
073D   2B                     DEC   HL   ; point to start of BCD nibbles
073E   BF                     CP   A   
073F   C9                     RET      
0740                             ; 
0740                             ; ---
0740                             ; 
0740                             ; from ufloat to normalize 6-nibble mantissa
0740                             ; 
0740   06 06        L0740:    LD   B,$06   ; six nibbles
0742                             ; 
0742   AF           L0742:    XOR   A   
0743                             ; 
0743   CD 2C 07               CALL   L072C   ; 
0746                             ; 
0746   C0                     RET   NZ   
0747                             ; 
0747   10 F9                  DJNZ   L0742   ; 
0749                             ; 
0749   23                     INC   HL   
074A   70                     LD   (HL),B   
074B                             ; 
074B   C9                     RET      
074C                             ; 
074C                             ; ---------------------------
074C                             ; THE "GET NUMBER" SUBROUTINE
074C                             ; ---------------------------
074C                             ; can be called twice by the above code for the word "NUMBER".
074C                             ; Once to get the first number encountered and sometimes, if in extended
074C                             ; format, the exponent as well.
074C                             ; 
074C   D7           L074C:    RST   10H   ; push word DE
074D                             ; 
074D   CD B9 04               CALL   L04B9   ; forth
0750                             ; 
0750   6B 08        L0750:    DW   L086B   ; dup
0752   96 08                  DW   L0896   ; C@
0754   4B 10                  DW   L104B   ; stk-data
0756   2D                     DB   $2D   ;  chr "-"
0757   4A 0C                  DW   L0C4A   ; =
0759   6B 08                  DW   L086B   ; dup
075B   A9 0D                  DW   L0DA9   ; negate
075D   D2 08                  DW   L08D2   ; >R
075F   D2 0D                  DW   L0DD2   ; +
0761   1F 0E                  DW   L0E1F   ; 1-
0763   88 06                  DW   L0688   ; stk-zero
0765   88 06                  DW   L0688   ; stk-zero
0767   FF 08                  DW   L08FF   ; rot
0769   8A 07        L0769:    DW   L078A   ; convert
076B   FF 08                  DW   L08FF   ; rot
076D   DF 08                  DW   L08DF   ; R>
076F   94 0D                  DW   L0D94   ; pos
0771   FF 08                  DW   L08FF   ; rot
0773   79 08                  DW   L0879   ; drop
0775   85 08                  DW   L0885   ; swap
0777   0E 1A                  DW   L1A0E   ; end-forth.
0779                             ; 
0779   DF           L0779:    RST   18H   ; pop word DE
077A   1A                     LD   A,(DE)   
077B                             ; 
077B   FE 20        L077B:    CP   $20   
077D   C8                     RET   Z   
077E                             ; 
077E   A7                     AND   A   
077F   C9                     RET      
0780                             ; 
0780                             ; ------------------
0780                             ; THE "CONVERT" WORD
0780                             ; ------------------
0780                             ; (  ud1, addr1 -- ud2, addr2  )
0780                             ; Accumulates digits from text into an unsigned double length
0780                             ; number ud1: for each digit, the double length accumulator is
0780                             ; multiplied by the system number base and the digit (converted
0780                             ; from ASCII) is added on. The text starts at addr1 + 1. addr2 is
0780                             ; the address of the first unconvertible character, ud2 is the
0780                             ; final value of the accumulator.
0780                             ; 
0780   43 4F 4E 56 45 52 L0780:   DB   "CONVER"   ; "name field"
0786   D4                     DB   "T" + $80   
0787                             ; 
0787   A8 06                  DW   L06A8   ; "link field"
0789                             ; 
0789   07           L0789:    DB   $07   ; "name length field"
078A                             ; 
078A   C3 0E        L078A:    DW   L0EC3   ; "code field" - docolon
078C                             ; 
078C                             ; ---
078C                             ; 
078C   09 0E        L078C:    DW   L0E09   ; 1+
078E   6B 08        L078E:    DW   L086B   ; dup
0790   D2 08        L0790:    DW   L08D2   ; >R
0792   96 08        L0792:    DW   L0896   ; C@
0794   B8 07        L0794:    DW   L07B8   ; stk_digit
0796   83 12        L0796:    DW   L1283   ; ?branch
0798   1B 00        L0798:    DW   $001B   ; to 0799 + 1B = $07B4
079A                             ; 
079A   85 08        L079A:    DW   L0885   ; swap
079C   8A 04        L079C:    DW   L048A   ; get base
079E   96 08        L079E:    DW   L0896   ; C@
07A0   A8 0C        L07A0:    DW   L0CA8   ; u*
07A2   79 08        L07A2:    DW   L0879   ; drop
07A4   FF 08        L07A4:    DW   L08FF   ; rot
07A6   8A 04        L07A6:    DW   L048A   ; get base
07A8   96 08        L07A8:    DW   L0896   ; C@
07AA   A8 0C        L07AA:    DW   L0CA8   ; U*
07AC   EE 0D        L07AC:    DW   L0DEE   ; D+
07AE   DF 08        L07AE:    DW   L08DF   ; R>
07B0   76 12        L07B0:    DW   L1276   ; branch
07B2   D9 FF        L07B2:    DW   $FFD9   ; loop back to L078C
07B4                             ; 
07B4   DF 08        L07B4:    DW   L08DF   ; R>
07B6   B6 04        L07B6:    DW   L04B6   ; exit
07B8                             ; 
07B8                             ; -----------------------------
07B8                             ; The "stk_digit" Internal Word
07B8                             ; -----------------------------
07B8                             ; 
07B8   BA 07        L07B8:    DW   L07BA   ; headerless "code field"
07BA                             ; 
07BA                             ; ---
07BA                             ; 
07BA   DF           L07BA:    RST   18H   ; pop word DE
07BB                             ; 
07BB   7B                     LD   A,E   ; character to A
07BC                             ; 
07BC   CD 07 08               CALL   L0807   ; to_upper
07BF                             ; 
07BF   C6 D0                  ADD   A,$D0   ; add to give carry with "0" and more.
07C1                             ; 
07C1   30 14                  JR   NC,L07D7   ; if less than "0" push byte 0 false.
07C3                             ; 
07C3   FE 0A                  CP   $0A   ; compare to ten.
07C5   38 06                  JR   C,L07CD   ; forward to stack bytes 0 - 9.
07C7                             ; 
07C7   C6 EF                  ADD   A,$EF   ; 
07C9   30 0C                  JR   NC,L07D7   ; push word false 0.
07CB                             ; 
07CB   C6 0A                  ADD   A,$0A   
07CD                             ; 
07CD   DD BE 3F     L07CD:    CP   (IX+$3F)   ; compare to BASE
07D0   30 05                  JR   NC,L07D7   ; push word false 0.
07D2                             ; 
07D2                             ; else digit is within range of number base
07D2                             ; 
07D2   16 00                  LD   D,$00   
07D4   5F                     LD   E,A   
07D5   D7                     RST   10H   ; push word DE
07D6   37                     SCF      ; set carry to signal true
07D7                             ; 
07D7   C3 21 0C     L07D7:    JP   L0C21   ; push word 1 or 0
07DA                             ; 
07DA                             ; ---
07DA                             ;       ??
07DA                             ; ---
07DA                             ; 
07DA   62           L07DA:    LD   H,D   
07DB   6B                     LD   L,E   
07DC   03                     INC   BC   
07DD   09                     ADD   HL,BC   
07DE   E5                     PUSH   HL   
07DF   DD CB 3E 66            BIT   4,(IX+$3E)   ; FLAGS
07E3   CC 7F 09               CALL   Z,L097F   ; pr_string
07E6                             ; 
07E6   CD B0 02               CALL   L02B0   ; curs?
07E9                             ; 
07E9   D1                     POP   DE   
07EA   A7                     AND   A   
07EB   ED 52                  SBC   HL,DE   
07ED   44                     LD   B,H   
07EE   4D                     LD   C,L   
07EF   2A 1E 3C               LD   HL,($3C1E)   ; INSCRN
07F2   23                     INC   HL   
07F3   EB                     EX   DE,HL   
07F4   38 05                  JR   C,L07FB   ; 
07F6                             ; 
07F6   28 02                  JR   Z,L07FA   ; forward to SPACE_FILL.
07F8                             ; 
07F8   ED B0                  LDIR      
07FA                             ; 
07FA                             ; ------------------------
07FA                             ; The "SPACE FILL" routine
07FA                             ; ------------------------
07FA                             ; -> from cls
07FA                             ; 
07FA   A7           L07FA:    AND   A   ; prepare to subtract two screen
07FB                             ; pointers.
07FB                             ; 
07FB   ED 52        L07FB:    SBC   HL,DE   ; number of bytes in HL.
07FD   EB                     EX   DE,HL   ; now in DE, HL = start of area.
07FE                             ; 
07FE   7A           L07FE:    LD   A,D   ; check if the
07FF   B3                     OR   E   ; counter is zero.
0800   C8                     RET   Z   ; return if so.                 >>
0801                             ; 
0801   36 20                  LD   (HL),$20   ; insert a space character.
0803   23                     INC   HL   ; next address.
0804   1B                     DEC   DE   ; decrement byte counter.
0805   18 F7                  JR   L07FE   ; loop back to exit on zero.
0807                             ; 
0807                             ; --------------------------
0807                             ; THE "UPPERCASE" SUBROUTINE
0807                             ; --------------------------
0807                             ; converts characters to uppercase.
0807                             ; 
0807   E6 7F        L0807:    AND   $7F   ; ignore inverse bit 7
0809   FE 61                  CP   $61   ; compare to "a"
080B   D8                     RET   C   ; return if lower
080C                             ; 
080C   FE 7B                  CP   $7B   ; compare to "z" + 1
080E   D0                     RET   NC   ; return if higher than "z"
080F                             ; 
080F   E6 5F                  AND   $5F   ; make uppercase
0811   C9                     RET      ; return.
0812                             ; 
0812                             ; --------------
0812                             ; THE "VIS" WORD
0812                             ; --------------
0812                             ; Allows copy-up mechanism and "OK".
0812                             ; 
0812   56 49        L0812:    DB   "VI"   ; "name field"
0814   D3                     DB   "S" + $80   
0815                             ; 
0815   89 07                  DW   L0789   ; "link field"
0817                             ; 
0817   03           L0817:    DB   $03   ; "name length field"
0818                             ; 
0818   1A 08        L0818:    DW   L081A   ; "code field"
081A                             ; 
081A                             ; ---
081A                             ; 
081A   DD CB 3E A6  L081A:    RES   4,(IX+$3E)   ; update FLAGS signal visible mode.
081E   FD E9                  JP   (IY)   ; to "next".
0820                             ; 
0820                             ; ----------------
0820                             ; THE "INVIS" WORD
0820                             ; ----------------
0820                             ; Suppresses copy-up mechanism and "OK".
0820                             ; 
0820   49 4E 56 49  L0820:    DB   "INVI"   ; "name field"
0824   D3                     DB   "S" + $80   
0825                             ; 
0825   17 08                  DW   L0817   ; "link field"
0827                             ; 
0827   05           L0827:    DB   $05   ; "name length field"
0828                             ; 
0828   2A 08        L0828:    DW   L082A   ; "code field"
082A                             ; 
082A                             ; ---
082A                             ; 
082A   DD CB 3E E6  L082A:    SET   4,(IX+$3E)   ; update FLAGS signal invisible mode.
082E                             ; 
082E   FD E9                  JP   (IY)   ; to "next".
0830                             ; 
0830                             ; 
0830                             ; ---------------
0830                             ; THE "FAST" WORD
0830                             ; ---------------
0830                             ; Fast mode - runs without error checks.
0830                             ; Debugged programs run 25% faster.
0830                             ; 
0830   46 41 53     L0830:    DB   "FAS"   ; "name field"
0833   D4                     DB   "T" + $80   
0834                             ; 
0834   27 08                  DW   L0827   ; "link field"
0836                             ; 
0836   04           L0836:    DB   $04   ; "name length field"
0837                             ; 
0837   39 08        L0837:    DW   L0839   ; "code field"
0839                             ; 
0839                             ; ---
0839                             ; 
0839   FD 21 B9 04  L0839:    LD   IY,L04B9   ; miss memory checks on return
083D                             ; 
083D   FD E9                  JP   (IY)   ; to "next".
083F                             ; 
083F                             ; ---------------
083F                             ; THE "SLOW" WORD
083F                             ; ---------------
083F                             ; ( -- )
083F                             ; Slow mode with error checking.
083F                             ; Make IY point to a return routine that performs housekeeping.
083F                             ; 
083F                             ; 
083F   53 4C 4F     L083F:    DB   "SLO"   ; "name field"
0842   D7                     DB   "W" + $80   
0843                             ; 
0843   36 08                  DW   L0836   ; "link field"
0845                             ; 
0845   04           L0845:    DB   $04   ; "name length field"
0846                             ; 
0846                             ; 
0846   48 08        L0846:    DW   L0848   ; "code field"
0848                             ; 
0848                             ; ---
0848                             ; 
0848   FD 21 C8 04  L0848:    LD   IY,L04C8   ; set vector to memory checks each pass
084C                             ; 
084C   FD E9                  JP   (IY)   ; to "next".
084E                             ; 
084E                             ; ---------------------------------
084E                             ; THE "DATA STACK TO BC" SUBROUTINE
084E                             ; ---------------------------------
084E                             ; Called on twenty occasions to fetch a word from the Data Stack into the
084E                             ; BC register pair. Very similar to RST 18H which does the same thing with the
084E                             ; DE register pair as the destination on 73 occasions.
084E                             ; In fact, as two Z80 restarts are unused, then 40 bytes of ROM code could have
084E                             ; been saved by making this a restart also.
084E                             ; 
084E   2A 3B 3C     L084E:    LD   HL,($3C3B)   ; fetch SPARE - start of Spare Memory.
0851   2B                     DEC   HL   ; decrement to point to last stack item
0852   46                     LD   B,(HL)   ; load high byte to B.
0853   2B                     DEC   HL   ; address low byte of word.
0854   4E                     LD   C,(HL)   ; and load to C.
0855   22 3B 3C               LD   ($3C3B),HL   ; update the system variable SPARE to
0858                             ; a location two bytes less than it was.
0858   C9                     RET      ; return.
0859                             ; 
0859                             ; -----------------------------------------
0859                             ; THE "CONTINUATION OF THE RST 18H" RESTART
0859                             ; -----------------------------------------
0859                             ; complete the operation of popping a word to DE from the data stack.
0859                             ; 
0859   2B           L0859:    DEC   HL   ; 
085A   5E                     LD   E,(HL)   ; 
085B   22 3B 3C               LD   ($3C3B),HL   ; update SPARE
085E   C9                     RET      ; return.
085F                             ; 
085F                             ; -----------------------------------------
085F                             ; THE "CONTINUATION OF THE RST 10H" RESTART
085F                             ; -----------------------------------------
085F                             ; complete the operation of pushing a word in DE to the data stack.
085F                             ; 
085F   72           L085F:    LD   (HL),D   ; 
0860   23                     INC   HL   ; 
0861   22 3B 3C               LD   ($3C3B),HL   ; update SPARE
0864   C9                     RET      ; return.
0865                             ; 
0865                             ; --------------
0865                             ; THE "DUP" WORD
0865                             ; --------------
0865                             ; ( n -- n, n )
0865                             ; Duplicates the top of the stack.
0865                             ; 
0865   44 55        L0865:    DB   "DU"   ; "name field"
0867   D0                     DB   "P" + $80   
0868                             ; 
0868   45 08                  DW   L0845   ; "link field"
086A                             ; 
086A   03           L086A:    DB   $03   ; "name length field"
086B                             ; 
086B   6D 08        L086B:    DW   L086D   ; "code field"
086D                             ; 
086D                             ; ---
086D                             ; 
086D   DF           L086D:    RST   18H   ; unstack Data Word DE
086E   D7                     RST   10H   ; stack Data Word DE
086F   D7                     RST   10H   ; stack Data Word DE
0870                             ; 
0870   FD E9                  JP   (IY)   ; to "next".
0872                             ; 
0872                             ; ---------------
0872                             ; THE "DROP" WORD
0872                             ; ---------------
0872                             ; ( n -- )
0872                             ; Throws away the top of the stack.
0872                             ; 
0872   44 52 4F     L0872:    DB   "DRO"   ; "name field"
0875   D0                     DB   "P" + $80   
0876                             ; 
0876   6A 08                  DW   L086A   ; "link field"
0878                             ; 
0878   04           L0878:    DB   $04   ; "name length field"
0879                             ; 
0879   7B 08        L0879:    DW   L087B   ; "code field"
087B                             ; 
087B                             ; ---
087B                             ; 
087B   DF           L087B:    RST   18H   ; unstack Data Word DE
087C   FD E9                  JP   (IY)   ; to "next".
087E                             ; 
087E                             ; ---------------
087E                             ; THE "SWAP" WORD
087E                             ; ---------------
087E                             ; (n1, n2 -- n2, n1)
087E                             ; 
087E   53 57 41     L087E:    DB   "SWA"   ; "name field"
0881   D0                     DB   "P" + $80   
0882                             ; 
0882   78 08                  DW   L0878   ; "link field"
0884                             ; 
0884   04           L0884:    DB   $04   ; "name length field"
0885                             ; 
0885   87 08        L0885:    DW   L0887   ; "code field"
0887                             ; 
0887                             ; ---
0887                             ; 
0887   DF           L0887:    RST   18H   ; pop word DE
0888   CD 4E 08               CALL   L084E   ; stk_to_bc
088B   D7                     RST   10H   ; push word DE
088C   50                     LD   D,B   ; 
088D   59                     LD   E,C   ; 
088E   D7                     RST   10H   ; push word DE
088F                             ; 
088F   FD E9                  JP   (IY)   ; to "next".
0891                             ; 
0891                             ; -------------
0891                             ; THE "C@" WORD
0891                             ; -------------
0891                             ; (address -- byte)
0891                             ; Fetches the contents of a given address.
0891                             ; 
0891   43           L0891:    DB   "C"   ; "name field"
0892   C0                     DB   "@" + $80   
0893                             ; 
0893   84 08                  DW   L0884   ; "link field"
0895                             ; 
0895   02           L0895:    DB   $02   ; "name length field"
0896                             ; 
0896   98 08        L0896:    DW   L0898   ; "code field"
0898                             ; 
0898                             ; ---
0898                             ; 
0898   DF           L0898:    RST   18H   ; pop word DE
0899   1A                     LD   A,(DE)   
089A   5F                     LD   E,A   
089B   16 00                  LD   D,$00   
089D                             ; 
089D   D7                     RST   10H   ; push word DE
089E                             ; 
089E   FD E9                  JP   (IY)   ; to "next".
08A0                             ; 
08A0                             ; -------------
08A0                             ; THE "C!" WORD
08A0                             ; -------------
08A0                             ; (n, address -- )
08A0                             ; Stores the less significant byte on n at a given address.
08A0                             ; 
08A0   43           L08A0:    DB   "C"   ; "name field"
08A1   A1                     DB   "!" + $80   
08A2                             ; 
08A2   95 08                  DW   L0895   ; "link field"
08A4                             ; 
08A4   02           L08A4:    DB   $02   ; "name length field"
08A5                             ; 
08A5   A7 08        L08A5:    DW   L08A7   ; "code field"
08A7                             ; 
08A7                             ; ---
08A7                             ; 
08A7   DF           L08A7:    RST   18H   ; pop word DE
08A8   CD 4E 08               CALL   L084E   ; stk_to_bc
08AB   79                     LD   A,C   
08AC   12                     LD   (DE),A   
08AD                             ; 
08AD   FD E9                  JP   (IY)   ; to "next".
08AF                             ; 
08AF                             ; ------------
08AF                             ; THE "@" WORD
08AF                             ; ------------
08AF                             ; (address -- n)
08AF                             ; Leaves on stack the single length integer at the given address.
08AF                             ; 
08AF   C0           L08AF:    DB   "@" + $80   ; "name field"
08B0                             ; 
08B0   A4 08                  DW   L08A4   ; "link field"
08B2                             ; 
08B2   01           L08B2:    DB   $01   ; "name length field"
08B3                             ; 
08B3   B5 08        L08B3:    DW   L08B5   ; "code field"
08B5                             ; 
08B5                             ; ---
08B5                             ; 
08B5   DF           L08B5:    RST   18H   ; pop word DE
08B6                             ; 
08B6   EB                     EX   DE,HL   
08B7   5E                     LD   E,(HL)   
08B8   23                     INC   HL   
08B9   56                     LD   D,(HL)   
08BA                             ; 
08BA   D7                     RST   10H   ; push word DE
08BB                             ; 
08BB   FD E9                  JP   (IY)   ; to "next".
08BD                             ; 
08BD                             ; ------------
08BD                             ; THE "!" WORD
08BD                             ; ------------
08BD                             ; (n,address --)
08BD                             ; Stores the single-length integer n at the given address in memory.
08BD                             ; 
08BD   A1           L08BD:    DB   "!" + $80   ; "name field"
08BE                             ; 
08BE   B2 08                  DW   L08B2   ; "link field"
08C0                             ; 
08C0   01           L08C0:    DB   $01   ; "name length field"
08C1                             ; 
08C1   C3 08        L08C1:    DW   L08C3   ; "code field"
08C3                             ; 
08C3                             ; ---
08C3                             ; 
08C3   DF           L08C3:    RST   18H   ; pop word DE
08C4   CD 4E 08               CALL   L084E   ; stk_to_bc
08C7   EB                     EX   DE,HL   
08C8   71                     LD   (HL),C   
08C9   23                     INC   HL   
08CA   70                     LD   (HL),B   
08CB                             ; 
08CB   FD E9                  JP   (IY)   ; to "next".
08CD                             ; 
08CD                             ; -------------
08CD                             ; THE ">R" WORD
08CD                             ; -------------
08CD                             ; (n -- )
08CD                             ; Transfers top entry on data stack to return stack.
08CD                             ; It can be copied back using "I".
08CD                             ; 
08CD   3E           L08CD:    DB   ">"   ; "name field"
08CE   D2                     DB   "R" + $80   
08CF                             ; 
08CF   C0 08                  DW   L08C0   ; "link field"
08D1                             ; 
08D1   02           L08D1:    DB   $02   ; "name length field"
08D2                             ; 
08D2   D4 08        L08D2:    DW   L08D4   ; "code field"
08D4                             ; 
08D4                             ; ---
08D4                             ; 
08D4   DF           L08D4:    RST   18H   
08D5   C1                     POP   BC   
08D6   D5                     PUSH   DE   
08D7   C5                     PUSH   BC   
08D8   FD E9                  JP   (IY)   ; to "next".
08DA                             ; 
08DA                             ; -------------
08DA                             ; THE "R>" WORD
08DA                             ; -------------
08DA                             ; ( -- entry from return stack)
08DA                             ; Transfers top entry on return stack to data stack.
08DA                             ; 
08DA   52           L08DA:    DB   "R"   ; "name field"
08DB   BE                     DB   ">" + $80   
08DC                             ; 
08DC   D1 08                  DW   L08D1   ; "link field"
08DE                             ; 
08DE   02           L08DE:    DB   $02   ; "name length field"
08DF                             ; 
08DF   E1 08        L08DF:    DW   L08E1   ; "code field"
08E1                             ; 
08E1                             ; ---
08E1                             ; 
08E1   C1           L08E1:    POP   BC   
08E2   D1                     POP   DE   
08E3   C5                     PUSH   BC   
08E4   D7                     RST   10H   ; push word DE
08E5   FD E9                  JP   (IY)   ; to "next".
08E7                             ; 
08E7                             ; ---------------
08E7                             ; THE "?DUP" WORD
08E7                             ; ---------------
08E7                             ; (n -- n, n)    if n!=0.
08E7                             ; (n -- n)       if n=0.
08E7                             ; 
08E7   3F 44 55     L08E7:    DB   "?DU"   ; "name field"
08EA   D0                     DB   "P" + $80   
08EB                             ; 
08EB   DE 08                  DW   L08DE   ; "link field"
08ED                             ; 
08ED   04           L08ED:    DB   $04   ; "name length field"
08EE                             ; 
08EE   F0 08        L08EE:    DW   L08F0   ; "code field"
08F0                             ; 
08F0                             ; ---
08F0                             ; 
08F0                             ; 
08F0   DF           L08F0:    RST   18H   ; fetch word DE
08F1   D7                     RST   10H   ; push it back
08F2   7A                     LD   A,D   ; test if fetched
08F3   B3                     OR   E   ; word is zero
08F4   C4 10 00               CALL   NZ,L0010   ; push word DE if non-zero
08F7   FD E9                  JP   (IY)   ; to "next".
08F9                             ; 
08F9                             ; --------------
08F9                             ; THE "ROT" WORD
08F9                             ; --------------
08F9                             ; (n1, n2, n3 -- n2, n3, n1)
08F9                             ; 
08F9   52 4F        L08F9:    DB   "RO"   ; "name field"
08FB   D4                     DB   "T" + $80   
08FC                             ; 
08FC   ED 08                  DW   L08ED   ; "link field"
08FE                             ; 
08FE   03           L08FE:    DB   $03   ; "name length field"
08FF                             ; 
08FF   C3 0E        L08FF:    DW   L0EC3   ; "code field" - docolon
0901                             ; 
0901                             ; ---
0901                             ; 
0901   D2 08        L0901:    DW   L08D2   ; >R
0903   85 08        L0903:    DW   L0885   ; swap
0905   DF 08        L0905:    DW   L08DF   ; R>
0907   85 08        L0907:    DW   L0885   ; swap
0909   B6 04        L0909:    DW   L04B6   ; exit
090B                             ; 
090B                             ; ---------------
090B                             ; THE "OVER" WORD
090B                             ; ---------------
090B                             ; (n1, n2 -- n1, n2, n1)
090B                             ; 
090B   4F 56 45     L090B:    DB   "OVE"   ; "name field"
090E   D2                     DB   "R" + $80   
090F                             ; 
090F   FE 08                  DW   L08FE   ; "link field"
0911                             ; 
0911   04           L0911:    DB   $04   ; "name length field"
0912                             ; 
0912   C3 0E        L0912:    DW   L0EC3   ; "code field" - docolon
0914                             ; 
0914                             ; ---
0914                             ; 
0914   D2 08        L0914:    DW   L08D2   ; >R
0916   6B 08        L0916:    DW   L086B   ; dup
0918   DF 08        L0918:    DW   L08DF   ; R>
091A   85 08        L091A:    DW   L0885   ; swap
091C   B6 04        L091C:    DW   L04B6   ; exit
091E                             ; 
091E                             ; ---------------
091E                             ; THE "PICK" WORD
091E                             ; ---------------
091E                             ; (n1 -- n2)
091E                             ; Copies the n1-th stack entry (after dropping n1 itself) to the top.
091E                             ; Error 7 if n1 <= 0.
091E                             ; 
091E   50 49 43     L091E:    DB   "PIC"   ; "name field"
0921   CB                     DB   "K" + $80   
0922                             ; 
0922   11 09                  DW   L0911   ; "link field"
0924                             ; 
0924   04           L0924:    DB   $04   ; "name length field"
0925                             ; 
0925   27 09                  DW   L0927   ; "code field"
0927                             ; 
0927                             ; ---
0927                             ; 
0927   CD 4D 09     L0927:    CALL   L094D   ; 
092A   FD E9                  JP   (IY)   ; to "next".
092C                             ; 
092C                             ; ---------------
092C                             ; THE "ROLL" WORD
092C                             ; ---------------
092C                             ; (n -- )
092C                             ; Extracts the nth stack value to the top of the stack, after dropping n
092C                             ; itself, and moves the remaining values down to fill the vacated position.
092C                             ; Error 7 if n <= 0.
092C                             ; 
092C   52 4F 4C     L092C:    DB   "ROL"   ; "name field"
092F   CC                     DB   "L" + $80   
0930                             ; 
0930   24 09                  DW   L0924   ; "link field"
0932                             ; 
0932   04           L0932:    DB   $04   ; "name length field"
0933                             ; 
0933   35 09        L0933:    DW   L0935   ; "code field"
0935                             ; 
0935                             ; ---
0935                             ; 
0935   CD 4D 09     L0935:    CALL   L094D   ; 
0938   EB                     EX   DE,HL   
0939   2A 37 3C               LD   HL,($3C37)   ; STKBOT
093C   ED 52                  SBC   HL,DE   
093E   D2 D7 04               JP   NC,L04D7   ; jump back to Error 2
0941                             ; 
0941   62                     LD   H,D   
0942   6B                     LD   L,E   
0943   23                     INC   HL   
0944   23                     INC   HL   
0945   ED B0                  LDIR      
0947   ED 53 3B 3C            LD   ($3C3B),DE   ; SPARE
094B   FD E9                  JP   (IY)   ; to "next".
094D                             ; 
094D                             ; ---
094D                             ; 
094D   CD 4E 08     L094D:    CALL   L084E   ; stk_to_bc
0950   0B                     DEC   BC   
0951   CB 21                  SLA   C   
0953   CB 10                  RL   B   
0955   03                     INC   BC   
0956   03                     INC   BC   
0957   30 02                  JR   NC,L095B   ; skip the error routine
0959                             ; 
0959   E7                     RST   20H   ; Error 7
095A   07                     DB   $07   ; PICK or ROLL used with operand 0
095B                             ; or negative
095B                             ; 
095B                             ; ---
095B                             ; 
095B   2A 3B 3C     L095B:    LD   HL,($3C3B)   ; SPARE
095E   ED 42                  SBC   HL,BC   
0960   E5                     PUSH   HL   
0961   5E                     LD   E,(HL)   
0962   23                     INC   HL   
0963   56                     LD   D,(HL)   
0964   D7                     RST   10H   ; push word DE
0965   E1                     POP   HL   
0966   C9                     RET      
0967                             ; 
0967                             ; ---------------
0967                             ; THE "TYPE" WORD
0967                             ; ---------------
0967                             ; (address, n -- )
0967                             ; EMITs n characters from memory starting at the address.
0967                             ; 
0967                             ; 
0967   54 59 50     L0967:    DB   "TYP"   ; "name field"
096A   C5                     DB   "E" + $80   
096B                             ; 
096B   32 09                  DW   L0932   ; "link field"
096D                             ; 
096D   04           L096D:    DB   $04   ; "name length field"
096E                             ; 
096E   70 09        L096E:    DW   L0970   ; "code field"
0970                             ; 
0970                             ; ---
0970                             ; 
0970   CD 4E 08     L0970:    CALL   L084E   ; stk_to_bc
0973   DF                     RST   18H   ; pop word DE
0974   CD 7F 09               CALL   L097F   ; routine pr_string (below)
0977                             ; 
0977   FD E9                  JP   (IY)   ; to "next".
0979                             ; 
0979                             ; --------------------------
0979                             ; THE "PRINT STRING" ROUTINE
0979                             ; --------------------------
0979                             ; The first entry point prints strings embedded in the Dictionary with the
0979                             ; DE pointing to the preceding length word.
0979                             ; 
0979                             ; The second entry point prints a string with length in BC and start in DE.
0979                             ; It is called by TYPE above and to print comment fields.
0979                             ; 
0979                             ; ->
0979                             ; 
0979   1A           L0979:    LD   A,(DE)   
097A   4F                     LD   C,A   
097B   13                     INC   DE   
097C   1A                     LD   A,(DE)   
097D   47                     LD   B,A   
097E   13                     INC   DE   
097F                             ; 
097F                             ; -->
097F   78           L097F:    LD   A,B   
0980   B1                     OR   C   
0981   C8                     RET   Z   
0982                             ; 
0982   1A                     LD   A,(DE)   
0983   13                     INC   DE   
0984   0B                     DEC   BC   
0985   CF                     RST   08H   ; print_ch
0986                             ; 
0986   18 F7                  JR   L097F   ; 
0988                             ; 
0988                             ; -------------
0988                             ; THE "<#" WORD
0988                             ; -------------
0988                             ; (  --  )
0988                             ; Initiates formatted output.
0988                             ; 
0988   3C           L0988:    DB   "<"   ; "name field"
0989   A3                     DB   "#" + $80   
098A                             ; 
098A   6D 09                  DW   L096D   ; "link field"
098C                             ; 
098C   02           L098C:    DB   $02   ; "name length field"
098D                             ; 
098D   8F 09        L098D:    DW   L098F   ; "code field"
098F                             ; 
098F                             ; ---
098F                             ; 
098F   21 FF 27     L098F:    LD   HL,$27FF   ; end of pad
0992   22 1A 3C               LD   ($3C1A),HL   ; update system variable HLD
0995   FD E9                  JP   (IY)   ; to "next".
0997                             ; 
0997                             ; -------------
0997                             ; THE "#>" WORD
0997                             ; -------------
0997                             ; (ud -- address, n)
0997                             ; Finishes formatted output, leaving the address and length (n) of the
0997                             ; resultant string.
0997                             ; 
0997   23           L0997:    DB   "#"   ; "name field"
0998   BE                     DB   ">" + $80   
0999                             ; 
0999   8C 09                  DW   L098C   ; "link field"
099B                             ; 
099B   02           L099B:    DB   $02   ; "name length field"
099C                             ; 
099C   9E 09        L099C:    DW   L099E   ; "code field"
099E                             ; 
099E                             ; ---
099E                             ; 
099E   DF           L099E:    RST   18H   ; pop word DE
099F   DF                     RST   18H   ; pop word DE
09A0   ED 5B 1A 3C            LD   DE,($3C1A)   ; HLD
09A4   D7                     RST   10H   ; push word DE (address)
09A5   21 FF 27               LD   HL,$27FF   ; end of pad.
09A8   A7                     AND   A   ; prepare to subtract.
09A9   ED 52                  SBC   HL,DE   ; find length of string.
09AB   EB                     EX   DE,HL   ; transfer to DE
09AC   D7                     RST   10H   ; push word DE (n)
09AD                             ; 
09AD   FD E9                  JP   (IY)   ; to "next".
09AF                             ; 
09AF                             ; ------------
09AF                             ; THE "." WORD
09AF                             ; ------------
09AF                             ; 
09AF                             ; 
09AF   AE           L09AF:    DB   "." + $80   ; "name field"
09B0                             ; 
09B0   49 0A                  DW   L0A49   ; "link field"
09B2                             ; 
09B2   01           L09B2:    DB   $01   ; "name length field"
09B3                             ; 
09B3   C3 0E        L09B3:    DW   L0EC3   ; "code field" - docolon
09B5                             ; 
09B5                             ; ---
09B5                             ; 
09B5   8D 09        L09B5:    DW   L098D   ; <#
09B7   6B 08                  DW   L086B   ; dup
09B9   0D 0C                  DW   L0C0D   ; abs
09BB   88 06                  DW   L0688   ; stk-zero
09BD   E1 09                  DW   L09E1   ; #s
09BF   FF 08                  DW   L08FF   ; rot
09C1   4A 0A                  DW   L0A4A   ; sign
09C3                             ; 
09C3   9C 09        L09C3:    DW   L099C   ; #>
09C5   6E 09                  DW   L096E   ; type
09C7   73 0A                  DW   L0A73   ; space
09C9   B6 04                  DW   L04B6   ; exit
09CB                             ; 
09CB                             ; -------------
09CB                             ; THE "U." WORD
09CB                             ; -------------
09CB                             ; (un -- )
09CB                             ; Prints the unsigned single length integer "un" to the television screen,
09CB                             ; followed by a space.
09CB                             ; 
09CB   55           L09CB:    DB   "U"   ; "name field"
09CC   AE                     DB   "." + $80   
09CD                             ; 
09CD   B2 09                  DW   L09B2   ; "link field"
09CF                             ; 
09CF   02           L09CF:    DB   $02   ; "name length field"
09D0                             ; 
09D0   C3 0E        L09D0:    DW   L0EC3   ; "code field" - docolon
09D2                             ; 
09D2                             ; ---
09D2                             ; 
09D2   88 06        L09D2:    DW   L0688   ; stk-zero
09D4   8D 09        L09D4:    DW   L098D   ; <#
09D6   E1 09        L09D6:    DW   L09E1   ; #S
09D8   76 12        L09D8:    DW   L1276   ; branch
09DA   E8 FF        L09DA:    DW   $FFE8   ; -> 09C3
09DC                             ; 
09DC                             ; 
09DC                             ; -------------
09DC                             ; THE "#S" WORD
09DC                             ; -------------
09DC                             ; (ud -- 0,0)
09DC                             ; Applies # repeatedly (at least once) until the double length number left
09DC                             ; on the stack is 0.
09DC                             ; 
09DC   23           L09DC:    DB   "#"   ; "name field"
09DD   D3                     DB   "S" + $80   
09DE                             ; 
09DE   CF 09                  DW   L09CF   ; "link field"
09E0                             ; 
09E0   02           L09E0:    DB   $02   ; "name length field"
09E1                             ; 
09E1   C3 0E        L09E1:    DW   L0EC3   ; "code field" - docolon
09E3                             ; 
09E3                             ; ---
09E3                             ; 
09E3   F7 09        L09E3:    DW   L09F7   ; #
09E5   12 09                  DW   L0912   ; over
09E7   12 09                  DW   L0912   ; over
09E9   36 0E                  DW   L0E36   ; or
09EB   1A 0C                  DW   L0C1A   ; 0=
09ED   8D 12                  DW   L128D   ; ?branch
09EF                             ; 
09EF   F3 FF        L09EF:    DW   $FFF3   ; back to L09E3
09F1                             ; 
09F1   B6 04                  DW   L04B6   ; exit
09F3                             ; 
09F3                             ; ------------
09F3                             ; THE "#" WORD
09F3                             ; ------------
09F3                             ; (ud1 -- ud2)
09F3                             ; used in formatted output. Generates one digit from the unsigned double
09F3                             ; length integer ud1 and holds it in the pad. The unsigned double length
09F3                             ; integer ud2 is the quotient when ud1 is divided by the number base.
09F3                             ; 
09F3   A3           L09F3:    DB   "#" + $80   ; "name field"
09F4                             ; 
09F4   E0 09                  DW   L09E0   ; "link field"
09F6                             ; 
09F6   01           L09F6:    DB   $01   ; "name length field"
09F7                             ; 
09F7   C3 0E        L09F7:    DW   L0EC3   ; "code field" - docolon
09F9                             ; 
09F9                             ; ---
09F9                             ; 
09F9   8A 04        L09F9:    DW   L048A   ; get base
09FB   96 08        L09FB:    DW   L0896   ; C@
09FD   C4 0C        L09FD:    DW   L0CC4   ; div?
09FF   FF 08        L09FF:    DW   L08FF   ; rot
0A01   07 0A        L0A01:    DW   L0A07   ; stk-char
0A03   5C 0A        L0A03:    DW   L0A5C   ; hold
0A05   B6 04        L0A05:    DW   L04B6   ; exit
0A07                             ; 
0A07                             ; ----------------------------
0A07                             ; The "stk-char" Internal Word
0A07                             ; ----------------------------
0A07                             ; used from above thread.
0A07                             ; 
0A07   09 0A        L0A07:    DW   L0A09   ; headerless "code field"
0A09                             ; 
0A09                             ; ---
0A09                             ; 
0A09   DF           L0A09:    RST   18H   ; data stack to DE
0A0A   7B                     LD   A,E   ; character to A
0A0B   C6 30                  ADD   A,$30   ; convert digit to ASCII
0A0D   FE 3A                  CP   $3A   ; compare to "9"
0A0F   38 02                  JR   C,L0A13   ; forward if digit
0A11   C6 07                  ADD   A,$07   ; else add for hex
0A13                             ; 
0A13   5F           L0A13:    LD   E,A   ; back to E
0A14   D7                     RST   10H   ; push ASCII on data stack.
0A15   FD E9                  JP   (IY)   ; to "next".
0A17                             ; 
0A17                             ; --------------
0A17                             ; THE "CLS" WORD
0A17                             ; --------------
0A17                             ; ( -- )
0A17                             ; Clears the screen and sets the print position to the top left of
0A17                             ; the screen.
0A17                             ; 
0A17   43 4C        L0A17:    DB   "CL"   ; "name field"
0A19   D3                     DB   "S" + $80   
0A1A                             ; 
0A1A   F6 09                  DW   L09F6   ; "link field"
0A1C                             ; 
0A1C   03           L0A1C:    DB   $03   ; "name length field"
0A1D                             ; 
0A1D   1F 0A                  DW   L0A1F   ; "code field"
0A1F                             ; 
0A1F                             ; ---
0A1F                             ; 
0A1F   CD 24 0A     L0A1F:    CALL   L0A24   ; routine CLS below.
0A22                             ; 
0A22   FD E9                  JP   (IY)   ; to "next".
0A24                             ; 
0A24                             ; 
0A24                             ; --------------------
0A24                             ; THE "CLS" SUBROUTINE
0A24                             ; --------------------
0A24                             ; Called from the "CLS" word definition above and also from the initialization
0A24                             ; routine.
0A24                             ; 
0A24   11 FF 26     L0A24:    LD   DE,$26FF   ; point destination to end of video
0A27                             ; memory.
0A27   2A 24 3C               LD   HL,($3C24)   ; set HL to first byte of input buffer
0A2A                             ; from system variable L_HALF.
0A2A                             ; (at initialization $26E0).
0A2A                             ; 
0A2A   01 20 00               LD   BC,$0020   ; set count to thirty two.
0A2D                             ; 
0A2D   09                     ADD   HL,BC   ; add to the low address.
0A2E   2B                     DEC   HL   ; step back and
0A2F   ED B8                  LDDR      ; copy the 32 bytes.
0A31                             ; 
0A31                             ; while BC is zero, set the plotting coordinates.
0A31                             ; 
0A31   ED 43 2F 3C            LD   ($3C2F),BC   ; set XCOORD and YCOORD to zero.
0A35                             ; 
0A35                             ; set the screen position to the start of video memory.
0A35                             ; 
0A35   21 00 24               LD   HL,$2400   ; start of the 768 bytes of video RAM.
0A38   22 1C 3C               LD   ($3C1C),HL   ; set system variable SCRPOS.
0A3B                             ; 
0A3B   13                     INC   DE   ; the byte before logical line.
0A3C   EB                     EX   DE,HL   ; transfer to HL.
0A3D   22 24 3C               LD   ($3C24),HL   ; set L_HALF.
0A40   C3 FA 07               JP   L07FA   ; jump back to fill the locations
0A43                             ; from DE to HL -1 with spaces.
0A43                             ; 
0A43                             ; ---------------
0A43                             ; THE "SIGN" WORD
0A43                             ; ---------------
0A43                             ; (n -- )
0A43                             ; In formatted output, holds a minus sign in the pad if n is negative.
0A43                             ; 
0A43                             ; 
0A43   53 49 47     L0A43:    DB   "SIG"   ; "name field"
0A46   CE                     DB   "N" + $80   
0A47                             ; 
0A47   9B 09                  DW   L099B   ; "link field"
0A49                             ; 
0A49   04           L0A49:    DB   $04   ; "name length field"
0A4A                             ; 
0A4A   4C 0A        L0A4A:    DW   L0A4C   ; "code field"
0A4C                             ; 
0A4C                             ; ---
0A4C                             ; 
0A4C   DF           L0A4C:    RST   18H   ; pop word DE
0A4D   CB 12                  RL   D   ; test sign bit
0A4F   1E 2D                  LD   E,$2D   ; prepare a "-"
0A51   38 0C                  JR   C,L0A5F   ; forward if minus
0A53   FD E9                  JP   (IY)   ; to "next".
0A55                             ; 
0A55                             ; ---------------
0A55                             ; THE "HOLD" WORD
0A55                             ; ---------------
0A55                             ; (character -- )
0A55                             ; Used in formatted output to hold the character in the pad.
0A55                             ; 
0A55   48 4F 4C     L0A55:    DB   "HOL"   ; "name field"
0A58   C4                     DB   "D" + $80   
0A59                             ; 
0A59   1C 0A        L0A59:    DW   L0A1C   ; "link field"
0A5B                             ; 
0A5B   04           L0A5B:    DB   $04   ; "name length field"
0A5C                             ; 
0A5C   5E 0A        L0A5C:    DW   L0A5E   ; "code field"
0A5E                             ; 
0A5E                             ; ---
0A5E                             ; 
0A5E   DF           L0A5E:    RST   18H   ; data stack to DE
0A5F                             ; 
0A5F   2A 1A 3C     L0A5F:    LD   HL,($3C1A)   ; HLD
0A62   2D                     DEC   L   
0A63   28 04                  JR   Z,L0A69   ; forward when full
0A65                             ; 
0A65   22 1A 3C               LD   ($3C1A),HL   ; update HLD
0A68   73                     LD   (HL),E   ; and place character in buffer
0A69                             ; 
0A69   FD E9        L0A69:    JP   (IY)   ; to "next".
0A6B                             ; 
0A6B                             ; ----------------
0A6B                             ; THE "SPACE" WORD
0A6B                             ; ----------------
0A6B                             ; (  --  )
0A6B                             ; EMITs a space.
0A6B                             ; 
0A6B   53 50 41 43  L0A6B:    DB   "SPAC"   ; "name field"
0A6F   C5                     DB   "E" + $80   
0A70                             ; 
0A70   5B 0A                  DW   L0A5B   ; "link field"
0A72                             ; 
0A72   05           L0A72:    DB   $05   ; "name length field"
0A73                             ; 
0A73   75 0A        L0A73:    DW   L0A75   ; "code field"
0A75                             ; 
0A75                             ; ---
0A75                             ; 
0A75   3E 20        L0A75:    LD   A,$20   ; load accumulator with the ASCII
0A77                             ; code for space.
0A77   CF                     RST   08H   ; print_ch
0A78                             ; 
0A78   FD E9        L0A78:    JP   (IY)   ; to "next".
0A7A                             ; 
0A7A                             ; -----------------
0A7A                             ; THE "SPACES" WORD
0A7A                             ; -----------------
0A7A                             ; (n -- )
0A7A                             ; EMITs n spaces if n >= 1.
0A7A                             ; 
0A7A   53 50 41 43 45 L0A7A:   DB   "SPACE"   ; "name field"
0A7F   D3                     DB   "S" + $80   
0A80                             ; 
0A80   72 0A                  DW   L0A72   ; "link field"
0A82                             ; 
0A82   06           L0A82:    DB   $06   ; "name length field"
0A83                             ; 
0A83   85 0A                  DW   L0A85   ; "code field"
0A85                             ; 
0A85                             ; ---
0A85                             ; 
0A85   DF           L0A85:    RST   18H   ; fetch stack data to DE
0A86                             ; 
0A86   1B           L0A86:    DEC   DE   ; decrement the counter.
0A87   CB 7A                  BIT   7,D   ; test for a negative value
0A89   20 ED                  JR   NZ,L0A78   ; back to a jp iy  when done    >>
0A8B                             ; 
0A8B   3E 20                  LD   A,$20   ; prepare a space
0A8D   CF                     RST   08H   ; print it
0A8E   18 F6                  JR   L0A86   ; loop back for more.
0A90                             ; 
0A90                             ; -------------
0A90                             ; THE "CR" WORD
0A90                             ; -------------
0A90                             ; Outputs a carriage return character to the television.
0A90                             ; 
0A90   43           L0A90:    DB   "C"   ; "name field"
0A91   D2                     DB   "R" + $80   
0A92                             ; 
0A92   82 0A                  DW   L0A82   ; "link field"
0A94                             ; 
0A94   02           L0A94:    DB   $02   ; "name length field"
0A95                             ; 
0A95   97 0A        L0A95:    DW   L0A97   ; "code field"
0A97                             ; 
0A97                             ; ---
0A97                             ; 
0A97   3E 0D        L0A97:    LD   A,$0D   ; prepare a CR
0A99   CF                     RST   08H   ; print it.
0A9A                             ; 
0A9A   FD E9                  JP   (IY)   ; to "next".
0A9C                             ; 
0A9C                             ; ---------------
0A9C                             ; THE "EMIT" WORD
0A9C                             ; ---------------
0A9C                             ; (character -- )
0A9C                             ; writes the character to the television screen.
0A9C                             ; 
0A9C   45 4D 49     L0A9C:    DB   "EMI"   ; "name field"
0A9F   D4                     DB   "T" + $80   
0AA0                             ; 
0AA0   94 0A                  DW   L0A94   ; "link field"
0AA2                             ; 
0AA2   04           L0AA2:    DB   $04   ; "name length field"
0AA3                             ; 
0AA3   A5 0A        L0AA3:    DW   L0AA5   ; "code field"
0AA5                             ; 
0AA5                             ; ---
0AA5                             ; 
0AA5   DF           L0AA5:    RST   18H   ; pop de off data stack
0AA6   7B                     LD   A,E   ; character to A
0AA7   CF                     RST   08H   ; print it.
0AA8                             ; 
0AA8   FD E9                  JP   (IY)   ; to "next".
0AAA                             ; 
0AAA                             ; 
0AAA                             ; -------------
0AAA                             ; THE "F." WORD
0AAA                             ; -------------
0AAA                             ; (f -- )
0AAA                             ; print a floating point number.
0AAA                             ; If 1.0E-4 <= f < 1.0E9, then f is printed without an exponent and with a
0AAA                             ; decimal point in the appropriate place. If f is outside this range, then
0AAA                             ; it is printed in standard form f"En where 0 <= f" < 10 and -64 <= n <= 62.
0AAA                             ; Input may be either form, but only six significant digits are accepted -
0AAA                             ; further digits are ignored.
0AAA                             ; Floating point numbers are stored as 3 bytes of binary coded decimal
0AAA                             ; mantissa and 1 byte for sign and decimal exponents.
0AAA                             ; 
0AAA                             ; e.g. the number 123.456 on Data Stack would be two words, four bytes.
0AAA                             ; 
0AAA                             ;       ^       43              01000011   bits 5 - 0 are exponent
0AAA                             ;       |       12      BCD     ||
0AAA                             ;       |       34      BCD     |sign of exponent 1=positive (bit 6)
0AAA                             ;       |       56      BCD     sign of number 0=positive (bit 7)
0AAA                             ; 
0AAA                             ; Zero 0. is a special case floating point number with all four bytes set
0AAA                             ; to zero.
0AAA                             ; 
0AAA                             ; 
0AAA   46           L0AAA:    DB   "F"   ; "name field"
0AAB   AE                     DB   "." + $80   
0AAC                             ; 
0AAC   A2 0A                  DW   $0AA2   ; "link field"
0AAE                             ; 
0AAE   02           L0AAE:    DB   $02   ; "name length field"
0AAF                             ; 
0AAF   B1 0A        L0AAF:    DW   $0AB1   ; "code field"
0AB1                             ; 
0AB1                             ; ---
0AB1                             ; 
0AB1   2A 3B 3C     L0AB1:    LD   HL,($3C3B)   ; set pointer from system variable SPARE
0AB4   2B                     DEC   HL   ; now points to last byte of data stack.
0AB5   CB 7E                  BIT   7,(HL)   ; test sign of number.
0AB7   CB BE                  RES   7,(HL)   ; reset the sign bit.
0AB9   28 03                  JR   Z,L0ABE   ; forward if initially positive.
0ABB                             ; 
0ABB   3E 2D                  LD   A,$2D   ; prepare  the "-" character.
0ABD   CF                     RST   08H   ; print the minus sign.
0ABE                             ; 
0ABE                             ; The E register is initialized to zero to denote not E-FORMAT
0ABE                             ; 
0ABE   1E 00        L0ABE:    LD   E,$00   ; signal not scientific notation.
0AC0                             ; 
0AC0   7E                     LD   A,(HL)   ; fetch exponent byte
0AC1   3D                     DEC   A   ; adjust to make zero $FF
0AC2                             ; 
0AC2   FE 49                  CP   $49   ; compare to +9   e.g.  123456000.
0AC4   30 04                  JR   NC,L0ACA   ; skip forward if out of range.
0AC6                             ; 
0AC6   FE 3C                  CP   $3C   ; compare to -4   e.g  .000123456
0AC8   30 04                  JR   NC,L0ACE   ; skip forward if in range.
0ACA                             ; 
0ACA                             ; else E format printing will be used with decimal point after first digit.
0ACA                             ; 
0ACA   36 41        L0ACA:    LD   (HL),$41   ; make Data Stack exponent +1
0ACC   3C                     INC   A   ; restore true exponent byte
0ACD   5F                     LD   E,A   ; transfer to E.
0ACE                             ; 
0ACE                             ; the branch was here when within range for normal printing.
0ACE                             ; 
0ACE   3E 40        L0ACE:    LD   A,$40   ; test value is plus zero.
0AD0   96                     SUB   (HL)   ; subtract signed exponent.
0AD1   38 09                  JR   C,L0ADC   ; forward if positive
0AD3                             ; 
0AD3                             ; exponent is negative so decimal point comes first. e.g. .001
0AD3                             ; 
0AD3   47                     LD   B,A   ; result of subtraction to B.
0AD4   04                     INC   B   ; B is now one less than count of
0AD5                             ; leading zeros.
0AD5                             ; 
0AD5   3E 2E                  LD   A,$2E   ; prepare "."
0AD7                             ; 
0AD7   CF           L0AD7:    RST   08H   ; print decimal point or zero.
0AD8                             ; 
0AD8   3E 30                  LD   A,$30   ; prepare a zero - "0"
0ADA                             ; 
0ADA   10 FB                  DJNZ   L0AD7   ; loop back to print leading zeros
0ADC                             ; unless the counter was 1.
0ADC                             ; 
0ADC                             ; the branch was here with positive exponent (and zero)
0ADC                             ; now enter a loop to print each of the leading BCD digits
0ADC                             ; the loop will end when the exponent is <= +0 and all 6 nibbles contain zero.
0ADC                             ; 
0ADC   3E 40        L0ADC:    LD   A,$40   ; set accumulator to plus 0
0ADE   BE                     CP   (HL)   ; compare to exponent on data stack.
0ADF   9F                     SBC   A,A   ; $FF if more leading digits else $00.
0AE0   2B                     DEC   HL   ; address first two nibbles.
0AE1   B6                     OR   (HL)   ; combine.
0AE2   2B                     DEC   HL   ; address next two nibbles.
0AE3   B6                     OR   (HL)   ; combine.
0AE4   2B                     DEC   HL   ; address last two nibbles.
0AE5   B6                     OR   (HL)   ; combine.
0AE6                             ; 
0AE6   23                     INC   HL   ; adjust the pointer to
0AE7   23                     INC   HL   ; the start of the mantissa.
0AE8                             ; 
0AE8   28 12                  JR   Z,L0AFC   ; forward if all digits have been
0AEA                             ; printed.
0AEA                             ; 
0AEA                             ; else print each binary coded decimal in turn.
0AEA                             ; 
0AEA   AF                     XOR   A   ; prepare to feed a zero nibble in.
0AEB                             ; 
0AEB   CD 32 07               CALL   L0732   ; routine shift_fp extracts the most
0AEE                             ; significant nibble from the 3 bytes
0AEE                             ; also decrementing the exponent.
0AEE                             ; 
0AEE   C6 30                  ADD   A,$30   ; convert to ASCII
0AF0   CF                     RST   08H   ; print digit
0AF1                             ; 
0AF1   23                     INC   HL   ; point to reduced exponent.
0AF2   7E                     LD   A,(HL)   ; fetch to accumulator and
0AF3   FE 40                  CP   $40   ; compare to zero.
0AF5                             ; 
0AF5   20 E5                  JR   NZ,L0ADC   ; loop back while more digits.
0AF7                             ; 
0AF7                             ; else this is the place to print the mid or trailing decimal point.
0AF7                             ; 
0AF7   3E 2E                  LD   A,$2E   ; prepare "."
0AF9   CF                     RST   08H   ; print it.
0AFA                             ; 
0AFA   18 E0                  JR   L0ADC   ; loop back for end test and any digits
0AFC                             ; following the decimal point.
0AFC                             ; 
0AFC                             ; ---
0AFC                             ; 
0AFC                             ; the branch was to here when all digits of the mantissa have been printed.
0AFC                             ; 
0AFC   7B           L0AFC:    LD   A,E   ; fetch the exponent format flag - from
0AFD                             ; the E register appropriately.
0AFD   A7                     AND   A   ; test for zero - normal format.
0AFE   20 05                  JR   NZ,L0B05   ; forward to E_FORMAT if not.
0B00                             ; 
0B00   3E 20                  LD   A,$20   ; else prepare a space
0B02   CF                     RST   08H   ; print it
0B03                             ; 
0B03   18 0B                  JR   L0B10   ; forward to delete the two words from
0B05                             ; the data stack and exit.
0B05                             ; 
0B05                             ; ---
0B05                             ; 
0B05                             ; this branch deals with scientific notation. The accumulator holds the
0B05                             ; original exponent. $01-$3C (negative) $49-$7F (positive).
0B05                             ; 
0B05   D6 41        L0B05:    SUB   $41   ; convert to signed 8-bit.
0B07   6F                     LD   L,A   ; low order byte to L.
0B08   9F                     SBC   A,A   ; $FF negative or $00 positive
0B09   67                     LD   H,A   ; set the high order byte.
0B0A                             ; 
0B0A   3E 45                  LD   A,$45   ; prepare a "E"
0B0C   CF                     RST   08H   ; print it
0B0D                             ; 
0B0D   CD 0E 18               CALL   L180E   ; routine pr_int_hl prints the signed
0B10                             ; integer followed by a space.
0B10                             ; 
0B10                             ; finally delete the floating point number from the Data Stack.
0B10                             ; 
0B10                             ; 
0B10   DF           L0B10:    RST   18H   ; unstack word DE
0B11   DF                     RST   18H   ; unstack word DE
0B12                             ; 
0B12   FD E9                  JP   (IY)   ; to "next".
0B14                             ; 
0B14                             ; -------------
0B14                             ; THE "AT" WORD
0B14                             ; -------------
0B14                             ; (line, column -- )
0B14                             ; Sets print position to line and column numbers on the stack.
0B14                             ; There are 23 lines (0 to 22) and 32 columns (0 to 31). The
0B14                             ; column number is taken modulo 32, and ERROR 9 if trying to print
0B14                             ; in the input buffer at the bottom.
0B14                             ; 
0B14   41           L0B14:    DB   "A"   ; "name field"
0B15   D4                     DB   "T" + $80   
0B16                             ; 
0B16   AE 0A                  DW   L0AAE   ; "link field"
0B18                             ; 
0B18   02           L0B18:    DB   $02   ; "name length field"
0B19                             ; 
0B19   1B 0B                  DW   L0B1B   ; "code field"
0B1B                             ; 
0B1B                             ; ---
0B1B                             ; 
0B1B   DF           L0B1B:    RST   18H   ; pop word DE
0B1C                             ; 
0B1C   CD 4E 08               CALL   L084E   ; stk_to_bc
0B1F                             ; 
0B1F   79                     LD   A,C   
0B20                             ; 
0B20   CD 28 0B               CALL   L0B28   ; 
0B23                             ; 
0B23   22 1C 3C               LD   ($3C1C),HL   ; update system variable SCRPOS
0B26                             ; 
0B26   FD E9                  JP   (IY)   ; to "next".
0B28                             ; 
0B28                             ; ---
0B28                             ; 
0B28                             ; plotsub
0B28                             ; 
0B28   C6 20        L0B28:    ADD   A,$20   
0B2A   6F                     LD   L,A   
0B2B   26 01                  LD   H,$01   
0B2D   29                     ADD   HL,HL   
0B2E   29                     ADD   HL,HL   
0B2F   29                     ADD   HL,HL   
0B30   29                     ADD   HL,HL   
0B31   29                     ADD   HL,HL   
0B32   16 00                  LD   D,$00   
0B34   7B                     LD   A,E   
0B35   E6 1F                  AND   $1F   
0B37   5F                     LD   E,A   
0B38   19                     ADD   HL,DE   
0B39   ED 5B 24 3C            LD   DE,($3C24)   ; fetch start of lower half from L_HALF
0B3D   ED 52                  SBC   HL,DE   
0B3F   19                     ADD   HL,DE   
0B40   D8                     RET   C   
0B41                             ; 
0B41                             ; 
0B41                             ; 
0B41   E7                     RST   20H   ; Error 9
0B42   09                     DB   $09   ; Erroneous "AT" Command.
0B43                             ; 
0B43                             ; ---------------
0B43                             ; THE "PLOT" WORD
0B43                             ; ---------------
0B43                             ; (x, y, n -- )
0B43                             ; Plots pixel (x, y) with plot mode n.
0B43                             ; n =   0       unplot
0B43                             ;       1       plot
0B43                             ;       2       move
0B43                             ;       3       change
0B43                             ; If n>3, takes value modulo 4.
0B43                             ; 
0B43   50 4C 4F     L0B43:    DB   "PLO"   ; "name field"
0B46   D4                     DB   "T" + $80   
0B47                             ; 
0B47   18 0B                  DW   L0B18   ; "link field"
0B49                             ; 
0B49   04           L0B49:    DB   $04   ; "name length field"
0B4A                             ; 
0B4A   4C 0B                  DW   L0B4C   ; "code field"
0B4C                             ; 
0B4C                             ; ---
0B4C                             ; 
0B4C   CD 4E 08     L0B4C:    CALL   L084E   ; stk_to_bc
0B4F                             ; 
0B4F   DF                     RST   18H   ; pop word DE
0B50   DD 73 30               LD   (IX+$30),E   ; YCOORD
0B53   CB 3B                  SRL   E   
0B55   CB 11                  RL   C   
0B57   3E 16                  LD   A,$16   ; 24
0B59   93                     SUB   E   
0B5A                             ; 
0B5A   DF                     RST   18H   ; pop word DE
0B5B   DD 73 2F               LD   (IX+$2F),E   ; XCOORD
0B5E   CB 3B                  SRL   E   
0B60   CB 11                  RL   C   
0B62                             ; 
0B62   CD 28 0B               CALL   L0B28   ; 
0B65                             ; 
0B65   7E                     LD   A,(HL)   
0B66   E6 78                  AND   $78   ; 01111000
0B68   FE 10                  CP   $10   
0B6A   7E                     LD   A,(HL)   
0B6B   28 02                  JR   Z,L0B6F   ; 
0B6D                             ; 
0B6D   3E 10                  LD   A,$10   
0B6F                             ; 
0B6F   5F           L0B6F:    LD   E,A   
0B70   16 87                  LD   D,$87   
0B72   79                     LD   A,C   
0B73   E6 03                  AND   $03   
0B75   47                     LD   B,A   
0B76   28 07                  JR   Z,L0B7F   ; 
0B78                             ; 
0B78   2F                     CPL      
0B79                             ; 
0B79   C6 02                  ADD   A,$02   
0B7B   CE 03                  ADC   A,$03   
0B7D   57                     LD   D,A   
0B7E   43                     LD   B,E   
0B7F   79           L0B7F:    LD   A,C   
0B80   0F                     RRCA      
0B81   0F                     RRCA      
0B82   0F                     RRCA      
0B83   9F                     SBC   A,A   
0B84   CB 59                  BIT   3,C   
0B86   20 04                  JR   NZ,L0B8C   ; 
0B88   AB                     XOR   E   
0B89   07                     RLCA      
0B8A   9F                     SBC   A,A   
0B8B   A8                     XOR   B   
0B8C                             ; 
0B8C   A2           L0B8C:    AND   D   
0B8D   AB                     XOR   E   
0B8E   77                     LD   (HL),A   
0B8F   FD E9                  JP   (IY)   ; to "next".
0B91                             ; 
0B91                             ; ---------------
0B91                             ; THE "BEEP" WORD
0B91                             ; ---------------
0B91                             ; ( m, n --  )
0B91                             ; Plays a note on the loudspeaker. 8 * m = period in microseconds,
0B91                             ; n = time in milliseconds.
0B91                             ; 
0B91   42 45 45     L0B91:    DB   "BEE"   ; "name field"
0B94   D0                     DB   "P" + $80   
0B95                             ; 
0B95   49 0B                  DW   L0B49   ; "link field"
0B97                             ; 
0B97   04           L0B97:    DB   $04   ; "name length field"
0B98                             ; 
0B98   C3 0E                  DW   L0EC3   ; "code field"  m, n.
0B9A                             ; 
0B9A                             ; ---
0B9A                             ; 
0B9A   12 09        L0B9A:    DW   L0912   ; OVER          m, n, m.
0B9C   4B 10                  DW   L104B   ; stk-data      m, n, m, 125.
0B9E   7D                     DB   $7D   ;  (125)
0B9F   85 08                  DW   L0885   ; SWAP          m, n, 125, m.
0BA1   7A 0D                  DW   L0D7A   ; */            m, (n*125)/m
0BA3   0E 1A                  DW   L1A0E   ; end
0BA5                             ; 
0BA5                             ; ---
0BA5                             ; 
0BA5   DF           L0BA5:    RST   18H   ; pop word DE
0BA6                             ; 
0BA6   CD 4E 08               CALL   L084E   ; stk_to_bc
0BA9                             ; 
0BA9   21 F9 00               LD   HL,$00F9   ; 
0BAC   09                     ADD   HL,BC   ; 
0BAD   2C                     INC   L   ; 
0BAE                             ; 
0BAE   F3                     DI      ; Disable Interrupts.
0BAF                             ; 
0BAF   3E 7F        L0BAF:    LD   A,$7F   ; place $7FFE on address bus and read
0BB1   DB FE                  IN   A,($FE)   ; from port, pushing the loudspeaker
0BB3                             ; diaphragm in.
0BB3                             ; 
0BB3   0F                     RRCA      ; test the read "SPACE" key bit.
0BB4                             ; 
0BB4   30 11                  JR   NC,L0BC7   ; forward if BREAK pressed.
0BB6                             ; 
0BB6   CD C9 0B               CALL   L0BC9   ; routine delay_HL
0BB9                             ; 
0BB9   1B                     DEC   DE   ; decrement counter.
0BBA                             ; 
0BBA   7A                     LD   A,D   ; all even addresses are reserved for
0BBB                             ; Jupiter Ace so any value does for the
0BBB                             ; high order byte. $FE is low value.
0BBB                             ; 
0BBB   D3 FE                  OUT   ($FE),A   ; push the loudspeaker diaphragm out.
0BBD                             ; 
0BBD   CD C9 0B               CALL   L0BC9   ; routine delay_HL
0BC0                             ; 
0BC0   B3                     OR   E   ; test for counter DE reaching zero.
0BC1   C2 AF 0B               JP   NZ,L0BAF   ; loop back if not.
0BC4                             ; 
0BC4   FB                     EI      ; Enable Interrupts.
0BC5                             ; 
0BC5   FD E9                  JP   (IY)   ; to "next".
0BC7                             ; 
0BC7                             ; ---
0BC7                             ; 
0BC7   E7           L0BC7:    RST   20H   ; Error 3
0BC8   03                     DB   $03   ; BREAK pressed.
0BC9                             ; 
0BC9                             ; ---------------------------
0BC9                             ; THE "BEEP DELAY" SUBROUTINE
0BC9                             ; ---------------------------
0BC9                             ; called twice from the above BEEP routine.
0BC9                             ; 
0BC9   45           L0BC9:    LD   B,L   ; transfer the value of
0BCA   4C                     LD   C,H   ; the HL register to BC.
0BCB                             ; 
0BCB   10 FE        L0BCB:    DJNZ   L0BCB   ; self-loop for B times
0BCD                             ; 
0BCD   05                     DEC   B   ; set B to $FF for future loops
0BCE   0D                     DEC   C   ; decrement outer loop counter C
0BCF   C2 CB 0B               JP   NZ,L0BCB   ; JUMP back if not zero           (10)
0BD2                             ; 
0BD2   C9                     RET      ; return
0BD3                             ; 
0BD3                             ; ----------------
0BD3                             ; THE "INKEY" WORD
0BD3                             ; ----------------
0BD3                             ; ( -- ASCII code)
0BD3                             ; Reads the keyboard. Puts ASCII value on the stack if a key is pressed, 0
0BD3                             ; otherwise.
0BD3                             ; 
0BD3                             ; 
0BD3   49 4E 4B 45  L0BD3:    DB   "INKE"   ; "name field"
0BD7   D9                     DB   "Y" + $80   
0BD8                             ; 
0BD8   97 0B                  DW   L0B97   ; "link field"
0BDA                             ; 
0BDA   05           L0BDA:    DB   $05   ; "name length field"
0BDB                             ; 
0BDB   DD 0B        L0BDB:    DW   L0BDD   ; "code field"
0BDD                             ; 
0BDD                             ; ---
0BDD                             ; 
0BDD   CD 36 03     L0BDD:    CALL   L0336   ; routine KEY-SCAN
0BE0                             ; 
0BE0   5F                     LD   E,A   ; transfer the key code to E.
0BE1   16 00                  LD   D,$00   ; make high order byte zero.
0BE3                             ; 
0BE3   D7                     RST   10H   ; stack Data Word DE
0BE4                             ; 
0BE4   FD E9                  JP   (IY)   ; to "next".
0BE6                             ; 
0BE6                             ; -------------
0BE6                             ; THE "IN" WORD
0BE6                             ; -------------
0BE6                             ; (port address -- data byte)
0BE6                             ; Inputs a data byte from an I/O port.
0BE6                             ; 
0BE6   49           L0BE6:    DB   "I"   ; "name field"
0BE7   CE                     DB   "N" + $80   
0BE8                             ; 
0BE8   DA 0B                  DW   L0BDA   ; "link field"
0BEA                             ; 
0BEA   02           L0BEA:    DB   $02   ; "name length field"
0BEB                             ; 
0BEB   ED 0B                  DW   L0BED   ; "code field"
0BED                             ; 
0BED                             ; ---
0BED                             ; 
0BED   CD 4E 08     L0BED:    CALL   L084E   ; stk_to_bc
0BF0   16 00                  LD   D,$00   ; make high order byte zero.
0BF2                             ; 
0BF2   ED 58                  IN   E,(C)   ; read the port to E.
0BF4                             ; 
0BF4   D7                     RST   10H   ; stack Data Word DE.
0BF5                             ; 
0BF5   FD E9        L0BF5:    JP   (IY)   ; to "next".
0BF7                             ; 
0BF7                             ; --------------
0BF7                             ; THE "OUT" WORD
0BF7                             ; --------------
0BF7                             ; (data byte, port address -- )
0BF7                             ; Outputs a data byte to an I/O port.
0BF7                             ; 
0BF7   4F 55        L0BF7:    DB   "OU"   ; "name field"
0BF9   D4                     DB   "T" + $80   
0BFA                             ; 
0BFA   EA 0B                  DW   L0BEA   ; "link field"
0BFC                             ; 
0BFC   03           L0BFC:    DB   $03   ; "name length field"
0BFD                             ; 
0BFD   FF 0B                  DW   L0BFF   ; "code field"
0BFF                             ; 
0BFF                             ; ---
0BFF                             ; 
0BFF   CD 4E 08     L0BFF:    CALL   L084E   ; stk_to_bc
0C02                             ; all 16 bits are placed on the
0C02                             ; Z80A address bus.
0C02   DF                     RST   18H   ; pop word DE
0C03                             ; 
0C03   ED 59                  OUT   (C),E   ; output byte to port address.
0C05                             ; 
0C05   FD E9                  JP   (IY)   ; to "next".
0C07                             ; 
0C07                             ; --------------
0C07                             ; THE "ABS" WORD
0C07                             ; --------------
0C07                             ; (n -- absolute value of n)
0C07                             ; 
0C07   41 42        L0C07:    DB   "AB"   ; "name field"
0C09   D3                     DB   "S" + $80   
0C0A                             ; 
0C0A   FC 0B                  DW   L0BFC   ; "link field"
0C0C                             ; 
0C0C   03           L0C0C:    DB   $03   ; "name length field"
0C0D                             ; 
0C0D   C3 0E        L0C0D:    DW   L0EC3   ; "code field" - docolon
0C0F                             ; 
0C0F                             ; ---
0C0F                             ; 
0C0F   6B 08                  DW   L086B   ; DUP
0C11   94 0D                  DW   L0D94   ; pos
0C13   B6 04                  DW   L04B6   ; EXIT
0C15                             ; 
0C15                             ; -------------
0C15                             ; THE "0=" WORD
0C15                             ; -------------
0C15                             ; (n -- flag)
0C15                             ; flag is 1 in n = 0.
0C15                             ; 
0C15   30           L0C15:    DB   "0"   ; "name field"
0C16   BD                     DB   "=" + $80   
0C17                             ; 
0C17   0C 0C                  DW   L0C0C   ; "link field"
0C19                             ; 
0C19   02           L0C19:    DB   $02   ; "name length field"
0C1A                             ; 
0C1A   1C 0C        L0C1A:    DW   L0C1C   ; "code field"
0C1C                             ; 
0C1C                             ; ---
0C1C                             ; 
0C1C   DF           L0C1C:    RST   18H   ; pop word DE
0C1D   7A                     LD   A,D   ; test for
0C1E   B3                     OR   E   ; zero
0C1F   FE 01                  CP   $01   ; sets carry if word is zero
0C21                             ; 
0C21                             ; -> zero_or_one
0C21                             ; 
0C21   3E 00        L0C21:    LD   A,$00   ; make accumulator zero.
0C23   57                     LD   D,A   ; set D to zero
0C24   17                     RLA      ; pick up carry (1/0)
0C25   5F                     LD   E,A   ; set DE to one or zero
0C26   D7                     RST   10H   ; push word DE
0C27                             ; 
0C27   FD E9                  JP   (IY)   ; to "next".
0C29                             ; 
0C29                             ; -------------
0C29                             ; THE "0<" WORD
0C29                             ; -------------
0C29                             ; (n -- flag)
0C29                             ; flag is 1 if n is negative
0C29                             ; 
0C29   30           L0C29:    DB   "0"   ; "name field"
0C2A   BC                     DB   "<" + $80   
0C2B                             ; 
0C2B   19 0C                  DW   L0C19   ; "link field"
0C2D                             ; 
0C2D   02           L0C2D:    DB   $02   ; "name length field"
0C2E                             ; 
0C2E   30 0C        L0C2E:    DW   L0C30   ; "code field"
0C30                             ; 
0C30                             ; ---
0C30                             ; 
0C30   DF           L0C30:    RST   18H   ; pop word DE
0C31   CB 12                  RL   D   ; test the sign bit.
0C33                             ; 
0C33   18 EC                  JR   L0C21   ; back to above routine to stack the
0C35                             ; carry as one (true) or zero (false).
0C35                             ; 
0C35                             ; -------------
0C35                             ; THE "0>" WORD
0C35                             ; -------------
0C35                             ; (n -- flag)
0C35                             ; flag is 1 if n is positive.
0C35                             ; 
0C35                             ; 
0C35   30           L0C35:    DB   "0"   ; "name field"
0C36   BE                     DB   ">" + $80   
0C37                             ; 
0C37   2D 0C                  DW   L0C2D   ; "link field"
0C39                             ; 
0C39   02           L0C39:    DB   $02   ; "name length field"
0C3A                             ; 
0C3A   3C 0C        L0C3A:    DW   L0C3C   ; "code field"
0C3C                             ; 
0C3C                             ; ---
0C3C                             ; 
0C3C   DF           L0C3C:    RST   18H   ; pop word DE
0C3D   7A                     LD   A,D   
0C3E   B3                     OR   E   
0C3F   28 E0                  JR   Z,L0C21   ; to stack word one or zero
0C41                             ; 
0C41   CB 12                  RL   D   
0C43   3F                     CCF      
0C44   18 DB                  JR   L0C21   ; to stack word one or zero
0C46                             ; 
0C46                             ; ------------
0C46                             ; THE "=" WORD
0C46                             ; ------------
0C46                             ; (n1, n2 -- flag)
0C46                             ; flag is 1 if n1=n2.
0C46                             ; 
0C46   BD           L0C46:    DB   "=" + $80   ; "name field"
0C47                             ; 
0C47   39 0C                  DW   L0C39   ; "link field"
0C49                             ; 
0C49   01           L0C49:    DB   $01   ; "name length field"
0C4A                             ; 
0C4A   C3 0E        L0C4A:    DW   L0EC3   ; "code field" - docolon
0C4C                             ; 
0C4C                             ; ---
0C4C                             ; 
0C4C   E1 0D        L0C4C:    DW   L0DE1   ; -
0C4E   1A 0C                  DW   L0C1A   ; 0=
0C50   B6 04                  DW   L04B6   ; exit
0C52                             ; 
0C52                             ; ------------
0C52                             ; THE ">" WORD
0C52                             ; ------------
0C52                             ; (n1, n2 -- flag)
0C52                             ; flag is 1 if n1>n2.
0C52                             ; 
0C52   BE           L0C52:    DB   ">" + $80   ; "name field"
0C53                             ; 
0C53   49 0C                  DW   L0C49   ; "link field"
0C55                             ; 
0C55   01           L0C55:    DB   $01   ; "name length field"
0C56                             ; 
0C56   58 0C        L0C56:    DW   L0C58   ; "code field"
0C58                             ; 
0C58                             ; ---
0C58                             ; 
0C58   DF           L0C58:    RST   18H   ; pop word DE
0C59   D5                     PUSH   DE   ; 
0C5A   DF                     RST   18H   ; pop word DE
0C5B   E1                     POP   HL   ; 
0C5C                             ; 
0C5C   CD 99 0C               CALL   L0C99   ; 
0C5F                             ; 
0C5F   18 C0                  JR   L0C21   ; to stack word one or zero
0C61                             ; 
0C61                             ; ------------
0C61                             ; THE "<" WORD
0C61                             ; ------------
0C61                             ; (n1, n2 -- flag)
0C61                             ; flag is 1 if n1 < n2.
0C61                             ; 
0C61   BC           L0C61:    DB   "<" + $80   ; "name field"
0C62                             ; 
0C62   55 0C                  DW   L0C55   ; "link field"
0C64                             ; 
0C64   01           L0C64:    DB   $01   ; "name length field"
0C65                             ; 
0C65   C3 0E        L0C65:    DW   L0EC3   ; "code field" - docolon
0C67                             ; 
0C67                             ; ---
0C67                             ; 
0C67   85 08                  DW   L0885   ; swap
0C69   56 0C                  DW   L0C56   ; >
0C6B   B6 04                  DW   L04B6   ; exit
0C6D                             ; 
0C6D                             ; 
0C6D                             ; -------------
0C6D                             ; THE "U<" WORD
0C6D                             ; -------------
0C6D                             ; (un1, un2 -- flag)
0C6D                             ; The flag is 1 if, of the two unsigned single length integers, un1 is less
0C6D                             ; than un2.
0C6D                             ; 
0C6D   55           L0C6D:    DB   "U"   ; "name field"
0C6E   BC                     DB   "<" + $80   
0C6F                             ; 
0C6F   64 0C                  DW   L0C64   ; "link field"
0C71                             ; 
0C71   02           L0C71:    DB   $02   ; "name length field"
0C72                             ; 
0C72   74 0C        L0C72:    DW   L0C74   ; "code field"
0C74                             ; 
0C74                             ; ---
0C74                             ; 
0C74   CD 4E 08     L0C74:    CALL   L084E   ; stk_to_bc
0C77                             ; 
0C77   DF           L0C77:    RST   18H   ; pop word DE
0C78   EB                     EX   DE,HL   
0C79   A7                     AND   A   
0C7A   ED 42                  SBC   HL,BC   
0C7C   18 A3                  JR   L0C21   ; to stack word one or zero
0C7E                             ; 
0C7E                             ; -------------
0C7E                             ; THE "D<" WORD
0C7E                             ; -------------
0C7E                             ; (d1, d2 -- flag)
0C7E                             ; flag is 1 if the signed double integer, d1 < d2.
0C7E                             ; 
0C7E   44           L0C7E:    DB   "D"   ; "name field"
0C7F   BC                     DB   "<" + $80   
0C80                             ; 
0C80   71 0C                  DW   L0C71   ; "link field"
0C82                             ; 
0C82   02           L0C82:    DB   $02   ; "name length field"
0C83                             ; 
0C83   85 0C        L0C83:    DW   L0C85   ; "code field"
0C85                             ; 
0C85                             ; ---
0C85                             ; 
0C85   DF           L0C85:    RST   18H   ; pop word DE
0C86   D5                     PUSH   DE   
0C87   CD 4E 08               CALL   L084E   ; stk_to_bc
0C8A   DF                     RST   18H   ; pop word DE
0C8B   E1                     POP   HL   
0C8C   A7                     AND   A   
0C8D   ED 52                  SBC   HL,DE   
0C8F   28 E6                  JR   Z,L0C77   ; 
0C91                             ; 
0C91   19                     ADD   HL,DE   
0C92   EB                     EX   DE,HL   
0C93                             ; 
0C93   CD 99 0C               CALL   L0C99   ; 
0C96                             ; 
0C96   DF                     RST   18H   ; pop word DE
0C97   18 88                  JR   L0C21   ; to stack word one or zero
0C99                             ; 
0C99                             ; ---
0C99                             ; THE "sign?" SUBROUTINE
0C99                             ; ---
0C99                             ; 
0C99   7C           L0C99:    LD   A,H   
0C9A   AA                     XOR   D   
0C9B   FA A0 0C               JP   M,L0CA0   ; 
0C9E                             ; 
0C9E   ED 52                  SBC   HL,DE   
0CA0                             ; 
0CA0   CB 14        L0CA0:    RL   H   
0CA2   C9                     RET      
0CA3                             ; 
0CA3                             ; -------------
0CA3                             ; THE "U*" WORD
0CA3                             ; -------------
0CA3                             ; (un1, un2 -- double length(un1 * un2))
0CA3                             ; Multiplies two unsigned single length integers to give an unsigned
0CA3                             ; double length product.
0CA3                             ; 
0CA3   55           L0CA3:    DB   "U"   ; "name field"
0CA4   AA                     DB   "*" + $80   
0CA5                             ; 
0CA5   82 0C                  DW   L0C82   ; "link field"
0CA7                             ; 
0CA7   02           L0CA7:    DB   $02   ; "name length field"
0CA8                             ; 
0CA8   AA 0C        L0CA8:    DW   L0CAA   ; "code field"
0CAA                             ; 
0CAA                             ; => mult
0CAA                             ; 
0CAA   DF           L0CAA:    RST   18H   ; pop word DE
0CAB   CD 4E 08               CALL   L084E   ; stk_to_bc
0CAE   21 00 00               LD   HL,$0000   
0CB1   3E 10                  LD   A,$10   
0CB3   29           L0CB3:    ADD   HL,HL   
0CB4   EB                     EX   DE,HL   
0CB5   ED 6A                  ADC   HL,HL   
0CB7   EB                     EX   DE,HL   
0CB8   30 04                  JR   NC,L0CBE   ; 
0CBA                             ; 
0CBA   09                     ADD   HL,BC   
0CBB   30 01                  JR   NC,L0CBE   ; 
0CBD                             ; 
0CBD   13                     INC   DE   
0CBE                             ; 
0CBE   3D           L0CBE:    DEC   A   
0CBF   20 F2                  JR   NZ,L0CB3   ; 
0CC1                             ; 
0CC1   EB                     EX   DE,HL   
0CC2   18 2F                  JR   L0CF3   ; 
0CC4                             ; 
0CC4                             ; ---
0CC4                             ; The "div?" Internal Word
0CC4                             ; ---
0CC4                             ; 
0CC4   C6 0C        L0CC4:    DW   L0CC6   
0CC6                             ; 
0CC6   DF           L0CC6:    RST   18H   ; pop word DE
0CC7   D9                     EXX      
0CC8   DF                     RST   18H   ; pop word DE
0CC9   D5                     PUSH   DE   
0CCA   DF                     RST   18H   ; pop word DE
0CCB   E1                     POP   HL   
0CCC   7C                     LD   A,H   
0CCD   B5                     OR   L   
0CCE   3E 21                  LD   A,$21   ; 33
0CD0   20 03                  JR   NZ,L0CD5   ; 
0CD2                             ; 
0CD2   EB                     EX   DE,HL   
0CD3   3E 11                  LD   A,$11   ; 17
0CD5                             ; 
0CD5   D9           L0CD5:    EXX      
0CD6   47                     LD   B,A   
0CD7   AF                     XOR   A   
0CD8   67                     LD   H,A   
0CD9   6F                     LD   L,A   
0CDA   4F                     LD   C,A   
0CDB                             ; 
0CDB   ED 6A        L0CDB:    ADC   HL,HL   
0CDD   9F                     SBC   A,A   
0CDE   A7                     AND   A   
0CDF   ED 52                  SBC   HL,DE   
0CE1   99                     SBC   A,C   
0CE2   30 01                  JR   NC,L0CE5   ; 
0CE4   19                     ADD   HL,DE   
0CE5                             ; 
0CE5   3F           L0CE5:    CCF      
0CE6   D9                     EXX      
0CE7   EB                     EX   DE,HL   
0CE8   ED 6A                  ADC   HL,HL   
0CEA   EB                     EX   DE,HL   
0CEB   ED 6A                  ADC   HL,HL   
0CED   D9                     EXX      
0CEE   10 EB                  DJNZ   L0CDB   ; 
0CF0                             ; 
0CF0   EB                     EX   DE,HL   
0CF1   D7                     RST   10H   ; push word DE
0CF2   D9                     EXX      
0CF3                             ; 
0CF3   E5           L0CF3:    PUSH   HL   
0CF4   D7                     RST   10H   ; push word DE
0CF5   D1                     POP   DE   
0CF6   D7                     RST   10H   ; push word DE
0CF7                             ; 
0CF7   FD E9                  JP   (IY)   ; to "next".
0CF9                             ; 
0CF9                             ; ---------------
0CF9                             ; THE "/MOD" WORD
0CF9                             ; ---------------
0CF9                             ; (n1, n2 -- remainder, quotient of n1/n2)
0CF9                             ; The remainder has the same sign as the dividend n1.
0CF9                             ; 
0CF9   2F 4D 4F     L0CF9:    DB   "/MO"   ; "name field"
0CFC   C4                     DB   "D" + $80   
0CFD                             ; 
0CFD   A7 0C                  DW   L0CA7   ; "link field"
0CFF                             ; 
0CFF   04           L0CFF:    DB   $04   ; "name length field"
0D00                             ; 
0D00   C3 0E        L0D00:    DW   L0EC3   ; "code field" - docolon
0D02                             ; 
0D02                             ; ---
0D02                             ; 
0D02   85 08        L0D02:    DW   L0885   ; swap
0D04   D2 08                  DW   L08D2   ; >R
0D06   E9 12                  DW   L12E9   ; I
0D08   0D 0C                  DW   L0C0D   ; abs
0D0A   4B 10                  DW   L104B   ; stk_data
0D0C   00                     DB   $00   ; zero
0D0D                             ; ->
0D0D   FF 08        L0D0D:    DW   L08FF   ; rot
0D0F   6B 08                  DW   L086B   ; dup
0D11   E9 12                  DW   L12E9   ; I
0D13   60 0E                  DW   L0E60   ; xor
0D15   D2 08                  DW   L08D2   ; >R
0D17   0D 0C                  DW   L0C0D   ; abs
0D19   8C 0D                  DW   L0D8C   ; U/MOD
0D1B   DF 08                  DW   L08DF   ; >R
0D1D   94 0D                  DW   L0D94   ; pos
0D1F   85 08                  DW   L0885   ; swap
0D21   DF 08                  DW   L08DF   ; >R
0D23   94 0D                  DW   L0D94   ; pos
0D25   85 08                  DW   L0885   ; swap
0D27   B6 04                  DW   L04B6   ; exit
0D29                             ; 
0D29                             ; ----------------
0D29                             ; THE "*/MOD" WORD
0D29                             ; ----------------
0D29                             ; (n1, n2, n3 -- remainder, quotient of (n1 * n2)/n3)
0D29                             ; As in */, n1 * n2 is held to double length.
0D29                             ; 
0D29   2A 2F 4D 4F  L0D29:    DB   "*/MO"   ; "name field"
0D2D   C4                     DB   "D" + $80   
0D2E                             ; 
0D2E   FF 0C                  DW   L0CFF   ; "link field"
0D30                             ; 
0D30   05           L0D30:    DB   $05   ; "name length field"
0D31                             ; 
0D31   C3 0E        L0D31:    DW   L0EC3   ; "code field" - docolon
0D33                             ; 
0D33                             ; ---
0D33                             ; 
0D33   FF 08                  DW   L08FF   ; rot
0D35   D2 08                  DW   L08D2   ; >R
0D37   E9 12                  DW   L12E9   ; I
0D39   0D 0C                  DW   L0C0D   ; abs
0D3B   FF 08                  DW   L08FF   ; rot
0D3D   6B 08                  DW   L086B   ; dup
0D3F   DF 08                  DW   L08DF   ; >R
0D41   60 0E                  DW   L0E60   ; xor
0D43   D2 08                  DW   L08D2   ; >R
0D45   0D 0C                  DW   L0C0D   ; abs
0D47   A8 0C                  DW   L0CA8   ; u*
0D49   76 12                  DW   L1276   ; branch
0D4B                             ; 
0D4B   C1 FF        L0D4B:    DW   $FFC1   ; back to L0D0D  (in /MOD)
0D4D                             ; 
0D4D                             ; 
0D4D                             ; 
0D4D                             ; 
0D4D                             ; ------------
0D4D                             ; THE "/" WORD
0D4D                             ; ------------
0D4D                             ; (n1, n2 -- n1/n2)
0D4D                             ; Single length signed integer division.
0D4D                             ; 
0D4D   AF           L0D4D:    DB   "/" + $80   ; "name field"
0D4E                             ; 
0D4E   30 0D                  DW   L0D30   ; "link field"
0D50                             ; 
0D50   01           L0D50:    DB   $01   ; "name length field"
0D51                             ; 
0D51   C3 0E        L0D51:    DW   L0EC3   ; "code field" - docolon
0D53                             ; 
0D53                             ; ---
0D53                             ; 
0D53   00 0D        L0D53:    DW   L0D00   ; /MOD
0D55   85 08                  DW   L0885   ; swap
0D57   79 08                  DW   L0879   ; drop
0D59   B6 04                  DW   L04B6   ; exit
0D5B                             ; 
0D5B                             ; --------------
0D5B                             ; THE "MOD" WORD
0D5B                             ; --------------
0D5B                             ; (n1, n2 -- remainder n1/n2)
0D5B                             ; The remainder has the same sign as the dividend.
0D5B                             ; 
0D5B   4D 4F        L0D5B:    DB   "MO"   ; "name field"
0D5D   C4                     DB   "D" + $80   
0D5E                             ; 
0D5E   50 0D                  DW   L0D50   ; "link field"
0D60                             ; 
0D60   03           L0D60:    DB   $03   ; "name length field"
0D61                             ; 
0D61   C3 0E        L0D61:    DW   L0EC3   ; "code field" - docolon
0D63                             ; 
0D63                             ; ---
0D63                             ; 
0D63   00 0D                  DW   L0D00   ; /MOD
0D65   79 08                  DW   L0879   ; drop
0D67   B6 04                  DW   L04B6   ; exit
0D69                             ; 
0D69                             ; 
0D69                             ; ------------
0D69                             ; THE "*" WORD
0D69                             ; ------------
0D69                             ; (n1, n2 -- n1*n2)
0D69                             ; 
0D69   AA           L0D69:    DB   "*" + $80   ; "name field"
0D6A                             ; 
0D6A   60 0D                  DW   L0D60   ; "link field"
0D6C                             ; 
0D6C   01           L0D6C:    DB   $01   ; "name length field"
0D6D                             ; 
0D6D   C3 0E                  DW   L0EC3   ; "code field" - docolon
0D6F                             ; 
0D6F                             ; ---
0D6F                             ; 
0D6F   A8 0C                  DW   L0CA8   ; u*
0D71   79 08                  DW   L0879   ; drop
0D73   B6 04                  DW   L04B6   ; exit
0D75                             ; 
0D75                             ; 
0D75                             ; -------------
0D75                             ; THE "*/" WORD
0D75                             ; -------------
0D75                             ; (n1, n2, n3 -- (n1*n2)/n3)
0D75                             ; The intermediate product n1*n2 is held to double length.
0D75                             ; 
0D75   2A           L0D75:    DB   "*"   ; "name field"
0D76   AF                     DB   "/" + $80   
0D77                             ; 
0D77   6C 0D                  DW   L0D6C   ; "link field"
0D79                             ; 
0D79   02           L0D79:    DB   $02   ; "name length field"
0D7A                             ; 
0D7A   C3 0E        L0D7A:    DW   L0EC3   ; "code field" - docolon
0D7C                             ; 
0D7C                             ; ---
0D7C                             ; 
0D7C   31 0D                  DW   L0D31   ; */MOD
0D7E   85 08                  DW   L0885   ; swap
0D80   79 08                  DW   L0879   ; drop
0D82   B6 04                  DW   L04B6   ; exit
0D84                             ; 
0D84                             ; --------------
0D84                             ; THE "U/MOD" WORD
0D84                             ; --------------
0D84                             ; (ud1, un2 -- un3, un4)
0D84                             ; In unsigned arithmetic throughout, divides the double length integer ud1
0D84                             ; by the single length integer un2 to give a single length remainder un3
0D84                             ; and a single length quotient un4.
0D84                             ; 
0D84   55 2F 4D 4F  L0D84:    DB   "U/MO"   ; "name field"
0D88   C4                     DB   "D" + $80   
0D89                             ; 
0D89   79 0D                  DW   L0D79   ; "link field"
0D8B                             ; 
0D8B   05           L0D8B:    DB   $05   ; "name length field"
0D8C                             ; 
0D8C   C3 0E        L0D8C:    DW   L0EC3   ; "code field" - docolon
0D8E                             ; 
0D8E                             ; ---
0D8E                             ; 
0D8E   C4 0C        L0D8E:    DW   L0CC4   ; div?
0D90   79 08                  DW   L0879   ; drop
0D92   B6 04                  DW   L04B6   ; exit
0D94                             ; 
0D94                             ; ---
0D94                             ; 
0D94                             ; make positive
0D94                             ; 
0D94   C3 0E        L0D94:    DW   L0EC3   ; "code field" - docolon
0D96                             ; 
0D96                             ; ---
0D96                             ; 
0D96   2E 0C        L0D96:    DW   L0C2E   ; 0<
0D98   83 12                  DW   L1283   ; ?branch               (if false)
0D9A   03 00        L0D9A:    DW   $0003   ; to L0D9E
0D9C                             ; 
0D9C   A9 0D                  DW   L0DA9   ; negate
0D9E                             ; 
0D9E   B6 04        L0D9E:    DW   L04B6   ; exit
0DA0                             ; 
0DA0                             ; -----------------
0DA0                             ; THE "NEGATE" WORD
0DA0                             ; -----------------
0DA0                             ; (n -- -n)
0DA0                             ; 
0DA0                             ; 
0DA0   4E 45 47 41 54 L0DA0:   DB   "NEGAT"   ; "name field"
0DA5   C5                     DB   "E" +$80   
0DA6                             ; 
0DA6   8B 0D                  DW   L0D8B   ; "link field"
0DA8                             ; 
0DA8   06           L0DA8:    DB   $06   ; "name length field"
0DA9                             ; 
0DA9   AB 0D        L0DA9:    DW   L0DAB   ; "code field"
0DAB                             ; 
0DAB                             ; ---
0DAB                             ; 
0DAB   01 02 00     L0DAB:    LD   BC,$0002   ; 
0DAE   18 0F                  JR   L0DBF   ; 
0DB0                             ; 
0DB0                             ; ------------------
0DB0                             ; THE "DNEGATE" WORD
0DB0                             ; ------------------
0DB0                             ; (d -- -d)
0DB0                             ; Double length integer negation.
0DB0                             ; 
0DB0   44 4E 45 47 41 54 L0DB0:   DB   "DNEGAT"   ; "name field"
0DB6   C5                     DB   "E" +$80   
0DB7                             ; 
0DB7   A8 0D                  DW   L0DA8   ; "link field"
0DB9                             ; 
0DB9   07           L0DB9:    DB   $07   ; "name length field"
0DBA                             ; 
0DBA   BC 0D        L0DBA:    DW   L0DBC   ; "code field"
0DBC                             ; 
0DBC                             ; ---
0DBC                             ; 
0DBC   01 04 00     L0DBC:    LD   BC,$0004   
0DBF                             ; 
0DBF                             ; NEGATE joins here with bc=2
0DBF                             ; 
0DBF   2A 3B 3C     L0DBF:    LD   HL,($3C3B)   ; SPARE
0DC2   A7                     AND   A   
0DC3   ED 42                  SBC   HL,BC   
0DC5                             ; 
0DC5   78           L0DC5:    LD   A,B   
0DC6   9E                     SBC   A,(HL)   
0DC7   77                     LD   (HL),A   
0DC8   23                     INC   HL   
0DC9   0D                     DEC   C   
0DCA   20 F9                  JR   NZ,L0DC5   ; 
0DCC                             ; 
0DCC   FD E9                  JP   (IY)   ; to "next".
0DCE                             ; 
0DCE                             ; ------------
0DCE                             ; THE "+" WORD
0DCE                             ; ------------
0DCE                             ; (n1, n2 -- n1 + n2)
0DCE                             ; 
0DCE   AB           L0DCE:    DB   "+" + $80   ; "name field"
0DCF                             ; 
0DCF   B9 0D                  DW   L0DB9   ; "link field"
0DD1                             ; 
0DD1   01           L0DD1:    DB   $01   ; "name length field"
0DD2                             ; 
0DD2   D4 0D        L0DD2:    DW   L0DD4   ; "code field"
0DD4                             ; 
0DD4                             ; ---
0DD4                             ; 
0DD4   DF           L0DD4:    RST   18H   ; pop word DE
0DD5   D5                     PUSH   DE   ; save on machine stack
0DD6   DF                     RST   18H   ; pop word DE
0DD7   E1                     POP   HL   ; first number to HL
0DD8                             ; 
0DD8   19                     ADD   HL,DE   ; the actual addition
0DD9                             ; 
0DD9   EB                     EX   DE,HL   ; result to DE
0DDA   D7                     RST   10H   ; push word DE
0DDB                             ; 
0DDB   FD E9                  JP   (IY)   ; to "next".
0DDD                             ; 
0DDD                             ; ------------
0DDD                             ; THE "-" WORD
0DDD                             ; ------------
0DDD                             ; (n1, n2 -- n1-n2)
0DDD                             ; flip the sign and do a plus.
0DDD                             ; 
0DDD   AD           L0DDD:    DB   "-" + $80   ; "name field"
0DDE                             ; 
0DDE   D1 0D                  DW   L0DD1   ; "link field"
0DE0                             ; 
0DE0   01           L0DE0:    DB   $01   ; "name length field"
0DE1                             ; 
0DE1   C3 0E        L0DE1:    DW   L0EC3   ; "code field" - docolon
0DE3                             ; 
0DE3                             ; ---
0DE3                             ; 
0DE3   A9 0D        L0DE3:    DW   L0DA9   ; negate
0DE5   D2 0D                  DW   L0DD2   ; +
0DE7   B6 04                  DW   L04B6   ; exit
0DE9                             ; 
0DE9                             ; -------------
0DE9                             ; THE "D+" WORD
0DE9                             ; -------------
0DE9                             ; (d1, d2 -- d1 + d2)
0DE9                             ; double length integer addition.
0DE9                             ; 
0DE9   44           L0DE9:    DB   "D"   ; "name field"
0DEA   AB                     DB   "+" + $80   
0DEB                             ; 
0DEB   E0 0D                  DW   L0DE0   ; "link field"
0DED                             ; 
0DED   02           L0DED:    DB   $02   ; "name length field"
0DEE                             ; 
0DEE   F0 0D        L0DEE:    DW   L0DF0   ; "code field"
0DF0                             ; 
0DF0                             ; ---
0DF0                             ; 
0DF0   DF           L0DF0:    RST   18H   ; pop word DE
0DF1                             ; 
0DF1   D5                     PUSH   DE   
0DF2   CD 4E 08               CALL   L084E   ; stk_to_bc
0DF5   DF                     RST   18H   ; pop word DE
0DF6   D5                     PUSH   DE   
0DF7   DF                     RST   18H   ; pop word DE
0DF8   EB                     EX   DE,HL   
0DF9   09                     ADD   HL,BC   
0DFA   EB                     EX   DE,HL   
0DFB   D7                     RST   10H   ; push word DE
0DFC   C1                     POP   BC   
0DFD   E1                     POP   HL   
0DFE   ED 4A                  ADC   HL,BC   
0E00   EB                     EX   DE,HL   
0E01   D7                     RST   10H   ; push word DE
0E02                             ; 
0E02   FD E9                  JP   (IY)   ; to "next".
0E04                             ; 
0E04                             ; -------------
0E04                             ; THE "1+" WORD
0E04                             ; -------------
0E04                             ; (n -- n+1)
0E04                             ; 
0E04   31           L0E04:    DB   "1"   ; "name field"
0E05   AB                     DB   "+" + $80   
0E06                             ; 
0E06   ED 0D                  DW   L0DED   ; "link field"
0E08                             ; 
0E08   02           L0E08:    DB   $02   ; "name length field"
0E09                             ; 
0E09   0B 0E        L0E09:    DW   L0E0B   ; "code field"
0E0B                             ; 
0E0B                             ; ---
0E0B                             ; 
0E0B   DF           L0E0B:    RST   18H   ; get word "n" in DE
0E0C   18 09                  JR   L0E17   ; forward to increment and stack
0E0E                             ; 
0E0E                             ; -------------
0E0E                             ; THE "2+" WORD
0E0E                             ; -------------
0E0E                             ; (n -- n+2)
0E0E                             ; 
0E0E   32           L0E0E:    DB   "2"   ; "name field"
0E0F   AB                     DB   "+" + $80   
0E10                             ; 
0E10   08 0E                  DW   L0E08   ; "link field"
0E12                             ; 
0E12   02           L0E12:    DB   $02   ; "name length field"
0E13                             ; 
0E13   15 0E        L0E13:    DW   L0E15   ; "code field"
0E15                             ; 
0E15                             ; ---
0E15                             ; 
0E15   DF           L0E15:    RST   18H   ; get word "n" in DE.
0E16   13                     INC   DE   ; increment n                   (4)
0E17                             ; ->
0E17   13           L0E17:    INC   DE   ; increment n                   (4)
0E18   18 14                  JR   L0E2E   ; forward to push word DE and exit
0E1A                             ; 
0E1A                             ; -------------
0E1A                             ; THE "1-" WORD
0E1A                             ; -------------
0E1A                             ; (n -- n-1)
0E1A                             ; 
0E1A                             ; 
0E1A   31           L0E1A:    DB   "1"   ; "name field"
0E1B   AD                     DB   "-" + $80   
0E1C                             ; 
0E1C   12 0E                  DW   L0E12   ; "link field"
0E1E                             ; 
0E1E   02           L0E1E:    DB   $02   ; "name length field"
0E1F                             ; 
0E1F   21 0E        L0E1F:    DW   L0E21   ; "code field"
0E21                             ; 
0E21                             ; ---
0E21                             ; 
0E21   DF           L0E21:    RST   18H   ; 
0E22   18 09                  JR   L0E2D   ; 
0E24                             ; 
0E24                             ; -------------
0E24                             ; THE "2-" WORD
0E24                             ; -------------
0E24                             ; (n -- n-2)
0E24                             ; 
0E24                             ; 
0E24   32           L0E24:    DB   "2"   ; "name field"
0E25   AD           L0E25:    DB   "-" + $80   
0E26                             ; 
0E26   1E 0E        L0E26:    DW   L0E1E   ; "link field"
0E28                             ; 
0E28   02           L0E28:    DB   $02   ; "name length field"
0E29                             ; 
0E29   2B 0E        L0E29:    DW   L0E2B   ; "code field"
0E2B                             ; 
0E2B                             ; ---
0E2B                             ; 
0E2B                             ; 
0E2B   DF           L0E2B:    RST   18H   
0E2C   1B                     DEC   DE   
0E2D                             ; 
0E2D                             ; ->
0E2D   1B           L0E2D:    DEC   DE   
0E2E                             ; 
0E2E                             ; ->
0E2E   D7           L0E2E:    RST   10H   ; push word DE
0E2F                             ; 
0E2F   FD E9                  JP   (IY)   ; to "next".
0E31                             ; 
0E31                             ; -------------
0E31                             ; THE "OR" WORD
0E31                             ; -------------
0E31                             ; (n1, n2 -- n1 OR n2)
0E31                             ; Bitwise Boolean operation.
0E31                             ; 
0E31                             ; 
0E31   4F           L0E31:    DB   "O"   ; "name field"
0E32   D2                     DB   "R" + $80   
0E33                             ; 
0E33   28 0E                  DW   L0E28   ; "link field"
0E35                             ; 
0E35   02           L0E35:    DB   $02   ; "name length field"
0E36                             ; 
0E36   38 0E        L0E36:    DW   L0E38   ; "code field"
0E38                             ; 
0E38                             ; ---
0E38                             ; 
0E38   DF           L0E38:    RST   18H   ; pop word DE
0E39   CD 4E 08               CALL   L084E   ; stk_to_bc
0E3C                             ; 
0E3C   7B                     LD   A,E   ; 
0E3D   B1                     OR   C   ; OR low order bytes
0E3E   5F                     LD   E,A   ; 
0E3F                             ; 
0E3F   7A                     LD   A,D   ; 
0E40   B0                     OR   B   ; OR high order bytes
0E41   57                     LD   D,A   ; 
0E42                             ; 
0E42   D7                     RST   10H   ; push word DE
0E43                             ; 
0E43   FD E9                  JP   (IY)   ; to "next".
0E45                             ; 
0E45                             ; --------------
0E45                             ; THE "AND" WORD
0E45                             ; --------------
0E45                             ; (n1, n2 -- n1 AND n2)
0E45                             ; Bitwise Boolean operation.
0E45                             ; 
0E45                             ; 
0E45   41 4E        L0E45:    DB   "AN"   ; "name field"
0E47   C4                     DB   "D" + $80   
0E48                             ; 
0E48   35 0E                  DW   L0E35   ; "link field"
0E4A                             ; 
0E4A   03           L0E4A:    DB   $03   ; "name length field"
0E4B                             ; 
0E4B   4D 0E                  DW   L0E4D   ; "code field"
0E4D                             ; 
0E4D                             ; ---
0E4D                             ; 
0E4D   DF           L0E4D:    RST   18H   
0E4E   CD 4E 08               CALL   L084E   ; stk_to_bc
0E51                             ; 
0E51   7B                     LD   A,E   ; 
0E52   A1                     AND   C   ; 
0E53   5F                     LD   E,A   ; 
0E54                             ; 
0E54   7A                     LD   A,D   ; 
0E55   A0                     AND   B   ; 
0E56   57                     LD   D,A   ; 
0E57                             ; 
0E57   D7                     RST   10H   ; push word DE
0E58   FD E9                  JP   (IY)   ; to "next".
0E5A                             ; 
0E5A                             ; --------------
0E5A                             ; THE "XOR" WORD
0E5A                             ; --------------
0E5A                             ; (n1, n2 -- n1 XOR n2)
0E5A                             ; Bitwise Boolean XOR (exclusive or)
0E5A                             ; 
0E5A   58 4F        L0E5A:    DB   "XO"   ; "name field"
0E5C   D2                     DB   "R" + $80   
0E5D                             ; 
0E5D   4A 0E                  DW   L0E4A   ; "link field"
0E5F                             ; 
0E5F   03           L0E5F:    DB   $03   ; "name length field"
0E60                             ; 
0E60   62 0E        L0E60:    DW   L0E62   ; "code field"
0E62                             ; 
0E62                             ; ---
0E62                             ; 
0E62   DF           L0E62:    RST   18H   
0E63   CD 4E 08               CALL   L084E   ; stk_to_bc
0E66                             ; 
0E66   7B                     LD   A,E   ; 
0E67   A9                     XOR   C   ; 
0E68   5F                     LD   E,A   ; 
0E69                             ; 
0E69   7A                     LD   A,D   ; 
0E6A   A8                     XOR   B   ; 
0E6B   57                     LD   D,A   ; 
0E6C                             ; 
0E6C   D7                     RST   10H   ; push word DE
0E6D   FD E9                  JP   (IY)   ; to "next".
0E6F                             ; 
0E6F                             ; --------------
0E6F                             ; THE "MAX" WORD
0E6F                             ; --------------
0E6F                             ; (n1, n2 -- max (n1, n2))
0E6F                             ; Calculates the larger of two numbers.
0E6F                             ; 
0E6F   4D 41        L0E72:    DB   "MA"   ; "name field"
0E71   D8                     DB   "X" + $80   
0E72                             ; 
0E72   5F 0E                  DW   L0E5F   ; "link field"
0E74                             ; 
0E74   03           L0E74:    DB   $03   ; "name length field"
0E75                             ; 
0E75   C3 0E        L0E75:    DW   L0EC3   ; "code field" - docolon
0E77                             ; 
0E77                             ; ---
0E77                             ; 
0E77   12 09        L0E77:    DW   L0912   ; over
0E79   12 09                  DW   L0912   ; over
0E7B   65 0C                  DW   L0C65   ; <
0E7D   71 12                  DW   L1271   ; branch
0E7F   0F 00        L0E7F:    DW   $000F   ; forward to L0E8F
0E81                             ; 
0E81                             ; --------------
0E81                             ; THE "MIN" WORD
0E81                             ; --------------
0E81                             ; (n1, n2 -- min (n1, n2))
0E81                             ; Calculates the smaller of two numbers.
0E81                             ; 
0E81   4D 49        L0E81:    DB   "MI"   ; "name field"
0E83   CE                     DB   "N" + $80   
0E84                             ; 
0E84   74 0E                  DW   L0E74   ; "link field"
0E86                             ; 
0E86   03           L0E86:    DB   $03   ; "name length field"
0E87                             ; 
0E87   C3 0E                  DW   L0EC3   ; "code field" - docolon
0E89                             ; 
0E89                             ; ---
0E89                             ; 
0E89   12 09        L0E89:    DW   L0912   ; over
0E8B   12 09                  DW   L0912   ; over
0E8D   56 0C                  DW   L0C56   ; >
0E8F                             ; ->
0E8F   83 12        L0E8F:    DW   L1283   ; ?branch
0E91   03 00        L0E91:    DW   $0003   ; forward to L0995
0E93                             ; 
0E93   85 08                  DW   L0885   ; swap
0E95                             ; 
0E95   79 08        L0995:    DW   L0879   ; drop
0E97   B6 04                  DW   L04B6   ; exit
0E99                             ; 
0E99                             ; ------------------
0E99                             ; THE "DECIMAL" WORD
0E99                             ; ------------------
0E99                             ; (  --  )
0E99                             ; Sets the system number base to ten.
0E99                             ; 
0E99   44 45 43 49 4D 41 L0E99:   DB   "DECIMA"   ; "name field"
0E9F   CC                     DB   "L" + $80   
0EA0                             ; 
0EA0   86 0E                  DW   L0E86   ; "link field"
0EA2                             ; 
0EA2   07           L0EA2:    DB   $07   ; "name length field"
0EA3                             ; 
0EA3   A5 0E                  DW   L0EA5   ; "code field"
0EA5                             ; 
0EA5                             ; ---
0EA5                             ; 
0EA5   DD 36 3F 0A  L0EA5:    LD   (IX+$3F),$0A   ; update system variable BASE to 10
0EA9                             ; 
0EA9   FD E9                  JP   (IY)   ; to "next".
0EAB                             ; 
0EAB                             ; ------------
0EAB                             ; THE ":" WORD
0EAB                             ; ------------
0EAB                             ; Introduces colon definitions.
0EAB                             ; 
0EAB   BA           L0EAB:    DB   ":" + $80   ; "name field"
0EAC                             ; 
0EAC   A2 0E                  DW   L0EA2   ; "link field"
0EAE                             ; 
0EAE   01           L0EAE:    DB   $01   ; "name length field"
0EAF                             ; 
0EAF   85 10        L0EAF:    DW   L1085   ; "code field" - create and enclose
0EB1                             ; 
0EB1                             ; ---
0EB1                             ; 
0EB1   C3 0E        L0EB1:    DW   L0EC3   ; do_colon
0EB3                             ; 
0EB3   4B 10                  DW   L104B   ; stk_data
0EB5   0A                     DB   $0A   ; ten                   marker byte?
0EB6                             ; ->
0EB6   0E 1A        L0EB6:    DW   L1A0E   ; end_forth
0EB8                             ; 
0EB8   21 3E 3C     L0EB8:    LD   HL,$3C3E   ; FLAGS
0EBB                             ; 
0EBB   7E                     LD   A,(HL)   ; update bits 6 and 2.
0EBC   F6 44                  OR   $44   ; signal in compile mode, definition
0EBE                             ; incomplete.
0EBE   77                     LD   (HL),A   ; update FLAGS.
0EBF                             ; 
0EBF   FD E9                  JP   (IY)   ; to "next".
0EC1                             ; 
0EC1                             ; ---
0EC1                             ; 
0EC1   E9           X0EC1:    DB   $E9   ; 
0EC2   FF           X0EC2:    DB   $FF   ; 0ec2 + ffe9 =  0eab = ":"
0EC3                             ; 
0EC3                             ; -------------------------------
0EC3                             ; THE "ENTER" or "DOCOLON" action
0EC3                             ; -------------------------------
0EC3                             ; 
0EC3                             ; 
0EC3   EB           L0EC3:    EX   DE,HL   ; 
0EC4   C3 BA 04               JP   L04BA   ; 
0EC7                             ; 
0EC7                             ; 
0EC7                             ; -----------------
0EC7                             ; THE "CREATE" WORD
0EC7                             ; -----------------
0EC7                             ; CREATE name
0EC7                             ; (  --  )
0EC7                             ; Defines a new word with a header and an empty parameter field.
0EC7                             ; When executed, the new word stacks its parameter field address.
0EC7                             ; 
0EC7   43 52 45 41 54 L0EC7:   DB   "CREAT"   ; "name field"
0ECC   C5                     DB   "E" + $80   
0ECD                             ; 
0ECD   AE 0E                  DW   L0EAE   ; "link field"
0ECF                             ; 
0ECF   06           L0ECF:    DB   $06   ; "name length field"
0ED0                             ; 
0ED0   C3 0E        L0ED0:    DW   L0EC3   ; "code field" - docolon
0ED2                             ; 
0ED2                             ; ---
0ED2                             ; 
0ED2   4B 10        L0ED2:    DW   L104B   ; stk_data
0ED4   20                     DB   $20   ; a space               delimiter
0ED5   AB 05                  DW   L05AB   ; word to pad
0ED7   FB 0E                  DW   L0EFB   ; get-name              in dict
0ED9   88 06                  DW   L0688   ; stk-zero              link
0EDB   4E 0F                  DW   L0F4E   ; ,
0EDD   80 04                  DW   L0480   ; current
0EDF   B3 08                  DW   L08B3   ; @
0EE1   6B 08                  DW   L086B   ; dup
0EE3   B3 08                  DW   L08B3   ; @
0EE5   4E 0F                  DW   L0F4E   ; ,
0EE7   60 04                  DW   L0460   ; here
0EE9   85 08                  DW   L0885   ; swap
0EEB   C1 08                  DW   L08C1   ; !
0EED   99 04                  DW   L0499   ; pad
0EEF   96 08                  DW   L0896   ; C@            fetch 1 byte
0EF1   5F 0F                  DW   L0F5F   ; C,
0EF3   11 10                  DW   L1011   ; stack next word
0EF5   EC 0F                  DW   $0FEC   ; ???
0EF7   4E 0F                  DW   L0F4E   ; ,
0EF9   B6 04        L0EF9:    DW   L04B6   ; exit
0EFB                             ; 
0EFB                             ; ----------------------------
0EFB                             ; The "get_name" Internal Word
0EFB                             ; ----------------------------
0EFB                             ; Used only by the above CREATE thread.
0EFB                             ; 
0EFB   FD 0E        L0EFB:    DW   L0EFD   ; headerless "code field"
0EFD                             ; 
0EFD                             ; ---
0EFD                             ; 
0EFD   CD 2E 0F     L0EFD:    CALL   L0F2E   ; blank stack
0F00                             ; 
0F00   DF                     RST   18H   ; pop word DE
0F01                             ; 
0F01   1A                     LD   A,(DE)   
0F02   3D                     DEC   A   ; zero becomes $FF
0F03   FE 3F                  CP   $3F   ; max length is 64
0F05   38 02                  JR   C,L0F09   ; forward if n range 1 - 64.
0F07                             ; 
0F07   E7                     RST   20H   ; Error 6
0F08   06                     DB   $06   ; Name of new word too short or long.
0F09                             ; 
0F09                             ; ---
0F09                             ; 
0F09   C6 08        L0F09:    ADD   A,$08   ; allow for prev/len/addr 3 missing
0F0B                             ; 
0F0B   4F                     LD   C,A   ; 
0F0C   06 00                  LD   B,$00   ; length to BC
0F0E                             ; 
0F0E   CD 8C 0F     L0F0E:    CALL   L0F8C   ; check free memory.
0F11                             ; 
0F11   1A           X0F11:    LD   A,(DE)   ; true length to A
0F12   4F                     LD   C,A   ; and BC again
0F13                             ; 
0F13   2A 37 3C               LD   HL,($3C37)   ; STKBOT
0F16                             ; 
0F16   D5                     PUSH   DE   ; 
0F17   CD 9E 0F               CALL   L0F9E   ; routine MAKE ROOM
0F1A   D1                     POP   DE   ; 
0F1B                             ; 
0F1B   1A                     LD   A,(DE)   ; length of word in pad
0F1C   47                     LD   B,A   ; transfer to counter.
0F1D                             ; 
0F1D   13           L0F1D:    INC   DE   ; increase source
0F1E   1A                     LD   A,(DE)   ; fetch character
0F1F                             ; 
0F1F   CD 07 08               CALL   L0807   ; to_upper makes uppercase.
0F22                             ; 
0F22   77                     LD   (HL),A   ; store in dictionary
0F23   23                     INC   HL   ; increase destination
0F24   10 F7                  DJNZ   L0F1D   ; loop back for all letters.
0F26                             ; 
0F26   22 39 3C               LD   ($3C39),HL   ; store this location in SPARE
0F29   2B                     DEC   HL   ; step back to last letter of word.
0F2A   CB FE                  SET   7,(HL)   ; and "invert" it.
0F2C   FD E9                  JP   (IY)   ; to "next".
0F2E                             ; 
0F2E                             ; ---
0F2E                             ; 
0F2E                             ; 
0F2E   DD CB 3E 56  L0F2E:    BIT   2,(IX+$3E)   ; test FLAGS incomplete definition ?
0F32   28 02                  JR   Z,L0F36   ; forward if not.
0F34                             ; 
0F34   E7                     RST   20H   ; Error 12
0F35   0C                     DB   $0C   ; Incomplete definition in dictionary.
0F36                             ; 
0F36                             ; ---
0F36                             ; 
0F36   2A 37 3C     L0F36:    LD   HL,($3C37)   ; fetch STKBOT
0F39   ED 5B 39 3C            LD   DE,($3C39)   ; fetch SPARE
0F3D                             ; 
0F3D   AF                     XOR   A   ; clear accumulator and carry flag
0F3E                             ; 
0F3E   ED 52                  SBC   HL,DE   ; subtract
0F40                             ; 
0F40   EB                     EX   DE,HL   ; 
0F41   73                     LD   (HL),E   ; place low byte at next STACK slot.
0F42   23                     INC   HL   ; 
0F43   72                     LD   (HL),D   ; place high byte
0F44   67                     LD   H,A   ; make HL zero
0F45   6F                     LD   L,A   ; 
0F46   22 39 3C               LD   ($3C39),HL   ; update system variable SPARE to zero
0F49                             ; 
0F49   C9                     RET      ; return
0F4A                             ; 
0F4A                             ; ---------------------
0F4A                             ; 
0F4A                             ; ------------
0F4A                             ; THE "," WORD
0F4A                             ; ------------
0F4A                             ; ( n --   )
0F4A                             ; Encloses the single length integer in the dictionary.
0F4A                             ; 
0F4A   AC           L0F4A:    DB   "," + $80   ; "name field"
0F4B                             ; 
0F4B   CF 0E                  DW   L0ECF   ; "link field"
0F4D                             ; 
0F4D   01           L0F4D:    DB   $01   ; "name length field"
0F4E                             ; 
0F4E   C3 0E        L0F4E:    DW   L0EC3   ; "code field" - docolon
0F50                             ; 
0F50                             ; ---
0F50                             ; 
0F50   83 0F        L0F50:    DW   L0F83   ; allot2
0F52                             ; 
0F52   60 04                  DW   L0460   ; here
0F54   29 0E                  DW   L0E29   ; 2-
0F56   C1 08                  DW   L08C1   ; !
0F58   B6 04                  DW   L04B6   ; exit
0F5A                             ; 
0F5A                             ; 
0F5A                             ; -------------
0F5A                             ; THE "C," WORD
0F5A                             ; -------------
0F5A                             ; ( n --   )
0F5A                             ; Encloses the less significant byte of n in the dictionary.
0F5A                             ; 
0F5A   43           L0F5A:    DB   "C"   ; "name field"
0F5B   AC                     DB   "," + $80   
0F5C                             ; 
0F5C   4D 0F                  DW   L0F4D   ; "link field"
0F5E                             ; 
0F5E   02           L0F5E:    DB   $02   ; "name length field"
0F5F                             ; 
0F5F   C3 0E        L0F5F:    DW   L0EC3   ; "code field" - docolon
0F61                             ; 
0F61                             ; ---
0F61                             ; 
0F61   4B 10        L0F61:    DW   L104B   ; stk-data
0F63   01                     DB   $01   ; one
0F64   76 0F                  DW   L0F76   ; allot
0F66                             ; 
0F66   60 04        X0F66:    DW   L0460   ; here
0F68   1F 0E                  DW   L0E1F   ; 1-
0F6A   A5 08                  DW   L08A5   ; C!
0F6C   B6 04                  DW   L04B6   ; exit
0F6E                             ; 
0F6E                             ; ----------------
0F6E                             ; THE "ALLOT" WORD
0F6E                             ; ----------------
0F6E                             ; (n -- )
0F6E                             ; Encloses n bytes in the dictionary, without initializing them.
0F6E                             ; 
0F6E   41 4C 4C 4F  L0F6E:    DB   "ALLO"   ; "name field"
0F72   D4                     DB   "T" + $80   
0F73                             ; 
0F73   5E 0F                  DW   L0F5E   ; "link field"
0F75                             ; 
0F75   05           L0F75:    DB   $05   ; "name length field"
0F76                             ; 
0F76   78 0F        L0F76:    DW   L0F78   ; "code field"
0F78                             ; 
0F78                             ; ---
0F78                             ; 
0F78   CD 4E 08     L0F78:    CALL   L084E   ; stk_to_bc
0F7B   2A 37 3C               LD   HL,($3C37)   ; STKBOT
0F7E   CD 9E 0F               CALL   L0F9E   ; routine MAKE ROOM
0F81   FD E9                  JP   (IY)   ; to "next".
0F83                             ; 
0F83                             ; --------------------------
0F83                             ; The "allot2" Internal Word
0F83                             ; --------------------------
0F83                             ; Encloses 2 bytes in the dictionary, without initializing them.
0F83                             ; 
0F83   C3 0E        L0F83:    DW   L0EC3   ; headerless "code field" - docolon
0F85                             ; 
0F85                             ; ---
0F85                             ; 
0F85   4B 10        L0F85:    DW   L104B   ; stk_data
0F87   02                     DB   $02   ; two bytes required
0F88   76 0F                  DW   L0F76   ; allot
0F8A   B6 04                  DW   L04B6   ; exit
0F8C                             ; 
0F8C                             ; ----------------------------------
0F8C                             ; THE "DEFAULT MEMORY CHECK" ROUTINE
0F8C                             ; ----------------------------------
0F8C                             ; called each cycle in slow mode to check free memory.
0F8C                             ; 
0F8C   21 1E 00     L0F8C:    LD   HL,$001E   ; Allow a thirty byte overhead.
0F8F                             ; 
0F8F                             ; ----------------------------------
0F8F                             ; THE "CHECK FREE MEMORY" SUBROUTINE
0F8F                             ; ----------------------------------
0F8F                             ; 
0F8F   C5           L0F8F:    PUSH   BC   ; save bytes to check.
0F90                             ; 
0F90   09                     ADD   HL,BC   ; 
0F91   ED 4B 3B 3C            LD   BC,($3C3B)   ; SPARE
0F95   09                     ADD   HL,BC   ; carry indicates error - past 65535
0F96                             ; 
0F96   C1                     POP   BC   ; restore number of bytes
0F97   38 03                  JR   C,L0F9C   ; forward with error
0F99                             ; 
0F99   ED 72                  SBC   HL,SP   ; now check against the return stack
0F9B                             ; (machine stack)
0F9B   D8                     RET   C   ; return if value is less
0F9C                             ; 
0F9C   E7           L0F9C:    RST   20H   ; Error 1
0F9D   01                     DB   $01   ; Not enough memory
0F9E                             ; 
0F9E                             ; --------------------------
0F9E                             ; THE "MAKE ROOM" SUBROUTINE
0F9E                             ; --------------------------
0F9E                             ; 
0F9E   EB           L0F9E:    EX   DE,HL   ; first new location to DE
0F9F   21 28 00               LD   HL,$0028   ; overhead 40 bytes.
0FA2                             ; 
0FA2   CD 8F 0F     L0FA2:    CALL   L0F8F   ; check free memory.
0FA5                             ; 
0FA5                             ; now increase the two data stack pointers.
0FA5                             ; 
0FA5   2A 37 3C               LD   HL,($3C37)   ; fetch value of STKBOT
0FA8   09                     ADD   HL,BC   ; add required room.
0FA9   22 37 3C               LD   ($3C37),HL   ; update STKBOT.
0FAC                             ; 
0FAC   2A 3B 3C               LD   HL,($3C3B)   ; fetch value of SPARE
0FAF   E5                     PUSH   HL   ; take a copy of "old" value
0FB0   09                     ADD   HL,BC   ; add required room.
0FB1   22 3B 3C               LD   ($3C3B),HL   ; update SPARE.
0FB4                             ; 
0FB4   E3                     EX   (SP),HL   ; new SPARE value to stack,
0FB5                             ; old SPARE value to HL.
0FB5   E5                     PUSH   HL   ; push old SPARE value.
0FB6   A7                     AND   A   ; clear carry.
0FB7                             ; 
0FB7   ED 52                  SBC   HL,DE   ; get length of stack and 12
0FB9   44                     LD   B,H   ; 
0FBA   4D                     LD   C,L   ; 
0FBB   E1                     POP   HL   ; old spare
0FBC   D1                     POP   DE   ; new spare
0FBD   C8                     RET   Z   ; return if same.
0FBE                             ; 
0FBE                             ; else new SPARE must be higher than old spare.
0FBE                             ; 
0FBE   2B                     DEC   HL   ; point to end of data stack
0FBF   1B                     DEC   DE   ; adjust destination.
0FC0   ED B8                  LDDR      ; copy the Data Stack + gap upwards.
0FC2                             ; 
0FC2   23           L0FC2:    INC   HL   ; point to first new location.
0FC3                             ; 
0FC3   C9                     RET      ; return.
0FC4                             ; 
0FC4                             ; -------------------
0FC4                             ; THE "VARIABLE" WORD
0FC4                             ; -------------------
0FC4                             ; VARIABLE name
0FC4                             ; (n -- )
0FC4                             ; Sets up a variable with the given name, and initializes its value to n.
0FC4                             ; 
0FC4   56 41 52 49 41 42 4C L0FC4:   DB   "VARIABL"   ; "name field"
0FCB   C5                     DB   "E" + $80   
0FCC                             ; 
0FCC   75 0F                  DW   L0F75   ; "link field"
0FCE                             ; 
0FCE   08           L0FCE:    DB   $08   ; "name length field"
0FCF                             ; 
0FCF   85 10                  DW   L1085   ; "code field" - create and enclose
0FD1                             ; 
0FD1                             ; ---
0FD1                             ; 
0FD1   F0 0F        L0FD1:    DW   L0FF0   ; push word DE
0FD3   4E 0F                  DW   L0F4E   ; ,
0FD5                             ; 
0FD5   B6 04                  DW   L04B6   ; exit
0FD7                             ; 
0FD7                             ; -------------------
0FD7                             ; THE "CONSTANT" WORD
0FD7                             ; -------------------
0FD7                             ; CONSTANT name
0FD7                             ; (n -- )
0FD7                             ; Defines a constant with the given name and value n.
0FD7                             ; 
0FD7   43 4F 4E 53 54 41 4E L0FD7:   DB   "CONSTAN"   ; "name field"
0FDE   D4                     DB   "T" + $80   
0FDF                             ; 
0FDF   CE 0F                  DW   L0FCE   ; "link field"
0FE1                             ; 
0FE1   08           L0FE1:    DB   $08   ; "name length field"
0FE2                             ; 
0FE2   85 10        L0FE2:    DW   L1085   ; "code field" - create and enclose
0FE4                             ; 
0FE4                             ; ---
0FE4                             ; 
0FE4   F5 0F        L0FE4:    DW   L0FF5   ; pad??
0FE6   4E 0F                  DW   L0F4E   ; ,
0FE8   B6 04                  DW   L04B6   ; exit
0FEA                             ; 
0FEA                             ; ---
0FEA                             ; ???
0FEA                             ; 
0FEA   DC           X0FEA:    DB   $DC   ; 
0FEB   FE           X0FEB:    DB   $FE   ;  0feb + fedc = 0Ec7 = CREATE
0FEC                             ; 
0FEC                             ; ->
0FEC   18 02        L0FEC:    JR   L0FF0   ; skip forward
0FEE                             ; 
0FEE   D5           X0FEE:    DB   $D5   ; 
0FEF   FF           X0FEF:    DB   $FF   ;  0fef + ffd5 = 0fc4 = VARIABLE
0FF0                             ; 
0FF0                             ; ---
0FF0                             ; 
0FF0   D7           L0FF0:    RST   10H   ; push word DE
0FF1   FD E9                  JP   (IY)   ; to "next".
0FF3                             ; 
0FF3                             ; ---
0FF3                             ; 
0FF3   E3           X0FF3:    DB   $E3   ; 
0FF4   FF           X0FF4:    DB   $FF   ;  0ff4 + ffe3 = 0fd7 = CONSTANT
0FF5                             ; 
0FF5                             ; --> pad
0FF5                             ; 
0FF5   EB           L0FF5:    EX   DE,HL   
0FF6   5E                     LD   E,(HL)   
0FF7   23                     INC   HL   
0FF8   56                     LD   D,(HL)   
0FF9   D7                     RST   10H   ; push word DE
0FFA   FD E9                  JP   (IY)   ; to "next".
0FFC                             ; 
0FFC                             ; ------------------
0FFC                             ; THE "LITERAL" WORD
0FFC                             ; ------------------
0FFC                             ; (n -- )
0FFC                             ; Compiles the top of the stack into a word definition as a literal.
0FFC                             ; Compiles integers. decimal 4102 = $1006. c.f. $1055
0FFC                             ; 
0FFC   4C 49 54 45 52 41 L0FFC:   DB   "LITERA"   ; "name field"
1002   CC                     DB   "L" + $80   
1003                             ; 
1003   E1 0F                  DW   L0FE1   ; "link field"
1005                             ; 
1005   47           L1005:    DB   $47   ; "name length field"
1006                             ; 
1006   08 11        L1006:    DW   L1108   ; "code field" - compile
1008                             ; 
1008                             ; ---
1008                             ; 
1008   11 10        L1008:    DW   L1011   ; stack next word
100A   4E 0F                  DW   L0F4E   ; ,
100C   B6 04                  DW   L04B6   ; exit
100E                             ; 
100E                             ; ---
100E                             ; 
100E   02           X100E:    DB   $02   ; 
100F   FF           X100F:    DB   $FF   ; 100f + ff02 = 0f11 nah!
1010   FF           X1010:    DB   $FF   ; 
1011                             ; 
1011                             ; -----------------------------------
1011                             ; The "Stack Next Word" Internal Word
1011                             ; -----------------------------------
1011                             ; 
1011   13 10        L1011:    DW   L1013   ; headerless "code field"
1013                             ; 
1013                             ; ---
1013                             ; 
1013   06 01        L1013:    LD   B,$01   ; counter - one word to push
1015                             ; 
1015   E1           L1015:    POP   HL   ; drop the "Next Word" pointer.
1016   5E                     LD   E,(HL)   ; low byte to E.
1017   23                     INC   HL   ; increment pointer.
1018   56                     LD   D,(HL)   ; high byte to D.
1019                             ; 
1019                             ; -> E B=1 (one byte op)
1019                             ; 
1019   23           L1019:    INC   HL   ; increment the "Next Word" pointer
101A                             ; 
101A   E5           L101A:    PUSH   HL   ; the "Next Word" pointer goes to
101B                             ; the Return Stack.
101B   D7                     RST   10H   ; stack Data Word DE
101C   10 F7                  DJNZ   L1015   ; loop back if more than one.
101E                             ; 
101E   FD E9        L101E:    JP   (IY)   ; to "next".
1020                             ; 
1020                             ; 
1020                             ; ----------------
1020                             ; THE "ASCII" WORD
1020                             ; ----------------
1020                             ; Takes the next word from the input buffer, and yields the ASCII code
1020                             ; of its first character. If compiling, then compiles this as a literal.
1020                             ; 
1020                             ; e.g.      :STARS 0 DO ASCII * EMIT LOOP ;
1020                             ; (--ASCII code)         (if interpreting)
1020                             ; (--)                   (if compiling)
1020                             ; 
1020   41 53 43 49  L1020:    DB   "ASCI"   ; "name field"
1024   C9                     DB   "I" + $80   
1025                             ; 
1025   05 10                  DW   L1005   ; "link field"
1027                             ; 
1027   45           L1027:    DB   $45   ; "name length field" (immediate mode)
1028                             ; 
1028   C3 0E        L1029:    DW   L0EC3   ; "code field" - docolon
102A                             ; 
102A                             ; ----------------
102A                             ; 
102A   4B 10        L102A:    DW   L104B   ; stk_data
102C   20                     DB   $20   ; space delimiter
102D   AB 05                  DW   L05AB   ; word  to pad
102F   09 0E                  DW   L0E09   ; 1+
1031   96 08                  DW   L0896   ; C@
1033   0E 1A                  DW   L1A0E   ; end-forth.
1035                             ; 
1035   DD CB 3E 76            BIT   6,(IX+$3E)   ; FLAGS
1039   28 E3                  JR   Z,L101E   ; back to a jp (iy)
103B                             ; 
103B   CD B9 04               CALL   L04B9   ; forth
103E                             ; 
103E   11 10        L103E:    DW   L1011   ; stack next word
1040   4B 10                  DW   L104B   ; (stk_data)
1042   4E 0F                  DW   L0F4E   ; ,
1044   5F 0F                  DW   L0F5F   ; c,
1046   B6 04                  DW   L04B6   ; exit
1048                             ; 
1048                             ; ---
1048                             ; 
1048   01           X1048:    DB   $01   ; ?
1049                             ; 
1049   D6           X1049:    DB   $D6   ; ?
104A   FF           X104A:    DB   $FF   ; ?  104a + ffd6 = 1020 = ASCII
104B                             ; 
104B                             ; ----------------------------
104B                             ; The "stk-data" Internal Word
104B                             ; ----------------------------
104B                             ; used succinctly to stack the following byte as a word.
104B                             ; 
104B   4D 10        L104B:    DW   L104D   ; headerless "code field"
104D                             ; 
104D                             ; ---
104D                             ; 
104D   E1           L104D:    POP   HL   ; retrieve the "Next Word" pointer.
104E                             ; 
104E   5E                     LD   E,(HL)   ; fetch the single byte from there.
104F   16 00                  LD   D,$00   ; set high order byte to zero.
1051                             ; 
1051   06 01                  LD   B,$01   ; set counter to 1.
1053                             ; 
1053   18 C4                  JR   L1019   ; back to stack one word and
1055                             ; put the incremented pointer back on
1055                             ; the Return Stack.
1055                             ; 
1055                             ; --------------------------
1055                             ; The "stk_fp" Internal Word
1055                             ; --------------------------
1055                             ; stack and enclose a floating point number - two words.
1055                             ; 
1055   08 11        L1055:    DW   L1108   ; headerless "code field" - compile
1057                             ; 
1057                             ; ---
1057                             ; 
1057   64 10                  DW   L1064   ; stack two words.
1059   85 08                  DW   L0885   ; swap
105B   4E 0F                  DW   L0F4E   ; ,
105D   4E 0F                  DW   L0F4E   ; ,
105F   B6 04                  DW   L04B6   ; exit
1061                             ; ---
1061                             ; 
1061   04           X1061:    DB   $04   ; 
1062   FF           X1062:    DB   $FF   ; 1062 + ff04 = 0f66 XX
1063   FF           X1063:    DB   $FF   ; 
1064                             ; 
1064                             ; -----------------------------------
1064                             ; The "STACK TWO WORDS" Internal Word
1064                             ; -----------------------------------
1064                             ; 
1064   66 10        L1064:    DW   L1066   ; headerless "code field"
1066                             ; 
1066                             ; ---
1066                             ; 
1066   06 02        L1066:    LD   B,$02   ; set counter to two
1068                             ; 
1068   18 AB                  JR   L1015   ; back to stack 2 words
106A                             ; 
106A                             ; 
106A                             ; -----------------
106A                             ; THE "DEFINER" WORD
106A                             ; -----------------
106A                             ; Used with "DOES>" to define new defining words. i.e. words that themselves
106A                             ; define new words.
106A                             ; The format is
106A                             ; DEFINER name
106A                             ;       defining routine
106A                             ; DOES>
106A                             ;       action routine
106A                             ; ;
106A                             ; name is the name of the new defining word; when executed it will set up
106A                             ; the header of a new word and use its defining routine to set up the
106A                             ; parameter field. When this new word in its turn is executed, its parameter
106A                             ; field will be put on the stack and the action routine will be executed.
106A                             ; 
106A   44 45 46 49 4E 45 L106A:   DB   "DEFINE"   ; "name field"
1070   D2                     DB   "R" + $80   
1071                             ; 
1071   27 10                  DW   L1027   ; "link field"
1073                             ; 
1073   07           L1073:    DB   $07   ; "name length field"
1074                             ; 
1074   85 10        L1074:    DW   L1085   ; "code field" - create and enclose
1076                             ; 
1076                             ; ---
1076                             ; 
1076   85 10        L1076:    DW   L1085   ; create and enclose
1078   60 04                  DW   L0460   ; here
107A                             ; 
107A   4B 10                  DW   L104B   ; stk-data
107C                             ; 
107C   0C                     DB   $0C   ; 12                    marker byte
107D                             ; 
107D   83 0F                  DW   L0F83   ; allot2
107F   76 12                  DW   L1276   ; branch
1081   34 FE        L1081:    DW   $FE34   ; back to L0EB6
1083                             ; 
1083                             ; ---
1083                             ; 
1083   E6           X1083:    DB   $E6   ; 
1084   FF           X1084:    DB   $FF   ; 1084 + ffe6 = 106a = DEFINER
1085                             ; 
1085                             ; ---
1085                             ; createe and fill
1085                             ; ----
1085                             ; used seven times as a code word.
1085                             ; 
1085   CD F0 0F     L1085:    CALL   L0FF0   ; push word DE (save addr nxt wrd on DS)
1088                             ; 
1088   D0 0E                  DW   L0ED0   ; create
108A   6B 08                  DW   L086B   ; dup
108C   B3 08                  DW   L08B3   ; @
108E   60 04                  DW   L0460   ; here
1090   29 0E                  DW   L0E29   ; 2-
1092   C1 08                  DW   L08C1   ; !
1094                             ; 
1094   13 0E        L1094:    DW   L0E13   ; 2+
1096   9A 10                  DW   L109A   ; pop DE
1098   B6 04                  DW   L04B6   ; exit
109A                             ; 
109A                             ; -----------
109A                             ; pop word DE
109A                             ; -----------
109A                             ; branch to addr on stack???
109A                             ; 
109A   9C 10        L109A:    DW   L109C   ; headerless "code field"
109C                             ; 
109C                             ; ---
109C                             ; 
109C   DF           L109C:    RST   18H   ; unstack Data Word DE
109D                             ; 
109D   C3 C3 0E               JP   L0EC3   ; start new thread.
10A0                             ; 
10A0                             ; ---------------
10A0                             ; THE "CALL" WORD
10A0                             ; ---------------
10A0                             ; (address -- )
10A0                             ; Executes Z80 machine code at address on the stack. The code is terminated
10A0                             ; by a jp (iy)
10A0                             ; e.g. in hex
10A0                             ; DEFINER CODE DOES> CALL ;
10A0                             ; CODE EI FB C, FD C, E9 C,
10A0                             ; The word EI will enable interrupts.
10A0                             ; 
10A0   43 41 4C     L10A0:    DB   "CAL"   ; "name field"
10A3   CC                     DB   "L" + $80   
10A4                             ; 
10A4   73 10                  DW   L1073   ; "link field"
10A6                             ; 
10A6   04           L10A6:    DB   $04   ; "name length field"
10A7                             ; 
10A7   A9 10        L10A7:    DW   L10A9   ; "code field"
10A9                             ; 
10A9                             ; ---
10A9                             ; 
10A9   DF           L10A9:    RST   18H   
10AA   EB                     EX   DE,HL   
10AB                             ; 
10AB   E9                     JP   (HL)   
10AC                             ; 
10AC                             ; ----------------
10AC                             ; THE "DOES>" WORD
10AC                             ; ----------------
10AC                             ; See DEFINER.
10AC                             ; 
10AC   44 4F 45 53  L10AC:    DB   "DOES"   ; "name field"
10B0   BE                     DB   ">" + $80   
10B1                             ; 
10B1   F4 10                  DW   L10F4   ; "link field"
10B3                             ; 
10B3   45           L10B3:    DB   $45   ; "name length field" (immediate mode)
10B4                             ; 
10B4   08 11        L10B4:    DW   L1108   ; "code field" - compile
10B6                             ; 
10B6   E8 10        L10B6:    DW   L10E8   ; exit
10B8                             ; 
10B8   D8 12                  DW   L12D8   ; check??
10BA                             ; 
10BA   0C                     DB   $0C   ; 12
10BB                             ; 
10BB   CD 10                  DW   L10CD   ; 
10BD   4B 10                  DW   L104B   ; stk_data
10BF                             ; 
10BF   CD                     DB   $CD   ; data                  call ?
10C0                             ; 
10C0   5F 0F                  DW   L0F5F   ; C,
10C2   11 10                  DW   L1011   ; stack next word
10C4   F0 0F                  DW   L0FF0   ; (push word DE)
10C6   4E 0F                  DW   L0F4E   ; ,
10C8   4B 10                  DW   L104B   ; stk-data
10CA                             ; 
10CA   0A                     DB   $0A   ; ten                   marker byte.
10CB                             ; 
10CB   B6 04                  DW   L04B6   ; exit
10CD                             ; 
10CD                             ; -----------------------
10CD                             ; The "???" Internal Word
10CD                             ; -----------------------
10CD                             ; 
10CD   C3 0E        L10CD:    DW   L0EC3   ; headerless "code field" - docolon
10CF                             ; 
10CF                             ; ---
10CF                             ; 
10CF   6B 08                  DW   L086B   ; dup
10D1   29 0E                  DW   L0E29   ; 2-
10D3   B5 15                  DW   L15B5   ; namefield
10D5   60 04                  DW   L0460   ; here
10D7   E1 0D                  DW   L0DE1   ; -
10D9   1F 0E                  DW   L0E1F   ; 1-
10DB   4E 0F                  DW   L0F4E   ; ,
10DD   60 04                  DW   L0460   ; here
10DF   85 08                  DW   L0885   ; swap
10E1   C1 08                  DW   L08C1   ; !
10E3   B6 04                  DW   L04B6   ; exit
10E5                             ; 
10E5                             ; ---
10E5                             ; 
10E5   05           X10E5:    DB   $05   ; 
10E6                             ; 
10E6   C5           X10E6:    DB   $C5   ; 
10E7   FF           X10E7:    DB   $FF   ; 10e7 + ffc5 = 10ac = DOES>
10E8                             ; 
10E8                             ; ---
10E8                             ; 
10E8   B8 04        L10E8:    DW   L04B8   ; exit?
10EA                             ; 
10EA                             ; -------------------
10EA                             ; THE "COMPILER" WORD
10EA                             ; -------------------
10EA                             ; Used with "RUNS>" for defining new compiling words, i.e. words that are
10EA                             ; used within word definitions to give an immediate effect of compiling
10EA                             ; some information into the dictionary.
10EA                             ; (This is traditionally done with IMMEDIATE, but COMPILER...RUNS> works
10EA                             ; better with EDIT etc.)
10EA                             ; 
10EA   43 4F 4D 50 49 4C 45 L10EA:   DB   "COMPILE"   ; "name field"
10F1   D2                     DB   "R" + $80   
10F2                             ; 
10F2   A6 10                  DW   L10A6   ; "link field"
10F4                             ; 
10F4   08           L10F4:    DB   $08   ; "name length field"
10F5                             ; 
10F5   85 10        L10F5:    DW   L1085   ; "code field" - create and enclose
10F7                             ; 
10F7                             ; ---
10F7                             ; 
10F7   08 11                  DW   L1108   ; compile
10F9   60 11                  DW   L1160   ; immediate
10FB   60 04                  DW   L0460   ; here
10FD   4B 10                  DW   L104B   ; stk_data
10FF                             ; 
10FF   0B           L10FF:    DB   $0B   ; 11                    marker byte
1100                             ; 
1100   83 0F                  DW   L0F83   ; allot2
1102   76 12                  DW   L1276   ; branch
1104   B1 FD        L1104:    DW   $FDB1   ; back to L0EB6
1106                             ; 
1106                             ; ---
1106                             ; 
1106   E3           X1106:    DB   $E3   ; 
1107   FF           X1107:    DB   $FF   ; 1107 + ffe3 = 10ea = COMPILER
1108                             ; 
1108                             ; ---------------------
1108                             ; THE "COMPILE" ROUTINE
1108                             ; ---------------------
1108                             ; Instead of executing code words as they are encountered, lay them down in
1108                             ; the dictionary along with any parameters.
1108                             ; 
1108   DD CB 3E 76  L1108:    BIT   6,(IX+$3E)   ; test FLAGS - compiler mode ?
110C   20 02                  JR   NZ,L1110   ; skip error if so.
110E                             ; 
110E   E7                     RST   20H   ; Error 4.
110F   04                     DB   $04   ; Compiling word used in interpret mode.
1110                             ; 
1110   CD F0 0F     L1110:    CALL   L0FF0   ; push word DE (then jp (iy))
1113                             ; 
1113   6B 08                  DW   L086B   ; dup
1115   B3 08                  DW   L08B3   ; @
1117   4E 0F                  DW   L0F4E   ; ,
1119   76 12                  DW   L1276   ; branch
111B   78 FF        L111B:    DW   $FF78   ; to L1094 - definer code
111D                             ; 
111D                             ; ----------------
111D                             ; THE "RUNS>" WORD
111D                             ; ----------------
111D                             ; See COMPILER
111D                             ; 
111D   52 55 4E 53  L111D:    DB   "RUNS"   ; "name field"
1121   BE                     DB   ">" + $80   
1122                             ; 
1122   B3 10                  DW   L10B3   ; "link field"
1124                             ; 
1124   45           L1124:    DB   $45   ; "name length field" (immediate mode)
1125                             ; 
1125   08 11        L1125:    DW   L1108   ; "code field" - compile
1127                             ; 
1127                             ; ---
1127                             ; 
1127   40 11        L1127:    DW   L1140   ; vv
1129   D8 12                  DW   L12D8   ; check-for
112B   0B                     DB   $0B   ; 11                    marker byte.
112C   85 08                  DW   L0885   ; swap
112E   5F 0F                  DW   L0F5F   ; c,
1130   CD 10                  DW   L10CD   ; ?
1132   11 10                  DW   L1011   ; stack next word
1134   42 11                  DW   L1142   
1136   4E 0F                  DW   L0F4E   ; ,
1138                             ; 
1138   4B 10                  DW   L104B   ; stk-data
113A   0A                     DB   $0A   ; ten.                  marker byte.
113B   B6 04                  DW   L04B6   ; exit
113D                             ; 
113D                             ; ---
113D                             ; 
113D   05           X113D:    DB   $05   ; 
113E                             ; 
113E   DE           X113E:    DB   $DE   ; 
113F   FF           X113F:    DB   $FF   ; 113f + ffde = 111d = RUNS>
1140                             ; 
1140                             ; ---
1140                             ; 
1140   B8 04        L1140:    DW   L04B8   
1142                             ; 
1142   E1           L1142:    POP   HL   
1143   D5                     PUSH   DE   
1144   EB                     EX   DE,HL   
1145                             ; 
1145   D7                     RST   10H   ; push word DE
1146   42                     LD   B,D   
1147   4B                     LD   C,E   
1148   D1                     POP   DE   
1149   D5                     PUSH   DE   
114A   1B                     DEC   DE   
114B   1B                     DEC   DE   
114C                             ; 
114C   CD 9E 15               CALL   L159E   ; 
114F                             ; 
114F   D1                     POP   DE   
1150   C5                     PUSH   BC   
1151   C3 C3 0E               JP   L0EC3   ; 
1154                             ; 
1154                             ; --------------------
1154                             ; THE "IMMEDIATE" WORD
1154                             ; --------------------
1154                             ; (  --  )
1154                             ; The most recent word in the current vocabulary is made immediate, so that
1154                             ; it will execute even in compile mode.
1154                             ; 
1154   49 4D 4D 45 44 49 41 54 L1154:   DB   "IMMEDIAT"   ; "name field"
115C   C5                     DB   "E" + $80   
115D                             ; 
115D   24 11                  DW   L1124   ; "link field"
115F                             ; 
115F   09           L115F:    DB   $09   ; "name length field"
1160                             ; 
1160   C3 0E        L1160:    DW   L0EC3   ; "code field" - docolon
1162                             ; 
1162                             ; ---
1162                             ; 
1162   80 04        L1162:    DW   L0480   ; current
1164   B3 08                  DW   L08B3   ; @
1166   B3 08                  DW   L08B3   ; @
1168   0E 1A                  DW   L1A0E   ; end-forth.
116A                             ; 
116A   DF           L116A:    RST   18H   ; pop word DE
116B   EB                     EX   DE,HL   
116C   CB F6                  SET   6,(HL)   
116E   FD E9                  JP   (IY)   ; to "next".
1170                             ; 
1170                             ; ---------------------
1170                             ; THE "VOCABULARY" WORD
1170                             ; ---------------------
1170                             ; (  --  )
1170                             ; Defines a new vocabulary with the given name.
1170                             ; 
1170   56 4F 43 41 42 55 4C 41 52 L1170:   DB   "VOCABULAR"   ; "name field"
1179   D9                     DB   "Y" + $80   
117A                             ; 
117A   5F 11                  DW   L115F   ; "link field"
117C                             ; 
117C   0A           L117C:    DB   $0A   ; "name length field"
117D                             ; 
117D   85 10        L117D:    DW   L1085   ; "code field" - create and enclose
117F                             ; 
117F                             ; ---
117F                             ; 
117F   B5 11        L117F:    DW   L11B5   ; set context
1181   80 04                  DW   L0480   ; current
1183   B3 08                  DW   L08B3   ; @
1185   13 0E                  DW   L0E13   ; 2+
1187   4E 0F                  DW   L0F4E   ; ,
1189   88 06                  DW   L0688   ; stk-zero
118B   5F 0F                  DW   L0F5F   ; C,
118D   60 04                  DW   L0460   ; here
118F   11 10                  DW   L1011   ; stack next word
1191   35 3C                  DW   $3C35   ; (VOCLNK)
1193   6B 08                  DW   L086B   ; dup
1195   B3 08                  DW   L08B3   ; @
1197   4E 0F                  DW   L0F4E   ; ,
1199   C1 08                  DW   L08C1   ; !
119B   B6 04                  DW   L04B6   ; exit
119D                             ; 
119D                             ; ----------------------
119D                             ; THE "DEFINITIONS" WORD
119D                             ; ----------------------
119D                             ; (  --  )
119D                             ; The CONTEXT vocabulary is made the CURRENT vocabulary as well.
119D                             ; 
119D   44 45 46 49 4E 49 54 49 4F 4E L119D:   DB   "DEFINITION"   ; "name field"
11A7   D3                     DB   "S" + $80   
11A8                             ; 
11A8   7C 11                  DW   L117C   ; "link field"
11AA                             ; 
11AA   0B           L11AA:    DB   $0B   ; "name length field"
11AB                             ; 
11AB   AD 11        L11AB:    DW   L11AD   ; "code field"
11AD                             ; 
11AD                             ; ---
11AD                             ; 
11AD   2A 33 3C     L11AD:    LD   HL,($3C33)   ; CONTEXT
11B0   22 31 3C               LD   ($3C31),HL   ; CURRENT
11B3   FD E9                  JP   (IY)   ; to "next".
11B5                             ; 
11B5                             ; ---
11B5                             ; 
11B5   ED 53 33 3C  L11B5:    LD   ($3C33),DE   ; CONTEXT
11B9   FD E9                  JP   (IY)   ; to "next".
11BB                             ; 
11BB                             ; ---
11BB                             ; 
11BB                             ; -------------
11BB                             ; THE "IF" WORD
11BB                             ; -------------
11BB                             ; (n -- )
11BB                             ; Used in the form
11BB                             ; IF ... THEN
11BB                             ; or
11BB                             ; IF ... ELSE ... THEN
11BB                             ; In the first form, if n is non-zero then the words between IF and THEN
11BB                             ; are executed; otherwise they are skipped over.
11BB                             ; In the second form, if n is non-zero then the words between IF and ELSE
11BB                             ; are executed and those between ELSE and THEN are skipped over, while if
11BB                             ; n is zero then the words between IF and ELSE are skipped over and those
11BB                             ; between ELSE and THEN are executed.
11BB                             ; 
11BB   49           L11BB:    DB   "I"   ; "name field"
11BC   C6                     DB   "F" + $80   
11BD                             ; 
11BD   E0 13                  DW   L13E0   ; "link field"
11BF                             ; 
11BF   42           L11BF:    DB   $42   ; "name length field" (immediate word)
11C0                             ; 
11C0   08 11                  DW   L1108   ; "code field" - compile
11C2                             ; 
11C2                             ; ---
11C2                             ; 
11C2   83 12                  DW   L1283   ; ?branch
11C4   60 04                  DW   L0460   ; here
11C6                             ; 
11C6   4B 10                  DW   L104B   ; stk_data
11C8   02                     DB   $02   ; 2 locations required for jump length
11C9   83 0F                  DW   L0F83   ; allot2
11CB   B6 04                  DW   L04B6   ; exit
11CD                             ; 
11CD                             ; ----------------
11CD                             ; THE "WHILE" WORD
11CD                             ; ----------------
11CD                             ; (n -- )
11CD                             ; Used in BEGIN ... WHILE ... REPEAT. If n = 0 then skips over to just past
11CD                             ; REPEAT.
11CD                             ; 
11CD   57 48 49 4C  L11CD:    DB   "WHIL"   ; "name field"
11D1   C5                     DB   "E" + $80   
11D2                             ; 
11D2   BF 11                  DW   L11BF   ; "link field"
11D4                             ; 
11D4   45           L11D4:    DB   $45   ; "name length field" (immediate mode)
11D5                             ; 
11D5   08 11        L11D5:    DW   L1108   ; "code field" - compile
11D7                             ; 
11D7                             ; ---
11D7                             ; 
11D7   88 12                  DW   L1288   ; ?branch
11D9                             ; 
11D9   D8 12                  DW   L12D8   ; check-for
11DB   01                     DB   $01   ;  1
11DC   60 04                  DW   L0460   ; here
11DE   4B 10                  DW   L104B   ; stk-data
11E0   04                     DB   $04   ;  four
11E1   83 0F                  DW   L0F83   ; allot
11E3   B6 04                  DW   L04B6   ; exit
11E5                             ; 
11E5                             ; ---------------
11E5                             ; THE "ELSE" WORD
11E5                             ; ---------------
11E5                             ; (  --  )
11E5                             ; Used with IF and THEN.
11E5                             ; 
11E5   45 4C 53     L11E5:    DB   "ELS"   ; "name field"
11E8   C5                     DB   "E" + $80   
11E9                             ; 
11E9   D4 11                  DW   L11D4   ; "link field"
11EB                             ; 
11EB   44           L11EB:    DB   $44   ; "name length field" (immediate mode)
11EC                             ; 
11EC   08 11        L11EC:    DW   L1108   ; "code field" - compile
11EE                             ; 
11EE                             ; ---
11EE                             ; 
11EE   71 12                  DW   L1271   ; branch
11F0                             ; 
11F0   D8 12                  DW   L12D8   ; check-for
11F2   02                     DB   $02   ; two
11F3   83 0F                  DW   L0F83   ; allot2
11F5   25 12                  DW   L1225   ; ?
11F7   60 04                  DW   L0460   ; here
11F9   29 0E                  DW   L0E29   ; 2-
11FB   4B 10                  DW   L104B   ; stk-data
11FD   02                     DB   $02   ; two
11FE   B6 04                  DW   L04B6   ; exit
1200                             ; 
1200                             ; ---------------
1200                             ; THE "THEN" WORD
1200                             ; ---------------
1200                             ; Used with IF.
1200                             ; 
1200   54 48 45     L1200:    DB   "THE"   ; "name field"
1203   CE                     DB   "N" + $80   
1204                             ; 
1204   EB 11                  DW   L11EB   ; "link field"
1206                             ; 
1206   44           L1206:    DB   $44   ; "name length field" (immediate mode)
1207                             ; 
1207   08 11        L1207:    DW   L1108   ; "code field" - compile
1209                             ; 
1209                             ; ---
1209                             ; 
1209   A4 12                  DW   L12A4   ; end?
120B                             ; 
120B   D8 12                  DW   L12D8   ; check-for
120D   02                     DB   $02   
120E   25 12                  DW   L1225   ; ?
1210   B6 04                  DW   L04B6   ; exit
1212                             ; 
1212                             ; ---------------
1212                             ; THE "BEGIN" WORD
1212                             ; ---------------
1212                             ; (  --  )
1212                             ; Used with either UNTIL or WHILE...REPEAT.
1212                             ; 
1212   42 45 47 49  L1212:    DB   "BEGI"   ; "name field"
1216   CE                     DB   "N" + $80   
1217                             ; 
1217   06 12                  DW   L1206   ; "link field"
1219                             ; 
1219   45           L1219:    DB   $45   ; "name length field" (immediate mode)
121A                             ; 
121A   08 11        L121A:    DW   L1108   ; "code field" - compile
121C                             ; 
121C                             ; ---
121C                             ; 
121C   9F 12                  DW   L129F   
121E   60 04                  DW   L0460   ; here
1220   4B 10                  DW   L104B   ; stk_data
1222   01                     DB   $01   ; 1
1223   B6 04                  DW   L04B6   ; exit
1225                             ; 
1225                             ; -----------------------
1225                             ; The "???" Internal Word
1225                             ; -----------------------
1225                             ; 
1225   C3 0E        L1225:    DW   L0EC3   ; headerless "code field" - docolon
1227                             ; 
1227                             ; ---
1227                             ; 
1227   6B 08                  DW   L086B   ; dup
1229   60 04                  DW   L0460   ; here
122B   85 08                  DW   L0885   ; swap
122D   E1 0D                  DW   L0DE1   ; -
122F   1F 0E                  DW   L0E1F   ; 1-
1231   85 08                  DW   L0885   ; swap
1233   C1 08                  DW   L08C1   ; !
1235   B6 04                  DW   L04B6   ; exit
1237                             ; 
1237                             ; -----------------------
1237                             ; The "???" Internal Word
1237                             ; -----------------------
1237                             ; 
1237   C3 0E        L1237:    DW   L0EC3   ; headerless "code field" - docolon
1239                             ; 
1239                             ; ---
1239                             ; 
1239   60 04                  DW   L0460   ; here
123B   E1 0D                  DW   L0DE1   ; -
123D   1F 0E                  DW   L0E1F   ; 1-
123F   4E 0F                  DW   L0F4E   ; ,
1241   B6 04                  DW   L04B6   ; exit
1243                             ; 
1243                             ; 
1243                             ; -----------------
1243                             ; THE "REPEAT" WORD
1243                             ; -----------------
1243                             ; (  --  )
1243                             ; Used in construction BEGIN ... WHILE .. REPEAT.
1243                             ; Causes a jump back to just after BEGIN.
1243                             ; 
1243                             ; 
1243   52 45 50 45 41 L1243:   DB   "REPEA"   ; "name field"
1248   D4                     DB   "T" + $80   
1249                             ; 
1249   19 12                  DW   L1219   ; "link field"
124B                             ; 
124B   46           L124B:    DB   $46   ; "name length field" (immediate mode)
124C                             ; 
124C   08 11        L124C:    DW   L1108   ; "code field" - compile
124E                             ; 
124E                             ; ---
124E                             ; 
124E   76 12        L124E:    DW   L1276   ; branch
1250   D8 12        L1250:    DW   L12D8   ; check_for
1252   04                     DB   $04   ; four
1253   85 08                  DW   L0885   ; swap
1255   37 12                  DW   L1237   ; ?
1257   25 12                  DW   L1225   ; ?
1259   B6 04                  DW   L04B6   ; exit
125B                             ; 
125B                             ; ----------------
125B                             ; THE "UNTIL" WORD
125B                             ; ----------------
125B                             ; (n -- )
125B                             ; Used in BEGIN ... UNTIL.
125B                             ; Loops back to BEGIN if n = 0
125B                             ; 
125B   55 4E 54 49  L125B:    DB   "UNTI"   ; "name field"
125F   CC                     DB   "L" + $80   
1260                             ; 
1260   4B 12                  DW   L124B   ; "link field"
1262                             ; 
1262   45           L1262:    DB   $45   ; "name length field" (immediate mode)
1263                             ; 
1263   08 11        L1263:    DW   L1108   ; "code field" - compile
1265                             ; 
1265                             ; ---
1265                             ; 
1265   8D 12                  DW   L128D   ; ?branch
1267   D8 12                  DW   L12D8   ; check_for
1269   01                     DB   $01   ; 
126A   37 12                  DW   L1237   ; ?
126C   B6 04                  DW   L04B6   ; exit
126E                             ; 
126E                             ; ---
126E                             ; 
126E   02           X126E:    DB   $02   ; 
126F                             ; 
126F   75           X126F:    DB   $75   ; 
1270   FF           X1270:    DB   $FF   ; 1270 + ff75 = 11e5 = ELSE
1271                             ; 
1271                             ; ---
1271                             ; 
1271                             ; 
1271   78 12        L1271:    DW   L1278   ; ?
1273                             ; 
1273                             ; ---
1273   02           X1273:    DB   $02   ; 
1274                             ; 
1274   CE           X1274:    DB   $CE   ; 
1275   FF           X1275:    DB   $FF   ; 1275 + ffce = 1243 = REPEAT
1276                             ; 
1276                             ; --------------------------
1276                             ; The "branch" Internal Word
1276                             ; --------------------------
1276                             ; 
1276   78 12        L1276:    DW   L1278   ; headerless "code field"
1278                             ; 
1278                             ; ---
1278                             ; 
1278   E1           L1278:    POP   HL   ; drop next word pointer
1279   5E                     LD   E,(HL)   ; read the 16-bit offset
127A   23                     INC   HL   ; that is
127B   56                     LD   D,(HL)   ; stored there.
127C                             ; 
127C   19           L127C:    ADD   HL,DE   ; add to current address.
127D                             ; 
127D   C3 BA 04               JP   L04BA   ; jump back into address loop so that
1280                             ; a new address gets stacked as IP.
1280                             ; 
1280                             ; ---
1280                             ; 
1280   02           X1280:    DB   $02   ; 
1281                             ; 
1281   39           X1281:    DB   $39   ; 
1282   FF           X1282:    DB   $FF   ; 1282 + ff39 = 11bb = IF
1283                             ; 
1283                             ; ---
1283                             ; 
1283   8F 12        L1283:    DW   L128F   ; from IF, convert, line, min, etc.
1285                             ; 
1285                             ; ---
1285                             ; 
1285   02           X1285:    DB   $02   ; 
1286                             ; 
1286   46           X1286:    DB   $46   ; 
1287   FF           X1287:    DB   $FF   ; 1287 + ff46 = 11cd = WHILE
1288                             ; 
1288                             ; ---
1288                             ; 
1288   8F 12        L1288:    DW   L128F   ; from WHILE
128A                             ; 
128A                             ; ---
128A                             ; 
128A   02           X128A:    DB   $02   ; 
128B                             ; 
128B   CF           X128B:    DB   $CF   ; 
128C   FF           X128C:    DB   $FF   ; 128c + ffcf = 125b = UNTIL
128D                             ; 
128D                             ; ---------------------------
128D                             ; The "?branch" Internal Word
128D                             ; ---------------------------
128D                             ; 
128D   8F 12        L128D:    DW   L128F   ; headerless "code field"
128F                             ; 
128F                             ; ---
128F                             ; 
128F   CD 4E 08     L128F:    CALL   L084E   ; stk_to_bc
1292                             ; 
1292   78                     LD   A,B   ; test for
1293   B1                     OR   C   ; zero
1294                             ; 
1294                             ; -> from +loop
1294   28 E2        L1294:    JR   Z,L1278   ; make the jump to "branch" if zero.
1296                             ; 
1296   E1                     POP   HL   ; else drop the pointer.
1297   23                     INC   HL   ; step over.
1298   23                     INC   HL   ; the jump bytes
1299   C3 BA 04               JP   L04BA   ; jump back into address loop so that
129C                             ; a new address gets stacked as IP.
129C                             ; 
129C                             ; ---
129C                             ; 
129C   00           X129C:    DB   $00   ; 
129D   74           X129D:    DB   $74   ; 
129E   FF           X129E:    DB   $FF   ; 129e + ff74 = 1212 = BEGIN
129F                             ; 
129F                             ; ---
129F                             ; 
129F   B9 04        L129F:    DW   L04B9   ; forth
12A1                             ; 
12A1                             ; ---
12A1                             ; 
12A1   00           X12A1:    DB   $00   ; 
12A2   5D           X12A2:    DB   $5D   ; 
12A3   FF           X12A3:    DB   $FF   ; 12a3 + ff5d = 1200 = THEN
12A4                             ; 
12A4                             ; ---
12A4                             ; 
12A4   B9 04        L12A4:    DW   L04B9   
12A6                             ; 
12A6                             ; -------------
12A6                             ; THE "DO" WORD
12A6                             ; -------------
12A6                             ; (limit, initial value -- )
12A6                             ; Sets up a DO loop, initializing the loop counter to the initial value.
12A6                             ; The limit and loop counter are stored on the return stack.
12A6                             ; See LOOP and +LOOP.
12A6                             ; 
12A6   44           L12A6:    DB   "D"   ; "name field"
12A7   CF                     DB   "O" + $80   
12A8                             ; 
12A8   62 12                  DW   L1262   ; "link field"
12AA                             ; 
12AA   42           L12AA:    DB   $42   ; "name length field" (immediate mode)
12AB                             ; 
12AB   08 11        L12AB:    DW   L1108   ; "code field" - compile
12AD                             ; 
12AD                             ; ---
12AD                             ; 
12AD   23 13                  DW   L1323   ; shuffle
12AF   60 04                  DW   L0460   ; here
12B1   4B 10                  DW   L104B   ; stk_data
12B3   03                     DB   $03   ; 3                     marker byte.
12B4   B6 04                  DW   L04B6   ; exit
12B6                             ; 
12B6                             ; ---------------
12B6                             ; THE "LOOP" WORD
12B6                             ; ---------------
12B6                             ; (  --  )
12B6                             ; Like +LOOP (below) but the number added onto the loop counter is 1.
12B6                             ; 
12B6   4C 4F 4F     L12B6:    DB   "LOO"   ; "name field"
12B9   D0                     DB   "P" + $80   
12BA                             ; 
12BA   AA 12                  DW   L12AA   ; "link field"
12BC                             ; 
12BC   44           L12BC:    DB   $44   ; "name length field" (immediate mode)
12BD                             ; 
12BD   08 11        L12BD:    DW   L1108   ; "code field" - compile
12BF                             ; 
12BF                             ; ---
12BF                             ; 
12BF   32 13                  DW   L1332   ; shuffle more
12C1                             ; 
12C1   D8 12        L12C1:    DW   L12D8   ; check-for
12C3   03                     DB   $03   ; 3                     marker byte
12C4   37 12                  DW   L1237   ; ?
12C6   B6 04                  DW   L04B6   ; exit
12C8                             ; 
12C8                             ; ----------------
12C8                             ; THE "+LOOP" WORD
12C8                             ; ----------------
12C8                             ; (n -- )
12C8                             ; Used with DO. Adds n to the loop counter, and loops back if the loop counter
12C8                             ; is now less than the limit (if n >= 0) or greater than the limit (if n < 0).
12C8                             ; 
12C8   2B 4C 4F 4F  L12C8:    DB   "+LOO"   ; "name field"
12CC   D0                     DB   "P" + $80   
12CD                             ; 
12CD   BC 12                  DW   L12BC   ; "link field"
12CF                             ; 
12CF   45           L12CF:    DB   $45   ; "name length field" (immediate mode)
12D0                             ; 
12D0   08 11        L12D0:    DW   L1108   ; "code field" - compile
12D2                             ; 
12D2                             ; ---
12D2                             ; 
12D2   3C 13        L12D2:    DW   L133C   ; ?
12D4   76 12                  DW   L1276   ; branch
12D6                             ; 
12D6   EA FF        L12D6:    DW   $FFEA   ; back to L12C1
12D8                             ; 
12D8                             ; -----------------------------
12D8                             ; The "check-for" Internal Word
12D8                             ; -----------------------------
12D8                             ; Checks for expected marker byte which indicates stack is balanced and that
12D8                             ; a previous mandatory word was present.
12D8                             ; 
12D8   DA 12        L12D8:    DW   L12DA   ; headerless "code field"
12DA                             ; 
12DA                             ; ---
12DA                             ; 
12DA   DF           L12DA:    RST   18H   ; pop word DE
12DB   E1                     POP   HL   ; 
12DC   7E                     LD   A,(HL)   ; 
12DD   23                     INC   HL   ; 
12DE   E5                     PUSH   HL   ; 
12DF   93                     SUB   E   ; 
12E0   B2                     OR   D   ; 
12E1                             ; 
12E1   28 4A                  JR   Z,L132D   ; to next via jp (iy).
12E3                             ; 
12E3                             ; else...
12E3                             ; 
12E3   E7                     RST   20H   ; Error 5
12E4   05                     DB   $05   ; Word is not properly structured.
12E5                             ; 
12E5                             ; ------------
12E5                             ; THE "I" WORD
12E5                             ; ------------
12E5                             ; ( -- loop counter)
12E5                             ; Copies the top of the return stack to the data stack. This will be either
12E5                             ; the loop counter for the innermost DO...LOOP, or the number most recently
12E5                             ; transferred by >R.
12E5                             ; 
12E5                             ; 
12E5   C9           L12E5:    DB   "I" + $80   ; "name field"
12E6                             ; 
12E6   AA 11                  DW   L11AA   ; "link field"
12E8                             ; 
12E8   01           L12E8:    DB   $01   ; "name length field"
12E9                             ; 
12E9   EB 12        L12E9:    DW   L12EB   ; "code field"
12EB                             ; 
12EB                             ; ---
12EB                             ; 
12EB   C1           L12EB:    POP   BC   ; pop return address
12EC   D1                     POP   DE   ; pop the loop counter to DE.
12ED   D5                     PUSH   DE   ; now restore the stack
12EE   C5                     PUSH   BC   ; exactly as it was.
12EF                             ; 
12EF   D7                     RST   10H   ; push Data Word DE - inner loop counter
12F0                             ; 
12F0   FD E9                  JP   (IY)   ; to "next".
12F2                             ; 
12F2                             ; -------------
12F2                             ; THE "I"' WORD
12F2                             ; -------------
12F2                             ; ( -- limit)
12F2                             ; Copies the second number down on the return stack to the data stack
12F2                             ; (so in a DO loop it copies  the limit of the loop).
12F2                             ; 
12F2   49           L12F2:    DB   "I"   ; "name field"
12F3   A7                     DB   $A7   ; "'" + $80
12F4                             ; 
12F4   E8 12                  DW   L12E8   ; "link field"
12F6                             ; 
12F6   02           L12F6:    DB   $02   ; "name length field"
12F7                             ; 
12F7   F9 12        L12F7:    DW   L12F9   ; "code field"
12F9                             ; 
12F9                             ; ---
12F9                             ; 
12F9   21 04 00     L12F9:    LD   HL,$0004   ; two bytes per entry.
12FC   18 09                  JR   L1307   ; forward to use the "J" indexing
12FE                             ; routine
12FE                             ; 
12FE                             ; ------------
12FE                             ; THE "J" WORD
12FE                             ; ------------
12FE                             ; ( -- loop counter)
12FE                             ; Copies the third entry on the return stack to the data stack.
12FE                             ; This will be either the loop counter for the second innermost DO loop
12FE                             ; or the number put on the return stack by the most recent >R.
12FE                             ; 
12FE   CA           L12FE:    DB   "J" + $80   ; "name field"
12FF                             ; 
12FF   F6 12                  DW   L12F6   ; "link field"
1301                             ; 
1301   01           L1301:    DB   $01   ; "name length field"
1302                             ; 
1302   04 13        L1302:    DW   L1304   ; "code field"
1304                             ; 
1304                             ; ---
1304                             ; 
1304   21 06 00     L1304:    LD   HL,$0006   ; two bytes per entry
1307                             ; 
1307                             ; -> I' joins here with HL=4
1307                             ; 
1307   39           L1307:    ADD   HL,SP   ; index the stack pointer.
1308   5E                     LD   E,(HL)   ; low order byte to E
1309   23                     INC   HL   ; address high byte.
130A   56                     LD   D,(HL)   ; DE now holds a copy of the required
130B                             ; entry from the Return Stack
130B                             ; 
130B   D7                     RST   10H   ; stack Data Word DE
130C                             ; 
130C   FD E9                  JP   (IY)   ; to "next".
130E                             ; 
130E                             ; ----------------
130E                             ; THE "LEAVE" WORD
130E                             ; ----------------
130E                             ; (  --  )
130E                             ; Forces termination of a DO loop at the next LOOP or +LOOP by setting the
130E                             ; loop counter equal to the limit.
130E                             ; 
130E   4C 45 41 56  L130E:    DB   "LEAV"   ; "name field"
1312   C5                     DB   "E" + $80   
1313                             ; 
1313   01 13                  DW   L1301   ; "link field"
1315                             ; 
1315   05           L1315:    DB   $05   ; "name length field"
1316                             ; 
1316   18 13        L1316:    DW   L1318   ; "code field"
1318                             ; 
1318                             ; ---
1318                             ; 
1318   C1           L1318:    POP   BC   ; pop return address to BC.
1319   E1                     POP   HL   ; pop the loop counter.
131A   E1                     POP   HL   ; now the limit.
131B   E5                     PUSH   HL   ; push unaltered limit.
131C   E5                     PUSH   HL   ; push counter - now limit.
131D   C5                     PUSH   BC   ; restore return address.
131E                             ; 
131E   FD E9                  JP   (IY)   ; to "next".
1320                             ; 
1320                             ; ---
1320                             ; 
1320                             ; 
1320   00           X1320:    DB   $00   ; 
1321   84           X1321:    DB   $84   ; 
1322   FF           X1322:    DB   $FF   ; 1322 + ff84 = 12a6 = DO
1323                             ; 
1323                             ; -----------------------
1323                             ; The "???" Internal Word
1323                             ; -----------------------
1323                             ; 
1323   25 13        L1323:    DW   L1325   ; headerless "code field"
1325                             ; 
1325                             ; ---
1325                             ; 
1325   CD 4E 08     L1325:    CALL   L084E   ; stk_to_bc
1328   DF                     RST   18H   ; pop word DE
1329   E1                     POP   HL   
132A   D5                     PUSH   DE   
132B                             ; 
132B   C5           L132B:    PUSH   BC   
132C   E5                     PUSH   HL   
132D                             ; 
132D   FD E9        L132D:    JP   (IY)   ; to "next".
132F                             ; 
132F                             ; ---
132F                             ; 
132F   02           X132F:    DB   $02   ; 
1330   85           X1330:    DB   $85   ; 
1331   FF           X1331:    DB   $FF   ; 1331 + ff85 = 12b6 = LOOP
1332                             ; 
1332                             ; -----------------------
1332                             ; The "???" Internal Word
1332                             ; -----------------------
1332                             ; 
1332   34 13        L1332:    DW   L1334   ; headerless "code field"
1334                             ; 
1334                             ; ---
1334                             ; 
1334   11 01 00     L1334:    LD   DE,$0001   
1337   18 06                  JR   L133F   ; forward =>
1339                             ; 
1339                             ; ---
1339                             ; 
1339   02           X1339:    DB   $02   
133A   8D           X133A:    DB   $8D   
133B   FF           X133B:    DB   $FF   
133C                             ; 
133C                             ; -----------------------
133C                             ; The "???" Internal Word
133C                             ; -----------------------
133C                             ; loop counter + n
133C                             ; Note. ADC HL,DE is used in preference to ADD HL,DE as affects P/O flag
133C                             ; 
133C   3E 13        L133C:    DW   L133E   ; headerless "code field"
133E                             ; 
133E                             ; ---
133E                             ; 
133E   DF           L133E:    RST   18H   ; pop word DE - number to be added (n)
133F                             ; =>
133F   C1           L133F:    POP   BC   ; pop return address to BC.
1340   E1                     POP   HL   ; loop counter to HL.
1341   A7                     AND   A   ; clear carry.
1342   ED 5A                  ADC   HL,DE   ; add the number specified.
1344   7A                     LD   A,D   ; save MSB of (n) in A.
1345   D1                     POP   DE   ; now pop the limit to DE.
1346   37                     SCF      ; set carry.
1347   EA 58 13               JP   PE,L1358   ; jump forward with overflow.
134A                             ; 
134A   D5                     PUSH   DE   ; push limit
134B   E5                     PUSH   HL   ; push adjusted counter.
134C   07                     RLCA      ; now test sign of number (n)
134D   30 01                  JR   NC,L1350   ; 
134F                             ; 
134F   EB                     EX   DE,HL   
1350                             ; 
1350   CD 99 0C     L1350:    CALL   L0C99   ; 
1353                             ; 
1353   3F                     CCF      
1354                             ; 
1354   30 02                  JR   NC,L1358   ; 
1356                             ; 
1356   E1                     POP   HL   
1357   E1                     POP   HL   
1358                             ; 
1358   C5           L1358:    PUSH   BC   
1359   9F                     SBC   A,A   
135A   C3 94 12               JP   L1294   ; jump to branch on zero.
135D                             ; 
135D                             ; ------------
135D                             ; THE "(" WORD
135D                             ; ------------
135D                             ; Starts a comment terminated by ")"
135D                             ; 
135D   A8           L135D:    DB   "(" + $80   ; "name field"
135E                             ; 
135E   D4 13                  DW   L13D4   ; "link field"
1360                             ; 
1360   41           L1360:    DB   $41   ; "name length field" (immediate mode)
1361                             ; 
1361   08 11        L1361:    DW   L1108   ; "code field" - compile
1363                             ; 
1363                             ; ---
1363                             ; 
1363   79 13        L1363:    DW   L1379   ; 
1365   4B 10                  DW   L104B   ; stk_data
1367                             ; 
1367   29                     DB   $29   ; character ")"         - delimiter
1368                             ; 
1368   60 04        L1368:    DW   L0460   ; here
136A   85 08                  DW   L0885   ; swap
136C   83 0F                  DW   L0F83   ; allot2
136E   9F 13                  DW   L139F   ; find)
1370   85 08                  DW   L0885   ; swap
1372   C1 08                  DW   L08C1   ; !
1374                             ; 
1374   B6 04                  DW   L04B6   ; exit
1376                             ; 
1376                             ; ---
1376                             ; 
1376   FF           X1376:    DB   $FF   ; 
1377   E5           X1377:    DB   $E5   ; 
1378   FF           X1378:    DB   $FF   ; 1378 + ffe5 = 135d = "("
1379                             ; 
1379                             ; -----------------------
1379                             ; The "???" Internal Word
1379                             ; -----------------------
1379                             ; 
1379   7B 13        L1379:    DW   L137B   ; headerless "code field"
137B                             ; 
137B                             ; ---
137B                             ; 
137B   E1           L137B:    POP   HL   
137C   5E                     LD   E,(HL)   
137D   23                     INC   HL   
137E   56                     LD   D,(HL)   
137F                             ; 
137F   13                     INC   DE   
1380                             ; 
1380   C3 7C 12               JP   L127C   ; 
1383                             ; 
1383                             ; -------------
1383                             ; THE "."" WORD
1383                             ; -------------
1383                             ; (  --  )
1383                             ; Prints the following string terminated by ".
1383                             ; 
1383   2E           L1383:    DB   "."   ; "name field"
1384   A2                     DB   $22 + $80   
1385                             ; 
1385   60 13                  DW   L1360   ; "link field"
1387                             ; 
1387   42           L1387:    DB   $42   ; "name length field" (immediate mode)
1388                             ; 
1388   08 11        L1388:    DW   L1108   ; "code field" - compile
138A                             ; 
138A                             ; ---
138A                             ; 
138A   96 13        L138A:    DW   L1396   ; pr_embedded string.
138C   4B 10                  DW   L104B   ; stk_data
138E   22                     DB   $22   ; """                   - delimiter
138F                             ; 
138F   76 12                  DW   L1276   ; branch
1391   D6 FF        L1391:    DW   $FFD6   ; back to 1368 (1392+$FFD6)
1393                             ; same routine as for matching comments
1393                             ; 
1393                             ; ---
1393                             ; 
1393   FF           X1393:    DB   $FF   ; 
1394   EE           X1394:    DB   $EE   ; 
1395   FF           X1395:    DB   $FF   ; 1395 + ffee = 1383 = ."
1396                             ; 
1396                             ; -----------------------
1396                             ; The "???" Internal Word
1396                             ; -----------------------
1396                             ; print string embedded in Dictionary
1396                             ; 
1396   98 13        L1396:    DW   L1398   ; headerless "code field"
1398                             ; 
1398                             ; ---
1398                             ; 
1398   D1           L1398:    POP   DE   
1399   CD 79 09               CALL   L0979   ; pr_string1
139C   D5                     PUSH   DE   
139D   FD E9                  JP   (IY)   ; to "next".
139F                             ; 
139F                             ; -----------------------
139F                             ; The "???" Internal Word
139F                             ; -----------------------
139F                             ; enclose comment
139F                             ; comments may be multiple
139F                             ; e.g. : SV ( system) ( variables) CLS BEGIN 0 0 AT 15360 80 TYPE 0 UNTIL ;
139F                             ; 
139F                             ; 
139F   A1 13        L139F:    DW   L13A1   ; headerless "code field"
13A1                             ; 
13A1                             ; ---
13A1                             ; 
13A1   DF           L13A1:    RST   18H   ; pop word DE
13A2   D5                     PUSH   DE   ; save delimiter.
13A3                             ; 
13A3   CD E1 05               CALL   L05E1   ; find the ")" delimiter
13A6                             ; 
13A6   62                     LD   H,D   
13A7   6B                     LD   L,E   
13A8   09                     ADD   HL,BC   
13A9   7E                     LD   A,(HL)   
13AA   E1                     POP   HL   ; pop the delimiter.
13AB   BD                     CP   L   
13AC   28 0A                  JR   Z,L13B8   ; forward with a match.         =->
13AE                             ; 
13AE   EB                     EX   DE,HL   ; 
13AF   D7                     RST   10H   ; push word DE
13B0   11 78 05               LD   DE,$0578   ; addr retype?
13B3                             ; 
13B3   CD 15 18               CALL   L1815   ; pr2
13B6                             ; 
13B6   18 E9                  JR   L13A1   ; loop back
13B8                             ; 
13B8                             ; ---
13B8                             ; =->
13B8                             ; 
13B8   D5           L13B8:    PUSH   DE   
13B9   C5                     PUSH   BC   
13BA   2A 37 3C               LD   HL,($3C37)   ; STKBOT
13BD                             ; 
13BD   CD 9E 0F               CALL   L0F9E   ; routine MAKE ROOM
13C0                             ; 
13C0   C1                     POP   BC   
13C1   D1                     POP   DE   
13C2   D5                     PUSH   DE   
13C3   C5                     PUSH   BC   
13C4   EB                     EX   DE,HL   
13C5   ED B0                  LDIR      ; copy comment to dictionary.
13C7   C1                     POP   BC   
13C8   50                     LD   D,B   
13C9   59                     LD   E,C   
13CA   D7                     RST   10H   ; push word DE
13CB   D1                     POP   DE   
13CC                             ; 
13CC   CD DA 07               CALL   L07DA   ; 
13CF                             ; 
13CF   FD E9                  JP   (IY)   ; to "next".
13D1                             ; 
13D1                             ; ------------
13D1                             ; THE "[" WORD
13D1                             ; ------------
13D1                             ; (  --  )
13D1                             ; Enters interpret mode.
13D1                             ; 
13D1   DB           L13D1:    DB   "[" + $80   ; "name field"
13D2                             ; 
13D2   CF 12                  DW   L12CF   ; "link field"
13D4                             ; 
13D4   41           L13D4:    DB   $41   ; "name length field" (immediate mode)
13D5                             ; 
13D5   D7 13        L13D5:    DW   L13D7   ; "code field"
13D7                             ; 
13D7                             ; ---
13D7                             ; 
13D7   DD CB 3E B6  L13D7:    RES   6,(IX+$3E)   ; FLAGS
13DB   FD E9                  JP   (IY)   ; to "next".
13DD                             ; 
13DD                             ; ------------
13DD                             ; THE "]" WORD
13DD                             ; ------------
13DD                             ; (  --  )
13DD                             ; Enters compile mode.
13DD                             ; 
13DD   DD           L13DD:    DB   "]" + $80   ; "name field"
13DE                             ; 
13DE   15 13                  DW   L1315   ; "link field"
13E0                             ; 
13E0   01           L13E0:    DB   $01   ; "name length field"
13E1                             ; 
13E1   E3 13        L13E1:    DW   L13E3   ; "code field"
13E3                             ; 
13E3                             ; ---
13E3                             ; 
13E3   DD CB 3E F6  L13E3:    SET   6,(IX+$3E)   ; FLAGS
13E7   FD E9                  JP   (IY)   ; to "next".
13E9                             ; 
13E9                             ; 
13E9                             ; ---------------
13E9                             ; THE "EXIT" WORD
13E9                             ; ---------------
13E9                             ; (  --  )
13E9                             ; Exits immediately from the word in whose definition it is contained.
13E9                             ; Cannot be used between DO and LOOP or +LOOP, nor between >R and R>.
13E9                             ; 
13E9   45 58 49     L13E9:    DB   "EXI"   ; "name field"
13EC   D4                     DB   "T" + $80   
13ED                             ; 
13ED   87 13                  DW   L1387   ; "link field"
13EF                             ; 
13EF   04           L13EF:    DB   $04   ; "name length field"
13F0                             ; 
13F0   B8 04        L13F0:    DW   L04B8   ; "code field"
13F2                             ; 
13F2                             ; -------------------
13F2                             ; THE "REDEFINE" WORD
13F2                             ; -------------------
13F2                             ; REDEFINE name
13F2                             ; (  --  )
13F2                             ; Takes word "name" and replaces it with the most recent word in the
13F2                             ; dictionary. Updates entire dictionary to take changes into account.
13F2                             ; Most commonly used as
13F2                             ;  EDIT name
13F2                             ;  REDEFINE name
13F2                             ; 
13F2   52 45 44 45 46 49 4E L13F2:   DB   "REDEFIN"   ; "name field"
13F9   C5                     DB   "E" + $80   
13FA                             ; 
13FA   EF 13                  DW   L13EF   ; "link field"
13FC                             ; 
13FC   08           L13FC:    DB   $08   ; "name length field"
13FD                             ; 
13FD   FF 13        L13FD:    DW   L13FF   ; "code field"
13FF                             ; 
13FF                             ; ---
13FF                             ; 
13FF   CD 2E 0F     L13FF:    CALL   L0F2E   ; blank stack
1402                             ; 
1402   2A 31 3C               LD   HL,($3C31)   ; CURRENT
1405                             ; 
1405   5E                     LD   E,(HL)   
1406   23                     INC   HL   
1407   56                     LD   D,(HL)   
1408                             ; 
1408   EB                     EX   DE,HL   ; transfer value to HL
1409   23                     INC   HL   
140A   22 05 27               LD   ($2705),HL   ; store in pad
140D                             ; 
140D   E5                     PUSH   HL   ; (*)
140E                             ; 
140E   CD C0 15               CALL   L15C0   ; get "name field" address
1411                             ; 
1411   22 0D 27               LD   ($270D),HL   ; name field addr
1414   ED 43 07 27            LD   ($2707),BC   ; parameter field addr
1418   ED 53 0B 27            LD   ($270B),DE   ; length field value
141C                             ; 
141C   2A 37 3C               LD   HL,($3C37)   ; STKBOT
141F   ED 52                  SBC   HL,DE   
1421   C2 DA 14               JP   NZ,L14DA   ; forward if not matched to Error 11.
1424                             ; 
1424   D1                     POP   DE   ; (*)
1425                             ; 
1425   D7                     RST   10H   ; push word DE
1426                             ; 
1426   CD B9 04               CALL   L04B9   ; forth
1429                             ; 
1429   10 16        L1429:    DW   L1610   ; prvcur
142B   3D 06                  DW   L063D   ; find
142D   0E 1A                  DW   L1A0E   ; end-forth.
142F                             ; 
142F                             ; ---
142F                             ; 
142F   DF           L1425:    RST   18H   ; pop word DE
1430   21 AF C3               LD   HL,$C3AF   
1433   19                     ADD   HL,DE   
1434   D2 CF 14               JP   NC,L14CF   ; 
1437                             ; 
1437   EB                     EX   DE,HL   
1438   22 03 27               LD   ($2703),HL   
143B                             ; 
143B   CD C0 15               CALL   L15C0   ; get "name field" address
143E                             ; 
143E   22 01 27               LD   ($2701),HL   
1441                             ; 
1441   E5           L1441:    PUSH   HL   
1442   ED 53 09 27            LD   ($2709),DE   
1446   78                     LD   A,B   
1447   B1                     OR   C   
1448   ED 5B 07 27            LD   DE,($2707)   
144C   28 04                  JR   Z,L1452   ; 
144E                             ; 
144E   7A                     LD   A,D   
144F   B3                     OR   E   
1450   28 7D                  JR   Z,L14CF   ; 
1452                             ; 
1452   E1           L1452:    POP   HL   
1453   ED 4B 0D 27            LD   BC,($270D)   
1457   ED 42                  SBC   HL,BC   
1459   EB                     EX   DE,HL   
145A   19                     ADD   HL,DE   
145B   22 07 27               LD   ($2707),HL   
145E   2A 0B 27               LD   HL,($270B)   
1461   19                     ADD   HL,DE   
1462   ED 4B 09 27            LD   BC,($2709)   
1466   A7                     AND   A   
1467   ED 42                  SBC   HL,BC   
1469   22 0B 27               LD   ($270B),HL   
146C   01 2E 00               LD   BC,$002E   ; 46d
146F   09                     ADD   HL,BC   
1470   CB 7C                  BIT   7,H   
1472   20 0B                  JR   NZ,L147F   ; 
1474                             ; 
1474   ED 4B 3B 3C            LD   BC,($3C3B)   ; SPARE
1478   09                     ADD   HL,BC   
1479   38 54                  JR   C,L14CF   ; 
147B                             ; 
147B   ED 72                  SBC   HL,SP   
147D   30 50                  JR   NC,L14CF   ; 
147F                             ; 
147F   2A 03 27     L147F:    LD   HL,($2703)   
1482   E5                     PUSH   HL   
1483   2B                     DEC   HL   
1484   2B                     DEC   HL   
1485   46                     LD   B,(HL)   
1486   2B                     DEC   HL   
1487   4E                     LD   C,(HL)   
1488   2A 05 27               LD   HL,($2705)   
148B   E5                     PUSH   HL   
148C   2B                     DEC   HL   
148D   2B                     DEC   HL   
148E   70                     LD   (HL),B   
148F   2B                     DEC   HL   
1490   71                     LD   (HL),C   
1491   E1                     POP   HL   
1492   19                     ADD   HL,DE   
1493   C1                     POP   BC   
1494   A7                     AND   A   
1495   ED 42                  SBC   HL,BC   
1497   22 05 27               LD   ($2705),HL   
149A   ED 5B 01 27            LD   DE,($2701)   
149E   2A 09 27               LD   HL,($2709)   
14A1   A7                     AND   A   
14A2   ED 52                  SBC   HL,DE   
14A4   44                     LD   B,H   
14A5   4D                     LD   C,L   
14A6   D5                     PUSH   DE   
14A7   C5                     PUSH   BC   
14A8                             ; 
14A8   CD DC 14               CALL   L14DC   ; RECLAIM
14AB                             ; 
14AB   2A 0B 27               LD   HL,($270B)   
14AE   C1                     POP   BC   
14AF   09                     ADD   HL,BC   
14B0   44                     LD   B,H   
14B1   4D                     LD   C,L   
14B2   E1                     POP   HL   
14B3   C5                     PUSH   BC   
14B4                             ; 
14B4   CD 9E 0F               CALL   L0F9E   ; routine MAKE ROOM
14B7                             ; 
14B7   EB                     EX   DE,HL   ; 
14B8   2A 0D 27               LD   HL,($270D)   ; 
14BB   ED 4B 0B 27            LD   BC,($270B)   ; 
14BF   09                     ADD   HL,BC   ; 
14C0   C1                     POP   BC   ; 
14C1   C5                     PUSH   BC   ; 
14C2   E5                     PUSH   HL   ; 
14C3                             ; 
14C3   ED B0                  LDIR      ; 
14C5                             ; 
14C5   D1                     POP   DE   
14C6   C1                     POP   BC   
14C7                             ; 
14C7   CD DC 14               CALL   L14DC   ; RECLAIM
14CA   CD F8 14               CALL   L14F8   ; 
14CD                             ; 
14CD   FD E9                  JP   (IY)   ; to "next".
14CF                             ; 
14CF                             ; ---
14CF                             ; 
14CF   2A 31 3C     L14CF:    LD   HL,($3C31)   ; CURRENT
14D2   ED 5B 05 27            LD   DE,($2705)   
14D6   1B                     DEC   DE   
14D7   73                     LD   (HL),E   
14D8   23                     INC   HL   
14D9   72                     LD   (HL),D   
14DA                             ; 
14DA   E7           L14DA:    RST   20H   ; Error 11
14DB   0B                     DB   $0B   ; Error in REDEFINE or FORGET
14DC                             ; 
14DC                             ; ---------------------------
14DC                             ; THE "RECLAIMING" SUBROUTINE
14DC                             ; ---------------------------
14DC                             ; 
14DC   2A 37 3C     L14DC:    LD   HL,($3C37)   ; fetch STKBOT
14DF   A7                     AND   A   ; clear carry flag
14E0   ED 42                  SBC   HL,BC   ; subtract number of bytes to reclaim.
14E2   22 37 3C               LD   ($3C37),HL   ; update STKBOT
14E5                             ; 
14E5   2A 3B 3C               LD   HL,($3C3B)   ; fetch SPARE
14E8   ED 42                  SBC   HL,BC   ; subtract number of bytes to reclaim.
14EA   22 3B 3C               LD   ($3C3B),HL   ; update SPARE
14ED                             ; 
14ED   ED 52                  SBC   HL,DE   ; subtract
14EF   C8                     RET   Z   ; return if same address.
14F0                             ; 
14F0   C5                     PUSH   BC   ; 
14F1   44                     LD   B,H   ; 
14F2   4D                     LD   C,L   ; 
14F3   E1                     POP   HL   ; 
14F4   19                     ADD   HL,DE   ; 
14F5                             ; 
14F5   ED B0                  LDIR      ; 
14F7                             ; 
14F7   C9                     RET      ; 
14F8                             ; 
14F8                             ; ---
14F8                             ; 
14F8                             ; ---
14F8                             ; 
14F8   01 31 3C     L14F8:    LD   BC,$3C31   ; CURRENT
14FB                             ; 
14FB   CD 57 15               CALL   L1557   ; 
14FE   CD 57 15               CALL   L1557   ; 
1501                             ; 
1501   01 40 3C               LD   BC,$3C40   ; addr. of "FORTH" in RAM.
1504                             ; 
1504   2A 37 3C     L1504:    LD   HL,($3C37)   ; STKBOT
1507   37                     SCF      ; 
1508   ED 42                  SBC   HL,BC   ; 
150A   D8                     RET   C   ; 
150B                             ; 
150B   0A           L150B:    LD   A,(BC)   ; 
150C   17                     RLA      ; 
150D   03                     INC   BC   ; 
150E   30 FB                  JR   NC,L150B   ; 
1510                             ; 
1510   03                     INC   BC   ; 
1511   03                     INC   BC   ; 
1512   CD 57 15               CALL   L1557   ; 
1515   03                     INC   BC   ; 
1516   CD 57 15               CALL   L1557   ; 
1519                             ; 
1519   CD FB 15     L1519:    CALL   L15FB   ; routine INDEXER
151C                             ; 
151C                             ; -------------------------------------------------------
151C                             ; 
151C   C3 0E                  DW   L0EC3   ; DE value
151E   1C           L151E:    DB   $1C   ; to L153A
151F                             ; 
151F   85 10                  DW   L1085   ; DE value
1521   16           L1521:    DB   $16   ; to L1537
1522                             ; 
1522   08 11                  DW   L1108   ; DE value
1524   13           L1524:    DB   $13   ; to L1537
1525                             ; 
1525   B5 11                  DW   L11B5   ; DE value
1527   18           L1527:    DB   $18   ; to L153F
1528                             ; 
1528   00 00                  DW   $0000   ; zero end marker
152A                             ; 
152A                             ; -------------------------------------------------------
152A                             ; 
152A   21 F9 FF     L152A:    LD   HL,$FFF9   
152D   09                     ADD   HL,BC   
152E                             ; 
152E   4E                     LD   C,(HL)   
152F   23                     INC   HL   
1530   46                     LD   B,(HL)   
1531   2B                     DEC   HL   
1532                             ; 
1532   09                     ADD   HL,BC   
1533                             ; 
1533   44                     LD   B,H   
1534   4D                     LD   C,L   
1535   18 CD                  JR   L1504   ; 
1537                             ; 
1537                             ; -------------------------------------------------------
1537                             ; 
1537   CD 57 15     L1537:    CALL   L1557   ; 
153A                             ; 
153A                             ; ->
153A                             ; 
153A   CD 48 15     L153A:    CALL   L1548   ; 
153D   18 C5                  JR   L1504   ; 
153F                             ; 
153F                             ; ---
153F                             ; 
153F   CD 57 15     L153F:    CALL   L1557   ; 
1542   03                     INC   BC   ; 
1543   CD 57 15               CALL   L1557   ; 
1546   18 BC                  JR   L1504   ; 
1548                             ; 
1548                             ; -------------------------------------------------------
1548                             ; 
1548                             ; XXX?
1548                             ; 
1548   CD 57 15     L1548:    CALL   L1557   ; 
154B   21 B6 04               LD   HL,L04B6   ; 
154E   A7                     AND   A   ; 
154F   ED 52                  SBC   HL,DE   ; 
1551   C8                     RET   Z   ; 
1552                             ; 
1552   CD 9E 15               CALL   L159E   ; 
1555                             ; 
1555   18 F1                  JR   L1548   ; 
1557                             ; 
1557                             ; ---
1557                             ; often called twice
1557                             ; ---
1557                             ; 
1557                             ; 
1557   0A           L1557:    LD   A,(BC)   ; lo byte
1558   5F                     LD   E,A   ; 
1559   03                     INC   BC   ; 
155A   0A                     LD   A,(BC)   ; hi byte
155B   57                     LD   D,A   ; 
155C   0B                     DEC   BC   ; BC now unchanged, DE contents
155D                             ; 
155D   CD 68 15               CALL   L1568   ; routine below. header?
1560                             ; 
1560   EB                     EX   DE,HL   ; value to DE
1561   7B                     LD   A,E   ; 
1562   02                     LD   (BC),A   ; lo byte
1563   03                     INC   BC   ; 
1564   7A                     LD   A,D   ; 
1565   02                     LD   (BC),A   ; hi byte
1566   03                     INC   BC   ; 
1567   C9                     RET      ; to next - BC+=2
1568                             ; 
1568                             ; ---
1568                             ; 
1568   2A 01 27     L1568:    LD   HL,($2701)   ; first bytes of pad.
156B   A7                     AND   A   ; 
156C   ED 52                  SBC   HL,DE   ; subtract the DE value read from
156E                             ; memory
156E   62                     LD   H,D   ; 
156F   6B                     LD   L,E   ; transfer that DE to HL as well
1570                             ; 
1570   D0                     RET   NC   ; return if HL was higher than DE
1571                             ; 
1571   2A 09 27               LD   HL,($2709)   ; tape header
1574   ED 52                  SBC   HL,DE   
1576   30 0C                  JR   NC,L1584   ; forward if higher to
1578                             ; 
1578   2A 0D 27               LD   HL,($270D)   
157B   ED 52                  SBC   HL,DE   
157D   38 13                  JR   C,L1592   ; forward if lower to
157F                             ; 
157F   2A 0B 27               LD   HL,($270B)   ; 
1582   19                     ADD   HL,DE   
1583   C9                     RET      ; return
1584                             ; 
1584                             ; ---
1584                             ; 
1584   2A 03 27     L1584:    LD   HL,($2703)   
1587   ED 52                  SBC   HL,DE   
1589   2A 07 27               LD   HL,($2707)   
158C   D8                     RET   C   
158D                             ; 
158D   2A 05 27               LD   HL,($2705)   
1590   19                     ADD   HL,DE   
1591   C9                     RET      
1592                             ; 
1592                             ; ---
1592                             ; 
1592   2A 01 27     L1592:    LD   HL,($2701)   
1595   19                     ADD   HL,DE   
1596   ED 5B 0D 27            LD   DE,($270D)   
159A   A7                     AND   A   
159B   ED 52                  SBC   HL,DE   
159D   C9                     RET      
159E                             ; 
159E                             ; ---
159E                             ; 
159E   1B           L159E:    DEC   DE   
159F   1A                     LD   A,(DE)   
15A0   17                     RLA      
15A1   D0                     RET   NC   
15A2                             ; 
15A2   1B           L15A2:    DEC   DE   
15A3   1B                     DEC   DE   
15A4   1A                     LD   A,(DE)   
15A5   6F                     LD   L,A   ; low byte
15A6   26 00                  LD   H,$00   ; make high byte zero
15A8   3C                     INC   A   ; test offset for $FF.
15A9   20 06                  JR   NZ,L15B1   ; forward if not.
15AB                             ; 
15AB   0A                     LD   A,(BC)   
15AC   6F                     LD   L,A   
15AD   03                     INC   BC   
15AE   0A                     LD   A,(BC)   
15AF   67                     LD   H,A   
15B0   03                     INC   BC   
15B1                             ; 
15B1   09           L15B1:    ADD   HL,BC   
15B2                             ; 
15B2   44                     LD   B,H   
15B3   4D                     LD   C,L   
15B4   C9                     RET      
15B5                             ; 
15B5                             ; ---
15B5                             ; 
15B5                             ; ---
15B5                             ; 
15B5                             ; 
15B5   B7 15        L15B5:    DW   L15B7   
15B7                             ; 
15B7                             ; ---
15B7                             ; 
15B7   DF           L15B7:    RST   18H   ; pop word DE
15B8                             ; 
15B8   EB                     EX   DE,HL   
15B9                             ; 
15B9   CD E7 15               CALL   L15E7   ; WORDSTART1
15BC                             ; 
15BC   EB                     EX   DE,HL   
15BD                             ; 
15BD   D7                     RST   10H   ; push word DE
15BE   FD E9                  JP   (IY)   ; to "next".
15C0                             ; 
15C0                             ; ---
15C0                             ; 
15C0                             ; ---
15C0                             ; 
15C0   E5           L15C0:    PUSH   HL   
15C1   5E                     LD   E,(HL)   
15C2   23                     INC   HL   
15C3   56                     LD   D,(HL)   
15C4                             ; 
15C4   CD FB 15     L15C4:    CALL   L15FB   ; routine INDEXER
15C7                             ; 
15C7                             ; -------------------------------------------------------
15C7                             ; 
15C7   08 11                  DW   L1108   
15C9   0B           L15C9:    DB   $0B   ; to L15D4 - find parameter field
15CA                             ; 
15CA   85 10                  DW   L1085   
15CC   08           L15CC:    DB   $08   ; to L15D4 - find parameter field
15CD                             ; 
15CD   00 00                  DW   $0000   ; zero end_marker.
15CF                             ; 
15CF                             ; -------------------------------------------------------
15CF                             ; 
15CF   01 00 00     L15CF:    LD   BC,$0000   ; zero indicates no parameter field.
15D2   18 07                  JR   L15DB   ; forward to consider total length.
15D4                             ; 
15D4                             ; -------------------------------------------------------
15D4                             ; 
15D4   E1           L15D4:    POP   HL   ; retrieve the code field address
15D5   E5                     PUSH   HL   ; save it again
15D6                             ; 
15D6   23                     INC   HL   ; step past the
15D7   23                     INC   HL   ; address word
15D8   4E                     LD   C,(HL)   ; and get following address
15D9   23                     INC   HL   ; which if in RAM could be the
15DA   46                     LD   B,(HL)   ; parameter field to              BC.
15DB                             ; 
15DB                             ; ->
15DB                             ; 
15DB   E1           L15DB:    POP   HL   ; retrieve the code field address
15DC   E5                     PUSH   HL   ; and save it again
15DD                             ; 
15DD   2B                     DEC   HL   ; the name length field
15DE   2B                     DEC   HL   ; link field high order byte
15DF   2B                     DEC   HL   ; link field low order byte
15E0   2B                     DEC   HL   ; possible length field high
15E1   56                     LD   D,(HL)   ; save in D
15E2   2B                     DEC   HL   ; possible length field low
15E3   5E                     LD   E,(HL)   ; save in E
15E4   19                     ADD   HL,DE   ; add this length
15E5   EB                     EX   DE,HL   ; and save result in              DE.
15E6                             ; 
15E6   E1                     POP   HL   ; retrieve code field address
15E7                             ; 
15E7                             ; ->
15E7                             ; indexes the header information of a FORTH word
15E7                             ; 
15E7   2B           L15E7:    DEC   HL   ; point to name length field
15E8                             ; 
15E8                             ; =>
15E8   7C           L15E8:    LD   A,H   ; fetch high order byte of the
15E9                             ; header address.
15E9   FE 3C                  CP   $3C   ; compare to RAM location
15EB   7E                     LD   A,(HL)   ; fetch length byte.
15EC   CB B7                  RES   6,A   ; reset the immediate mode bit
15EE   38 02                  JR   C,L15F2   ; forward if definition is in ROM.
15F0                             ; 
15F0   C6 02                  ADD   A,$02   ; else add extra for "length field"
15F2                             ; 
15F2   2B           L15F2:    DEC   HL   ; step past the
15F3   2B                     DEC   HL   ; link to previous word.
15F4                             ; 
15F4   2B           L15F4:    DEC   HL   ; now address last letter on name.
15F5   3D                     DEC   A   ; decrement the length
15F6   20 FC                  JR   NZ,L15F4   ; loop back until at first letter  HL.
15F8                             ; 
15F8   C9                     RET      ; return.
15F9                             ; 
15F9                             ; -------
15F9                             ; INDEXER
15F9                             ; -------
15F9                             ; 
15F9                             ; indexerloop
15F9                             ; 
15F9   23           L15F9:    INC   HL   ; step past the
15FA   E5                     PUSH   HL   ; offset byte.
15FB                             ; 
15FB                             ; -> Call Entry point
15FB                             ; 
15FB   E1           L15FB:    POP   HL   ; drop return address - points to byte
15FC                             ; after the call.
15FC   7E                     LD   A,(HL)   ; read low-order byte
15FD   23                     INC   HL   ; increment address once
15FE   E5                     PUSH   HL   ; push return address
15FF                             ; 
15FF   66                     LD   H,(HL)   ; read high-order byte.
1600   6F                     LD   L,A   ; now HL holds the read word
1601   B4                     OR   H   ; test for two zeros.
1602   C8                     RET   Z   ; two zeros - return
1603                             ; (ret addr is second NOP)
1603                             ; 
1603   ED 52                  SBC   HL,DE   ; compare to value passed in DE
1605                             ; 
1605   E1                     POP   HL   ; now increment the
1606   23                     INC   HL   ; return address on machine stack.
1607                             ; 
1607   20 F0                  JR   NZ,L15F9   ; loop back if read word is not
1609                             ; equal to DE
1609                             ; 
1609   D5                     PUSH   DE   ; else preserve DE
160A                             ; 
160A   16 00                  LD   D,$00   ; a 1 byte relative jump.
160C   5E                     LD   E,(HL)   ; read one-byte offset.
160D   19                     ADD   HL,DE   ; add to read address.
160E                             ; 
160E   D1                     POP   DE   ; restore DE
160F                             ; 
160F   E9                     JP   (HL)   ; >>>
1610                             ; 
1610                             ; ---
1610                             ; 
1610   C3 0E        L1610:    DW   L0EC3   ; "code field" - docolon
1612                             ; 
1612   1F 0E                  DW   L0E1F   ; 1-
1614   29 0E                  DW   L0E29   ; 2-
1616   B3 08                  DW   L08B3   ; @
1618   80 04                  DW   L0480   ; current
161A   B3 08                  DW   L08B3   ; @
161C   C1 08                  DW   L08C1   ; !
161E   B6 04                  DW   L04B6   ; exit
1620                             ; 
1620                             ; ---------------------------------
1620                             ; THE "FIND WORD IN RAM" SUBROUTINE
1620                             ; ---------------------------------
1620                             ; This subroutine is used by FORGET, EDIT and LIST.
1620                             ; First use the standard FORTH word find to get address of word (in pad).
1620                             ; If word does not exist then returned value will be zero.
1620                             ; The lowest word in RAM is the FORTH word at L3C51 so a check is made
1620                             ; against this address.
1620                             ; 
1620   CD B9 04     L1620:    CALL   L04B9   ; forth
1623   3D 06                  DW   L063D   ; find
1625                             ; 
1625   0E 1A        L1625:    DW   L1A0E   ; end-forth.
1627                             ; 
1627   DF                     RST   18H   ; pop word DE
1628                             ; 
1628   21 AF C3               LD   HL,$C3AF   ; i.e $0000 - $3C51
162B                             ; 
162B   19                     ADD   HL,DE   ; add to test value.
162C   D8                     RET   C   ; carry signals that word exists in RAM.
162D                             ; return the address in DE.
162D                             ; 
162D                             ; else generate an error code.
162D                             ; 
162D   E7                     RST   20H   ; Error 13
162E   0D                     DB   $0D   ; Error word not found or is in ROM.
162F                             ; 
162F                             ; -----------------
162F                             ; THE "FORGET" WORD
162F                             ; -----------------
162F                             ; FORGET name.
162F                             ; Erases the word "name" and all subsequently defined names from the dictionary.
162F                             ; 
162F   46 4F 52 47 45 L162F:   DB   "FORGE"   ; "name field"
1634   D4                     DB   "T" + $80   
1635                             ; 
1635   FC 13                  DW   L13FC   ; "link field"
1637                             ; 
1637   06           L1637:    DB   $06   ; "name length field"
1638                             ; 
1638   3A 16        L1638:    DW   L163A   ; "code field"
163A                             ; 
163A                             ; ---
163A                             ; 
163A   2A 31 3C     L163A:    LD   HL,($3C31)   ; CURRENT
163D   ED 5B 33 3C            LD   DE,($3C33)   ; CONTEXT
1641   A7                     AND   A   
1642   ED 52                  SBC   HL,DE   
1644                             ; 
1644   C2 DA 14               JP   NZ,L14DA   ; 
1647                             ; 
1647   CD 20 16               CALL   L1620   ; findramword
164A                             ; 
164A   21 FB FF               LD   HL,$FFFB   
164D   19                     ADD   HL,DE   
164E   22 39 3C               LD   ($3C39),HL   ; SPARE
1651   DD CB 3E D6            SET   2,(IX+$3E)   ; FLAGS
1655                             ; 
1655   E7                     RST   20H   ; Invoke error routine.
1656   FF                     DB   $FF   ; No error
1657                             ; 
1657                             ; ---------------
1657                             ; THE "EDIT" WORD
1657                             ; ---------------
1657                             ; EDIT name
1657                             ; Lists word "name" at bottom of the screen to be edited. Lists 18 lines at
1657                             ; a time, then waits for editing until ENTER is pressed.
1657                             ; A new version of the word is entered at the end of the dictionary.
1657                             ; While editing, cursor up and cursor down are needed to move the cursor
1657                             ; from one line to another. DELETE LINE deletes one line.
1657                             ; 
1657   45 44 49     L1657:    DB   "EDI"   ; "name field"
165A   D4                     DB   "T" + $80   
165B                             ; 
165B   37 16                  DW   L1637   ; "link field"
165D                             ; 
165D   04           L165D:    DB   $04   ; "name length field"
165E                             ; 
165E   60 16        L165E:    DW   L1660   ; "code field"
1660                             ; 
1660                             ; ---
1660                             ; 
1660   CD 20 16     L1660:    CALL   L1620   ; findramword
1663                             ; 
1663   DD CB 3E DE            SET   3,(IX+$3E)   ; update FLAGS output -> input buffer
1667   18 0C                  JR   L1675   ; forward to list routine the difference
1669                             ; being that the listing will go to the
1669                             ; lower screen.
1669                             ; 
1669                             ; ---------------
1669                             ; THE "LIST" WORD
1669                             ; ---------------
1669                             ; LIST name
1669                             ; (  --  )
1669                             ; Lists word "name" on the screen. It must have been defined by :, DEFINER,
1669                             ; or COMPILER. Lists about 18 lines at a time and waits for key depression
1669                             ; (shifted space breaks).
1669                             ; 
1669   4C 49 53     L1669:    DB   "LIS"   ; "name field"
166C   D4                     DB   "T" + $80   
166D                             ; 
166D   5D 16                  DW   L165D   ; "link field"
166F                             ; 
166F   04           L166F:    DB   $04   ; "name length field"
1670                             ; 
1670   72 16        L1670:    DW   L1672   ; "code field"
1672                             ; 
1672                             ; ---
1672                             ; 
1672   CD 20 16     L1672:    CALL   L1620   ; findramword
1675                             ; 
1675                             ; edit path joins here but carriage returns are printed as zeros.
1675                             ; 
1675   3E 0D        L1675:    LD   A,$0D   ; prepare a carriage return.
1677   CF                     RST   08H   ; print_ch
1678                             ; 
1678   DD CB 3E 5E            BIT   3,(IX+$3E)   ; test FLAGS output->input buffer?
167C                             ; 
167C   D5                     PUSH   DE   
167D                             ; 
167D   C4 D8 02               CALL   NZ,L02D8   ; call if so to initialize buffer
1680                             ; 
1680   C1                     POP   BC   ; LD DE,(BC)
1681                             ; 
1681   0A                     LD   A,(BC)   
1682   5F                     LD   E,A   
1683   03                     INC   BC   
1684   0A                     LD   A,(BC)   
1685   57                     LD   D,A   
1686   0B                     DEC   BC   
1687                             ; 
1687   CD FB 15               CALL   L15FB   ; routine INDEXER
168A                             ; 
168A                             ; -------------------------------------------------------
168A                             ; 
168A   C3 0E        L168A:    DW   L0EC3   ; DE value
168C   0B           L168C:    DB   $0B   ; offset to L1697
168D                             ; 
168D   08 11        L168D:    DW   L1108   ; DE value
168F   0D           L168F:    DB   $0D   ; offset to L169C
1690                             ; 
1690   85 10        L1690:    DW   L1085   ; DE value
1692   1F           L1692:    DB   $1F   ; offset to L16B1
1693                             ; 
1693   00 00                  DW   $0000   ; zero end-marker
1695                             ; 
1695                             ; -------------------------------------------------------
1695                             ; 
1695   E7           L1695:    RST   20H   ; Error 14
1696   0E                     DB   $0E   ; Word unlistable.
1697                             ; 
1697                             ; Only words defined by ":", "DEFINER" or "COMPILER" are listable.
1697                             ; 
1697                             ; -------------------------------------------------------
1697                             ; 
1697                             ; ":"
1697   21 02 00     L1697:    LD   HL,$0002   
169A   18 18                  JR   L16B4   ; 
169C                             ; ---
169C                             ; 
169C   D5           L169C:    PUSH   DE   
169D   21 02 00               LD   HL,$0002   
16A0   09                     ADD   HL,BC   
16A1   7E                     LD   A,(HL)   
16A2   23                     INC   HL   
16A3   66                     LD   H,(HL)   
16A4   6F                     LD   L,A   
16A5   2B                     DEC   HL   
16A6   2B                     DEC   HL   
16A7   2B                     DEC   HL   
16A8                             ; 
16A8   6E                     LD   L,(HL)   
16A9   7D                     LD   A,L   
16AA   07                     RLCA      
16AB   9F                     SBC   A,A   
16AC   67                     LD   H,A   
16AD                             ; 
16AD   CD 0E 18               CALL   L180E   ; pr_int_hl?
16B0                             ; 
16B0   D1                     POP   DE   
16B1                             ; 
16B1   21 04 00     L16B1:    LD   HL,$0004   
16B4                             ; 
16B4                             ; 
16B4   09           L16B4:    ADD   HL,BC   
16B5   E5                     PUSH   HL   
16B6   C5                     PUSH   BC   
16B7                             ; 
16B7   CD E4 17               CALL   L17E4   ; 
16BA                             ; 
16BA   D1                     POP   DE   
16BB   C1                     POP   BC   
16BC                             ; 
16BC   CD E4 17               CALL   L17E4   ; 
16BF                             ; 
16BF   DD 36 14 01            LD   (IX+$14),$01   ; LISTWSx
16C3                             ; 
16C3   DD 36 16 10  L16C3:    LD   (IX+$16),$10   ; LISTWSx
16C7                             ; 
16C7   CD 08 17     L16C7:    CALL   L1708   ; index_table
16CA                             ; 
16CA   38 06                  JR   C,L16D2   ; 
16CC                             ; 
16CC   DD 35 16               DEC   (IX+$16)   ; LISTWSx
16CF   F2 C7 16               JP   P,L16C7   ; 
16D2                             ; 
16D2   DD CB 3E 5E  L16D2:    BIT   3,(IX+$3E)   ; FLAGS
16D6   20 10                  JR   NZ,L16E8   ; branch forward  =->
16D8                             ; 
16D8   38 28                  JR   C,L1702   ; 
16DA                             ; 
16DA   21 26 3C               LD   HL,$3C26   ; KEYCOD
16DD   36 00                  LD   (HL),$00   ; 
16DF                             ; 
16DF   7E           L16DF:    LD   A,(HL)   ; 
16E0   A7                     AND   A   ; 
16E1   28 FC                  JR   Z,L16DF   ; loop back while zero
16E3                             ; 
16E3   CD E4 04               CALL   L04E4   ; check break
16E6                             ; 
16E6   18 DB                  JR   L16C3   ; loop back
16E8                             ; 
16E8                             ; =->
16E8                             ; 
16E8   F5           L16E8:    PUSH   AF   
16E9   DD CB 3E 9E            RES   3,(IX+$3E)   ; FLAGS
16ED   C5                     PUSH   BC   
16EE                             ; 
16EE   CD B9 04               CALL   L04B9   ; forth
16F1                             ; 
16F1   78 05                  DW   L0578   ; retype        - allow user to retype
16F3   06 05                  DW   L0506   ; line          - interpret buffer
16F5   0E 1A                  DW   L1A0E   ; end-forth.
16F7                             ; 
16F7                             ; 
16F7   DD CB 3E DE            SET   3,(IX+$3E)   ; FLAGS
16FB                             ; 
16FB   CD D8 02               CALL   L02D8   ; 
16FE                             ; 
16FE   C1                     POP   BC   
16FF   F1                     POP   AF   
1700   30 C1                  JR   NC,L16C3   ; 
1702                             ; 
1702   DD CB 3E 9E  L1702:    RES   3,(IX+$3E)   ; FLAGS
1706   FD E9                  JP   (IY)   ; to "next".
1708                             ; 
1708                             ; -------------------------------------------------------
1708                             ; 
1708                             ; called once
1708                             ; 
1708   3A 14 3C     L1708:    LD   A,($3C14)   ; LISTWS2
170B   32 15 3C               LD   ($3C15),A   ; LISTWS3
170E                             ; 
170E   DD 36 13 05            LD   (IX+$13),$05   ; LISTWS
1712                             ; 
1712   0A           L1712:    LD   A,(BC)   
1713   5F                     LD   E,A   
1714   03                     INC   BC   
1715   0A                     LD   A,(BC)   
1716   57                     LD   D,A   
1717   03                     INC   BC   
1718                             ; 
1718   CD FB 15     L1718:    CALL   L15FB   ; routine INDEXER
171B                             ; 
171B                             ; -------------------------------------------------------
171B                             ; 
171B   83 12        L171B:    DW   L1283   ; 
171D   40           L171D:    DB   $40   ; offset to L175D
171E                             ; 
171E   71 12        L171E:    DW   L1271   ; 
1720   44           L1720:    DB   $44   ; offset to L1764
1721                             ; 
1721   A4 12        L1721:    DW   L12A4   ; 
1723   48           L1723:    DB   $48   ; offset to L176B
1724                             ; 
1724   9F 12        L1724:    DW   L129F   ; 
1726   37           L1726:    DB   $37   ; offset to L175D
1727                             ; 
1727   8D 12        L1727:    DW   L128D   ; 
1729   42           L1729:    DB   $42   ; offset to L176B
172A                             ; 
172A   88 12        L172A:    DW   L1288   ; 
172C   38           L172C:    DB   $38   ; offset to L1764
172D                             ; 
172D   76 12        L172D:    DW   L1276   ; 
172F   3C           L172F:    DB   $3C   ; offset to L176B
1730                             ; 
1730   23 13        L1730:    DW   L1323   ; 
1732   2B           L1732:    DB   $2B   ; offset to L175D
1733                             ; 
1733   32 13        L1733:    DW   L1332   ; 
1735   36           L1735:    DB   $36   ; offset to L176B
1736                             ; 
1736   3C 13        L1736:    DW   L133C   ; 
1738   33           L1738:    DB   $33   ; offset to L176B
1739                             ; 
1739   E8 10        L1739:    DW   L10E8   ; 
173B   29           L173B:    DB   $29   ; offset to L1764
173C                             ; 
173C   40 11        L173C:    DW   L1140   ; 
173E   26           L173E:    DB   $26   ; offset to L1764
173F                             ; 
173F   11 10        L173F:    DW   L1011   ; 
1741   3B           L1741:    DB   $3B   ; offset to L177C
1742                             ; 
1742   64 10        L1742:    DW   L1064   ; 
1744   47           L1744:    DB   $47   ; offset to L178B
1745                             ; 
1745   4B 10        L1745:    DW   L104B   ; 
1747   51           L1747:    DB   $51   ; offset to L1798
1748                             ; 
1748   79 13        L1748:    DW   L1379   ; 
174A   62           L174A:    DB   $62   ; offset to L17AC
174B                             ; 
174B   96 13        L174B:    DW   L1396   ; 
174D   63           L174D:    DB   $63   ; offset to L17B0
174E                             ; 
174E   B6 04        L174E:    DW   L04B6   ; 
1750   54           L1750:    DB   $54   ; offset to L17A4
1751                             ; 
1751   00 00        L1751:    DW   $0000   ; zero end-marker
1753                             ; 
1753                             ; -------------------------------------------------------
1753                             ; 
1753                             ; default action
1753                             ; 
1753   CD E1 17     L1753:    CALL   L17E1   ; 
1756                             ; 
1756   DD 35 13     L1756:    DEC   (IX+$13)   ; LISTWS
1759   20 B7                  JR   NZ,L1712   ; 
175B   A7                     AND   A   
175C   C9                     RET      
175D                             ; 
175D                             ; ---
175D                             ; 
175D   2A 14 3C     L175D:    LD   HL,($3C14)   ; LISTWS2
1760   65                     LD   H,L   
1761   2C                     INC   L   
1762   18 0C                  JR   L1770   ; 
1764                             ; 
1764                             ; ---
1764                             ; 
1764   2A 14 3C     L1764:    LD   HL,($3C14)   ; LISTWS2
1767   65                     LD   H,L   
1768   25                     DEC   H   
1769   18 05                  JR   L1770   ; 
176B                             ; 
176B                             ; ---
176B                             ; 
176B   2A 14 3C     L176B:    LD   HL,($3C14)   ; LISTWS2
176E   2D                     DEC   L   
176F   65                     LD   H,L   
1770                             ; 
1770   22 14 3C     L1770:    LD   ($3C14),HL   ; LISTWS2
1773   DD 36 13 01            LD   (IX+$13),$01   ; LISTWS
1777   DD 35 16               DEC   (IX+$16)   ; LISTWSx
177A   18 D7                  JR   L1753   ; 
177C                             ; 
177C                             ; ---
177C                             ; 
177C   CD DA 17     L177C:    CALL   L17DA   ; 
177F                             ; 
177F   D7                     RST   10H   ; push word DE
1780   11 B3 09               LD   DE,$09B3   ; "." addr
1783                             ; 
1783   CD C1 17     L1783:    CALL   L17C1   ; routine INDENT
1786   CD 15 18               CALL   L1815   ; pr2
1789                             ; 
1789   18 CB                  JR   L1756   ; 
178B                             ; 
178B                             ; ---
178B                             ; 
178B   CD DA 17     L178B:    CALL   L17DA   ; 
178E   D7                     RST   10H   ; push word DE
178F   CD DA 17               CALL   L17DA   ; 
1792   D7                     RST   10H   ; push word DE
1793   11 AF 0A               LD   DE,$0AAF   ; "F." addr
1796   18 EB                  JR   L1783   ; 
1798                             ; 
1798                             ; ---
1798                             ; 
1798   0A           L1798:    LD   A,(BC)   
1799   F5                     PUSH   AF   
179A                             ; 
179A   CD E1 17               CALL   L17E1   ; 
179D                             ; 
179D   F1                     POP   AF   
179E   CF                     RST   08H   ; print_ch
179F                             ; 
179F   3E 20                  LD   A,$20   ; a space character
17A1   CF                     RST   08H   ; print_ch
17A2                             ; 
17A2   18 B2                  JR   L1756   ; 
17A4                             ; 
17A4                             ; ---
17A4                             ; 
17A4   CD 08 18     L17A4:    CALL   L1808   ; pr_inline
17A7                             ; 
17A7   0D                     DB   $0D   ; newline
17A8   3B                     DB   ";"   ; ;
17A9   8D                     DB   $8D   ; inverted newline
17AA                             ; 
17AA   37                     SCF      ; 
17AB   C9                     RET      ; 
17AC                             ; 
17AC                             ; ---
17AC                             ; 
17AC   3E 29        L17AC:    LD   A,$29   ; character ")" - end of comment.
17AE   18 02                  JR   L17B2   ; 
17B0                             ; 
17B0   3E 22        L17B0:    LD   A,$22   ; character """ - quote
17B2                             ; 
17B2   F5           L17B2:    PUSH   AF   
17B3   C5                     PUSH   BC   
17B4   CD E1 17               CALL   L17E1   ; 
17B7   D1                     POP   DE   
17B8   CD 79 09               CALL   L0979   ; pr_string1
17BB   42                     LD   B,D   
17BC   4B                     LD   C,E   
17BD   F1                     POP   AF   
17BE                             ; 
17BE   CF                     RST   08H   ; print_ch
17BF                             ; 
17BF   A7                     AND   A   
17C0   C9                     RET      
17C1                             ; 
17C1                             ; -------------------------------------------------------
17C1                             ; 
17C1   3A 15 3C     L17C1:    LD   A,($3C15)   ; LISTWS3
17C4   A7                     AND   A   
17C5   F8                     RET   M   
17C6                             ; 
17C6   C5                     PUSH   BC   ; preserve BC
17C7   47                     LD   B,A   ; transfer count to B
17C8                             ; 
17C8   3E 0D                  LD   A,$0D   ; carriage return.
17CA   CF                     RST   08H   ; print_ch
17CB                             ; 
17CB   04                     INC   B   ; test indentation.
17CC   05                     DEC   B   ; 
17CD   28 05                  JR   Z,L17D4   ; 
17CF                             ; 
17CF   3E 20        L17CF:    LD   A,$20   ; a space character
17D1   CF                     RST   08H   ; print_ch
17D2                             ; 
17D2   10 FB                  DJNZ   L17CF   ; 
17D4                             ; 
17D4   DD 36 15 FF  L17D4:    LD   (IX+$15),$FF   ; LISTWS3
17D8                             ; 
17D8   C1                     POP   BC   ; restore BC
17D9   C9                     RET      ; return.
17DA                             ; 
17DA                             ; ---
17DA                             ; 
17DA   0A           L17DA:    LD   A,(BC)   
17DB   5F                     LD   E,A   
17DC   03                     INC   BC   
17DD   0A                     LD   A,(BC)   
17DE   57                     LD   D,A   
17DF   03           L17DF:    INC   BC   
17E0   C9                     RET      
17E1                             ; 
17E1                             ; ---
17E1                             ; 
17E1   CD C1 17     L17E1:    CALL   L17C1   ; routine INDENT
17E4                             ; 
17E4   EB           L17E4:    EX   DE,HL   
17E5   2B                     DEC   HL   
17E6   7E                     LD   A,(HL)   
17E7   CB 7F                  BIT   7,A   
17E9   20 05                  JR   NZ,L17F0   ; 
17EB                             ; 
17EB   CD E8 15               CALL   L15E8   ; routine WORDSTART
17EE                             ; 
17EE   18 0B                  JR   L17FB   ; 
17F0                             ; 
17F0                             ; ---
17F0                             ; 
17F0   EB           L17F0:    EX   DE,HL   
17F1                             ; 
17F1   CD A2 15               CALL   L15A2   ; 
17F4                             ; 
17F4   13                     INC   DE   
17F5   1A                     LD   A,(DE)   
17F6   6F                     LD   L,A   
17F7   13                     INC   DE   
17F8   1A                     LD   A,(DE)   
17F9   67                     LD   H,A   
17FA   19                     ADD   HL,DE   
17FB                             ; 
17FB                             ; pr_string_sp
17FB                             ; 
17FB   7E           L17FB:    LD   A,(HL)   
17FC   E6 7F                  AND   $7F   
17FE   CF                     RST   08H   ; print_ch
17FF   CB 7E                  BIT   7,(HL)   
1801   23                     INC   HL   
1802   28 F7                  JR   Z,L17FB   ; 
1804                             ; 
1804   3E 20                  LD   A,$20   
1806   CF                     RST   08H   ; print_ch
1807   C9                     RET      
1808                             ; 
1808                             ; ---------------------------------------
1808                             ; THE "INLINE PRINT STRING SPACE" ROUTINE
1808                             ; ---------------------------------------
1808                             ; 
1808                             ; 
1808   E3           L1808:    EX   (SP),HL   
1809   CD FB 17               CALL   L17FB   ; pr_string_sp
180C   E3                     EX   (SP),HL   
180D   C9                     RET      
180E                             ; 
180E                             ; ---------------------------
180E                             ; THE "PRINT INTEGER" ROUTINE
180E                             ; ---------------------------
180E                             ; in HL
180E                             ; 
180E                             ; -> called twice
180E   11 B3 09     L180E:    LD   DE,$09B3   ; "." addr
1811   D5                     PUSH   DE   ; but save it as we need DE?
1812                             ; 
1812   EB                     EX   DE,HL   ; transfer HL to DE.
1813   D7                     RST   10H   ; push word DE, was HL, on Data Stack.
1814   D1                     POP   DE   ; restore L09B3 again
1815                             ; 
1815                             ; -> called twice.
1815   C5           L1815:    PUSH   BC   ; preserve BC.
1816                             ; 
1816   CD BF 04               CALL   L04BF   ; executes "." word
1819                             ; 
1819                             ; the "." exits so expects another word here
1819                             ; 
1819                             ; 
1819   1B 18        L1819:    DW   L181B   
181B                             ; 
181B   1D 18        L181B:    DW   L181D   
181D                             ; 
181D   C1           L181D:    POP   BC   ; 
181E   C1                     POP   BC   ; restore BC.
181F                             ; 
181F   C9                     RET      ; return.
1820                             ; 
1820                             ; ---------------------------------
1820                             ; THE "CASSETTE INTERFACE" ROUTINES
1820                             ; ---------------------------------
1820                             ; 
1820                             ; ---
1820                             ; tape???
1820                             ; ---
1820                             ; 
1820   FD E5        L1820:    PUSH   IY   
1822                             ; 
1822   E5                     PUSH   HL   
1823   FD E1                  POP   IY   
1825                             ; 
1825   21 92 18               LD   HL,L1892   
1828   E5                     PUSH   HL   
1829                             ; 
1829   21 00 E0               LD   HL,$E000   
182C   CB 79                  BIT   7,C   
182E   28 02                  JR   Z,L1832   ; 
1830   26 FC                  LD   H,$FC   
1832   13           L1832:    INC   DE   
1833   FD 2B                  DEC   IY   
1835   F3                     DI      
1836   AF                     XOR   A   
1837                             ; 
1837   06 97        L1837:    LD   B,$97   
1839                             ; 
1839   10 FE        L1839:    DJNZ   L1839   ; 
183B   D3 FE                  OUT   ($FE),A   
183D   EE 08                  XOR   $08   
183F   2C                     INC   L   
1840   20 01                  JR   NZ,L1843   ; 
1842   24                     INC   H   
1843   20 F2        L1843:    JR   NZ,L1837   ; 
1845   06 2B                  LD   B,$2B   
1847   10 FE        L1847:    DJNZ   L1847   ; 
1849   D3 FE                  OUT   ($FE),A   
184B   69                     LD   L,C   
184C   01 08 3B               LD   BC,$3B08   
184F   10 FE        L184F:    DJNZ   L184F   ; 
1851   79                     LD   A,C   
1852   D3 FE                  OUT   ($FE),A   
1854   06 38                  LD   B,$38   
1856   C3 8A 18               JP   L188A   ; 
1859                             ; 
1859   79           L1859:    LD   A,C   
185A   CB 78                  BIT   7,B   
185C                             ; 
185C   10 FE        L185C:    DJNZ   L185C   ; 
185E                             ; 
185E   30 04                  JR   NC,L1864   ; 
1860                             ; 
1860   06 3D                  LD   B,$3D   
1862   10 FE        L1862:    DJNZ   L1862   ; 
1864                             ; 
1864   D3 FE        L1864:    OUT   ($FE),A   
1866   06 3A                  LD   B,$3A   
1868   C2 59 18               JP   NZ,L1859   ; 
186B   05                     DEC   B   
186C   AF                     XOR   A   
186D   CB 15        L186D:    RL   L   
186F   C2 5C 18               JP   NZ,L185C   ; 
1872   1B                     DEC   DE   
1873   FD 23                  INC   IY   
1875   06 2E                  LD   B,$2E   
1877                             ; 
1877   3E 7F                  LD   A,$7F   
1879   DB FE                  IN   A,($FE)   
187B   1F                     RRA      
187C   D0                     RET   NC   
187D                             ; 
187D   7A                     LD   A,D   
187E   FE FF                  CP   $FF   
1880   D0                     RET   NC   
1881                             ; 
1881   B3                     OR   E   
1882   28 0B                  JR   Z,L188F   ; 
1884                             ; 
1884   FD 6E 00               LD   L,(IY+$00)   
1887   7C           L1887:    LD   A,H   
1888   AD                     XOR   L   
1889   67                     LD   H,A   
188A   AF           L188A:    XOR   A   
188B   37                     SCF      
188C   C3 6D 18               JP   L186D   ; JUMP back
188F                             ; 
188F                             ; ---
188F                             ; 
188F   6C           L188F:    LD   L,H   
1890   18 F5                  JR   L1887   ; 
1892                             ; 
1892   FD E1        L1892:    POP   IY   ; restore the original IY value so that
1894                             ; words can be used gain.
1894                             ; 
1894   08                     EX   AF,AF'   ; 
1895   06 3B                  LD   B,$3B   ; 
1897                             ; 
1897   10 FE        L1897:    DJNZ   L1897   ; self-loop for delay.
1899                             ; 
1899   AF                     XOR   A   
189A   D3 FE                  OUT   ($FE),A   
189C                             ; 
189C   3E 7F                  LD   A,$7F   ; read the port $7FFE
189E   DB FE                  IN   A,($FE)   ; keyrows SPACE to V.
18A0   1F                     RRA      
18A1   FB                     EI      ; Enable Interrupts.
18A2                             ; 
18A2   D2 F0 04               JP   NC,L04F0   ; jump if SPACE pressed to Error 3
18A5                             ; "BREAK pressed".
18A5                             ; 
18A5   08                     EX   AF,AF'   ; 
18A6   C9                     RET      ; return.
18A7                             ; 
18A7                             ; ---
18A7                             ; READ BYTES FROM TAPE
18A7                             ; ---
18A7                             ; 
18A7   F3           L18A7:    DI      
18A8   FD E5                  PUSH   IY   
18AA   E5                     PUSH   HL   
18AB   FD E1                  POP   IY   
18AD   21 92 18               LD   HL,L1892   
18B0   E5                     PUSH   HL   
18B1   61                     LD   H,C   
18B2   08                     EX   AF,AF'   ; save carry
18B3   AF                     XOR   A   
18B4   4F                     LD   C,A   
18B5                             ; 
18B5   C0           L18B5:    RET   NZ   
18B6                             ; 
18B6   2E 00        L18B6:    LD   L,$00   
18B8   06 B8        L18B8:    LD   B,$B8   
18BA                             ; 
18BA   CD 11 19               CALL   L1911   ; 
18BD                             ; 
18BD   30 F6                  JR   NC,L18B5   ; 
18BF                             ; 
18BF   3E DF                  LD   A,$DF   
18C1   B8                     CP   B   
18C2   30 F2                  JR   NC,L18B6   ; 
18C4                             ; 
18C4   2C                     INC   L   
18C5   20 F1                  JR   NZ,L18B8   ; 
18C7                             ; 
18C7   06 CF        L18C7:    LD   B,$CF   
18C9                             ; 
18C9   CD 15 19               CALL   L1915   ; 
18CC                             ; 
18CC   30 E7                  JR   NC,L18B5   ; 
18CE                             ; 
18CE   78                     LD   A,B   
18CF   FE D8                  CP   $D8   
18D1   30 F4                  JR   NC,L18C7   ; 
18D3                             ; 
18D3   CD 15 19               CALL   L1915   ; 
18D6   D0                     RET   NC   
18D7                             ; 
18D7   CD FC 18               CALL   L18FC   ; 
18DA   D0                     RET   NC   
18DB                             ; 
18DB   3F                     CCF      
18DC   C0                     RET   NZ   
18DD                             ; 
18DD   18 11                  JR   L18F0   ; 
18DF                             ; 
18DF                             ; ---
18DF                             ; 
18DF   08           L18DF:    EX   AF,AF'   
18E0   30 05                  JR   NC,L18E7   ; 
18E2   FD 75 00               LD   (IY+$00),L   
18E5   18 05                  JR   L18EC   ; 
18E7                             ; 
18E7                             ; ---
18E7                             ; 
18E7   FD 7E 00     L18E7:    LD   A,(IY+$00)   
18EA   AD                     XOR   L   
18EB   C0                     RET   NZ   
18EC                             ; 
18EC   FD 23        L18EC:    INC   IY   
18EE   1B                     DEC   DE   
18EF   08                     EX   AF,AF'   
18F0                             ; 
18F0   CD FC 18     L18F0:    CALL   L18FC   ; 
18F3                             ; 
18F3   D0                     RET   NC   
18F4                             ; 
18F4   7A                     LD   A,D   
18F5   B3                     OR   E   
18F6   20 E7                  JR   NZ,L18DF   ; 
18F8                             ; 
18F8   7C                     LD   A,H   
18F9   FE 01                  CP   $01   
18FB   C9           L18FB:    RET      
18FC                             ; 
18FC                             ; ---
18FC                             ; 
18FC   2E 01        L18FC:    LD   L,$01   
18FE   06 C7        L18FE:    LD   B,$C7   
1900                             ; 
1900   CD 11 19               CALL   L1911   ; 
1903                             ; 
1903   D0                     RET   NC   
1904                             ; 
1904   3E E2                  LD   A,$E2   
1906   B8                     CP   B   
1907   CB 15                  RL   L   
1909   D2 FE 18               JP   NC,L18FE   ; 
190C                             ; 
190C   7C                     LD   A,H   
190D   AD                     XOR   L   
190E   67                     LD   H,A   
190F   37                     SCF      
1910   C9                     RET      
1911                             ; 
1911                             ; ---
1911                             ; 
1911   CD 15 19     L1911:    CALL   L1915   ; 
1914   D0                     RET   NC   
1915                             ; 
1915   3E 14        L1915:    LD   A,$14   
1917   3D           L1917:    DEC   A   
1918                             ; 
1918   20 FD                  JR   NZ,L1917   ; 
191A                             ; 
191A   A7                     AND   A   
191B                             ; 
191B   04           L191B:    INC   B   
191C   C8                     RET   Z   
191D                             ; 
191D   3E 7F                  LD   A,$7F   
191F   DB FE                  IN   A,($FE)   
1921   1F                     RRA      
1922   D0                     RET   NC   
1923                             ; 
1923   A9                     XOR   C   
1924   E6 10                  AND   $10   
1926   28 F3                  JR   Z,L191B   ; 
1928                             ; 
1928   79                     LD   A,C   
1929   2F                     CPL      
192A   4F                     LD   C,A   
192B   37                     SCF      
192C   C9                     RET      
192D                             ; 
192D                             ; ---------------
192D                             ; THE "SAVE" WORD
192D                             ; ---------------
192D                             ; SAVE name.
192D                             ; Saves entire dictionary in RAM on a dictionary type cassette file with the
192D                             ; given name. Makes a noise on the internal loudspeaker.
192D                             ; 
192D   53 41 56     L192D:    DB   "SAV"   ; "name field"
1930   C5                     DB   "E" + $80   
1931                             ; 
1931   6F 16                  DW   L166F   ; "link field"
1933                             ; 
1933   04           L1933:    DB   $04   ; "name length field"
1934                             ; 
1934   C3 0E        L1934:    DW   L0EC3   ; "code field" - docolon
1936                             ; 
1936                             ; ---
1936                             ; 
1936   10 1A                  DW   L1A10   ; word to pad
1938   4F 1A                  DW   L1A4F   ;  prep some sort of header?
193A   B6 04                  DW   L04B6   ; exit
193C                             ; 
193C                             ; ----------------
193C                             ; THE "BSAVE" WORD
193C                             ; ----------------
193C                             ; BSAVE name
193C                             ; (m, n -- )
193C                             ; Save n bytes to bytes type cassette file "name" starting at
193C                             ; address m.
193C                             ; 
193C                             ; 
193C   42 53 41 56  L193C:    DB   "BSAV"   ; "name field"
1940   C5                     DB   "E" + $80   
1941                             ; 
1941   33 19                  DW   L1933   ; "link field"
1943                             ; 
1943   05           L1943:    DB   $05   ; "name length field"
1944                             ; 
1944   C3 0E        L1944:    DW   L0EC3   ; "code field" - docolon
1946                             ; 
1946                             ; ---
1946                             ; 
1946   3D 1A        L1946:    DW   L1A3D   ; prep_header
1948   4F 1A                  DW   L1A4F   ; prep some sort of header?
194A   B6 04                  DW   L04B6   ; exit
194C                             ; 
194C                             ; 
194C                             ; ----------------
194C                             ; THE "BLOAD" WORD
194C                             ; ----------------
194C                             ; BLOAD name
194C                             ; (m, n -- )
194C                             ; Load at most n bytes of bytes type cassette file "name" starting at
194C                             ; address m. ERROR 10 if the file has more than m bytes.
194C                             ; 
194C   42 4C 4F 41  L194C:    DB   "BLOA"   ; "name field"
1950   C4                     DB   "D" + $80   
1951                             ; 
1951   43 19                  DW   L1943   ; "link field"
1953                             ; 
1953   05           L1953:    DB   $05   ; "name length field"
1954                             ; 
1954   C3 0E        L1954:    DW   L0EC3   ; "code field" - docolon
1956                             ; 
1956                             ; ---
1956                             ; 
1956   3D 1A                  DW   L1A3D   ; prep_header
1958   74 1A                  DW   L1A74   ; ld-bytes??
195A   B8 1A                  DW   L1AB8   ; tapeFF
195C   B6 04                  DW   L04B6   ; exit
195E                             ; 
195E                             ; -----------------
195E                             ; THE "VERIFY" WORD
195E                             ; -----------------
195E                             ; VERIFY name
195E                             ; (  --  )
195E                             ; Verifies dictionary on tape against dictionary in RAM.
195E                             ; 
195E   56 45 52 49 46 L195E:   DB   "VERIF"   ; "name field"
1963   D9                     DB   "Y" + $80   
1964                             ; 
1964   53 19                  DW   L1953   ; "link field"
1966                             ; 
1966   06           L1966:    DB   $06   ; "name length field"
1967                             ; 
1967   C3 0E        L1967:    DW   L0EC3   ; "code field" - docolon
1969                             ; 
1969                             ; ---
1969                             ; 
1969   10 1A        L1969:    DW   L1A10   ; word to pad
196B   71 12                  DW   L1271   ; branch
196D   0F 00        L196D:    DW   $000F   ; 15 bytes forward to L197D
196F                             ; 
196F                             ; 
196F                             ; ------------------
196F                             ; THE "BVERIFY" WORD
196F                             ; ------------------
196F                             ; BVERIFY name
196F                             ; (m, n -- )
196F                             ; Verify at most n bytes of bytes type cassette file "name" against
196F                             ; RAM starting at address m. ERROR 10 if the file has more than m bytes.
196F                             ; For BLOAD and BVERIFY, if m = 0, then starts at the address the bytes
196F                             ; were saved from. If n = 0, then doesn't care about the length.
196F                             ; 
196F                             ; 
196F   42 56 45 52 49 46 L196F:   DB   "BVERIF"   ; "name field"
1975   D9                     DB   "Y" + $80   
1976                             ; 
1976   66 19                  DW   L1966   ; "link field"
1978                             ; 
1978   07           L1978:    DB   $07   ; "name length field"
1979                             ; 
1979   C3 0E        L1979:    DW   L0EC3   ; "code field" - docolon
197B                             ; 
197B                             ; ---
197B                             ; 
197B   3D 1A        L197B:    DW   L1A3D   ; prep_header
197D                             ; 
197D                             ; ->
197D                             ; 
197D   74 1A        L197D:    DW   L1A74   ; ld_bytes
197F   BE 1A                  DW   L1ABE   ; tape00
1981   B6 04                  DW   L04B6   ; exit
1983                             ; 
1983                             ; ---------------
1983                             ; THE "LOAD" WORD
1983                             ; ---------------
1983                             ; LOAD name
1983                             ; (  --  )
1983                             ; Searches for a dictionary cassette file "name" and loads it in, adding it
1983                             ; to end of old dictionary. Writes to the screen all files found on tape.
1983                             ; For best results turn the tone control on the tape recorder right down
1983                             ; (as bass as possible) and the volume control to about three-quarters
1983                             ; maximum.
1983                             ; 
1983   4C 4F 41     L1983:    DB   "LOA"   ; "name field"
1986   C4                     DB   "D" + $80   
1987                             ; 
1987   78 19                  DW   L1978   ; "link field"
1989                             ; 
1989   04           L1989:    DB   $04   ; "name length field"
198A                             ; 
198A   C3 0E        L198A:    DW   L0EC3   ; "code field" - docolon
198C                             ; 
198C                             ; ---
198C                             ; 
198C   10 1A        L198C:    DW   L1A10   ; word to pad
198E                             ; 
198E   0E 1A                  DW   L1A0E   ; end-forth.
1990                             ; 
1990   2A 37 3C               LD   HL,($3C37)   ; STKBOT
1993   22 0E 23               LD   ($230E),HL   
1996   EB                     EX   DE,HL   
1997   21 CC FF               LD   HL,$FFCC   
199A   39                     ADD   HL,SP   
199B   A7                     AND   A   
199C   ED 52                  SBC   HL,DE   
199E   22 0C 23               LD   ($230C),HL   
19A1                             ; 
19A1   CD B9 04               CALL   L04B9   ; forth
19A4                             ; 
19A4   74 1A        L19A4:    DW   L1A74   ; ld_bytes
19A6   B8 1A                  DW   L1AB8   ; tapeFF
19A8   0E 1A                  DW   L1A0E   ; end-forth.
19AA                             ; 
19AA   ED 4B 37 3C            LD   BC,($3C37)   ; STKBOT
19AE   21 50 3C               LD   HL,$3C50   
19B1   22 01 27               LD   ($2701),HL   
19B4   23                     INC   HL   
19B5   22 09 27               LD   ($2709),HL   
19B8   2A 25 23               LD   HL,($2325)   
19BB   09                     ADD   HL,BC   
19BC   22 37 3C               LD   ($3C37),HL   ; STKBOT
19BF   21 AF C3               LD   HL,$C3AF   
19C2   09                     ADD   HL,BC   
19C3   22 0B 27               LD   ($270B),HL   
19C6   ED 5B 29 23            LD   DE,($2329)   
19CA   19                     ADD   HL,DE   
19CB   ED 5B 4C 3C            LD   DE,($3C4C)   
19CF   22 4C 3C               LD   ($3C4C),HL   
19D2   C5                     PUSH   BC   
19D3   D5                     PUSH   DE   
19D4                             ; 
19D4                             ; 
19D4   ED 73 0D 27  L19D4:    LD   ($270D),SP   
19D8   CD 04 15               CALL   L1504   ; 
19DB   C1                     POP   BC   
19DC   E1                     POP   HL   
19DD   CB 7E        L19DD:    BIT   7,(HL)   
19DF   23                     INC   HL   
19E0   28 FB                  JR   Z,L19DD   ; 
19E2   23                     INC   HL   
19E3   23                     INC   HL   
19E4   71                     LD   (HL),C   
19E5   23                     INC   HL   
19E6   70                     LD   (HL),B   
19E7   2A 37 3C               LD   HL,($3C37)   ; STKBOT
19EA   01 0C 00               LD   BC,$000C   ; allow twelve bytes for underflow.
19ED   09                     ADD   HL,BC   
19EE   22 3B 3C               LD   ($3C3B),HL   ; SPARE
19F1   FD E9                  JP   (IY)   ; to "next".
19F3                             ; 
19F3                             ; ---
19F3                             ; 
19F3   C3 0E        L19F3:    DW   L0EC3   ; "code field" - docolon
19F5   4B 10                  DW   L104B   ; stk_data
19F7   20                     DB   $20   ; a space delimiter
19F8   AB 05                  DW   L05AB   ; word          (to pad)
19FA   0E 1A                  DW   L1A0E   ; end-forth.
19FC                             ; 
19FC                             ; ---
19FC                             ; 
19FC   CD 2E 0F     L19FC:    CALL   L0F2E   ; blank stack
19FF                             ; 
19FF   DF           L19FF:    RST   18H   ; pop word DE
1A00                             ; 
1A00   3E 20                  LD   A,$20   ; 
1A02   12                     LD   (DE),A   ; 
1A03   11 0C 27               LD   DE,$270C   ; 
1A06   21 FF 27               LD   HL,$27FF   ; 
1A09                             ; 
1A09   CD FA 07               CALL   L07FA   ; routine SPACE_FILL
1A0C                             ; 
1A0C   FD E9                  JP   (IY)   ; to "next".
1A0E                             ; 
1A0E                             ; ---
1A0E                             ; 
1A0E                             ; 
1A0E   FB 18        L1A0E:    DW   L18FB   ; location of RET instruction.
1A10                             ; 
1A10                             ; ---
1A10                             ; 
1A10   C3 0E        L1A10:    DW   L0EC3   ; "code field" - docolon
1A12   F3 19                  DW   L19F3   ; word to pad
1A14   0E 1A                  DW   L1A0E   ; end-forth.
1A16                             ; 
1A16   AF                     XOR   A   ; 
1A17   32 01 23               LD   ($2301),A   ; 
1A1A   21 51 3C               LD   HL,$3C51   ; 
1A1D   22 0E 23               LD   ($230E),HL   ; 
1A20   EB                     EX   DE,HL   ; 
1A21   2A 37 3C               LD   HL,($3C37)   ; STKBOT
1A24   A7                     AND   A   ; 
1A25   ED 52                  SBC   HL,DE   
1A27   22 0C 23               LD   ($230C),HL   
1A2A   2A 4C 3C               LD   HL,($3C4C)   
1A2D   22 10 23               LD   ($2310),HL   
1A30   21 31 3C               LD   HL,$3C31   ; CURRENT
1A33   11 12 23               LD   DE,$2312   
1A36   01 08 00               LD   BC,$0008   ; 
1A39                             ; 
1A39   ED B0                  LDIR      ; 
1A3B                             ; 
1A3B   FD E9                  JP   (IY)   ; to "next".
1A3D                             ; 
1A3D                             ; ---
1A3D                             ; 
1A3D                             ; 
1A3D   C3 0E        L1A3D:    DW   L0EC3   ; "code field" - docolon
1A3F   F3 19                  DW   L19F3   ; word to pad
1A41   11 10                  DW   L1011   ; stack next word
1A43   0C 23                  DW   $230C   ; header location
1A45   C1 08                  DW   L08C1   ; !     store int at address
1A47   11 10                  DW   L1011   ; stack next word
1A49   0E 23                  DW   $230E   ; header location
1A4B   C1 08                  DW   L08C1   ; !     store int at address
1A4D   B6 04                  DW   L04B6   ; exit
1A4F                             ; 
1A4F                             ; ---
1A4F                             ; 
1A4F   51 1A        L1A4F:    DW   L1A51   
1A51                             ; 
1A51   3A 02 23     L1A51:    LD   A,($2302)   ; length of word in pad
1A54   A7                     AND   A   
1A55   28 5F                  JR   Z,L1AB6   ; forward if null.
1A57                             ; 
1A57   2A 0C 23               LD   HL,($230C)   
1A5A   7C                     LD   A,H   
1A5B   B5                     OR   L   
1A5C   28 58                  JR   Z,L1AB6   ; 
1A5E                             ; 
1A5E   E5                     PUSH   HL   
1A5F   11 19 00               LD   DE,$0019   ; 
1A62   21 01 23               LD   HL,$2301   ; pad using ROM priority
1A65   4A                     LD   C,D   ; 
1A66                             ; 
1A66   CD 20 18               CALL   L1820   ; 
1A69                             ; 
1A69   D1                     POP   DE   
1A6A   2A 0E 23               LD   HL,($230E)   ; 
1A6D   0E FF                  LD   C,$FF   
1A6F                             ; 
1A6F   CD 20 18               CALL   L1820   ; 
1A72                             ; 
1A72   FD E9                  JP   (IY)   ; to "next".
1A74                             ; 
1A74                             ; ---
1A74                             ; ld_bytes
1A74                             ; ---
1A74                             ; 
1A74   76 1A        L1A74:    DW   L1A76   
1A76                             ; 
1A76   11 19 00     L1A76:    LD   DE,$0019   
1A79   21 1A 23               LD   HL,$231A   
1A7C   4A                     LD   C,D   
1A7D                             ; 
1A7D   37                     SCF      
1A7E                             ; 
1A7E   CD A7 18               CALL   L18A7   ; 
1A81                             ; 
1A81   30 F3                  JR   NC,L1A76   ; loop back until read
1A83                             ; 
1A83   11 1A 23               LD   DE,$231A   
1A86   1A                     LD   A,(DE)   
1A87   A7                     AND   A   
1A88   20 0B                  JR   NZ,L1A95   ; 
1A8A                             ; 
1A8A   CD 08 18               CALL   L1808   ; pr_inline
1A8D                             ; 
1A8D                             ; ---
1A8D                             ; 
1A8D   0D           L1A8D:    DB   $0D   ; newline
1A8E   44 69 63 74            DB   "Dict"   
1A92   BA                     DB   ":" + $80   ; 
1A93                             ; 
1A93   18 0A        L1A93:    JR   L1A9F   ; 
1A95                             ; 
1A95                             ; ---
1A95                             ; 
1A95   CD 08 18     L1A95:    CALL   L1808   ; pr_inline
1A98                             ; 
1A98   0D           L1A98:    DB   $0D   ; newline
1A99                             ; 
1A99   42 79 74 65 73         DB   "Bytes"   
1A9E   BA                     DB   ":" + $80   ; 
1A9F                             ; 
1A9F                             ; ---
1A9F                             ; 
1A9F   21 01 23     L1A9F:    LD   HL,$2301   
1AA2   01 0B 0B               LD   BC,$0B0B   
1AA5   18 02                  JR   L1AA9   ; 
1AA7                             ; 
1AA7                             ; ---
1AA7                             ; 
1AA7   1A           L1AA7:    LD   A,(DE)   
1AA8   CF                     RST   08H   ; print_ch
1AA9                             ; 
1AA9   1A           L1AA9:    LD   A,(DE)   
1AAA   BE                     CP   (HL)   
1AAB   20 01                  JR   NZ,L1AAE   ; 
1AAD   0D                     DEC   C   
1AAE                             ; 
1AAE   23           L1AAE:    INC   HL   
1AAF   13                     INC   DE   
1AB0   10 F5                  DJNZ   L1AA7   ; 
1AB2                             ; 
1AB2   20 C2                  JR   NZ,L1A76   ; 
1AB4   FD E9                  JP   (IY)   ; to "next".
1AB6                             ; 
1AB6                             ; ---
1AB6                             ; 
1AB6   E7           L1AB6:    RST   20H   ; Error 10
1AB7   0A                     DB   $0A   ; Tape error
1AB8                             ; 
1AB8                             ; ---
1AB8                             ; 
1AB8                             ; ---
1AB8                             ; 
1AB8   BA 1A        L1AB8:    DW   L1ABA   ; headerless "code field"
1ABA                             ; 
1ABA   06 FF        L1ABA:    LD   B,$FF   
1ABC   18 12                  JR   L1AD0   ; forward to +->
1ABE                             ; 
1ABE                             ; ---
1ABE                             ; 
1ABE                             ; ---
1ABE                             ; 
1ABE   C0 1A        L1ABE:    DW   L1AC0   ; headerless "code field"
1AC0                             ; 
1AC0   21 12 23     L1AC0:    LD   HL,$2312   
1AC3   11 2B 23               LD   DE,$232B   
1AC6   06 08                  LD   B,$08   
1AC8                             ; 
1AC8   1A           L1AC8:    LD   A,(DE)   
1AC9   13                     INC   DE   
1ACA   BE                     CP   (HL)   
1ACB   23                     INC   HL   
1ACC   20 E8                  JR   NZ,L1AB6   ; back to tape error
1ACE                             ; 
1ACE   10 F8                  DJNZ   L1AC8   ; back for all 8
1AD0                             ; 
1AD0                             ; common code - B is $00 from above or $FF from previous.
1AD0                             ; 
1AD0   2A 0C 23     L1AD0:    LD   HL,($230C)   
1AD3   ED 5B 25 23            LD   DE,($2325)   
1AD7   7C                     LD   A,H   
1AD8   B5                     OR   L   
1AD9   28 04                  JR   Z,L1ADF   ; skip if zero
1ADB                             ; 
1ADB   ED 52                  SBC   HL,DE   
1ADD   38 D7                  JR   C,L1AB6   ; back to tape error
1ADF                             ; 
1ADF   2A 0E 23     L1ADF:    LD   HL,($230E)   
1AE2   7C                     LD   A,H   
1AE3   B5                     OR   L   
1AE4   20 03                  JR   NZ,L1AE9   ; skip if zero
1AE6   2A 27 23               LD   HL,($2327)   
1AE9                             ; 
1AE9   0E FF        L1AE9:    LD   C,$FF   
1AEB   CB 18                  RR   B   
1AED                             ; 
1AED   CD A7 18               CALL   L18A7   ; 
1AF0                             ; 
1AF0   30 C4                  JR   NC,L1AB6   ; back to report tape error
1AF2                             ; 
1AF2   FD E9                  JP   (IY)   ; to "next".
1AF4                             ; 
1AF4                             ; ==========================================================
1AF4                             ; THE "FLOATING POINT ARITHMETIC" ROUTINES
1AF4                             ; ==========================================================
1AF4                             ; 
1AF4                             ; ---------------------
1AF4                             ; THE "PREP_FP" ROUTINE
1AF4                             ; ---------------------
1AF4                             ; ( f1, f2 -- m1, m2 )
1AF4                             ; -> from add/mult/div
1AF4                             ; Entered with two floating point numbers on the stack.
1AF4                             ; The exponents are stored in the first two bytes of FP_WS and the third byte
1AF4                             ; is loaded with the manipulated result sign.
1AF4                             ; the two exponent locations on the Data Stack are blanked leaving just the
1AF4                             ; binary coded mantissas.
1AF4                             ; 
1AF4                             ; Begin by clearing the first part of the workspace.
1AF4                             ; 
1AF4   01 0F 3C     L1AF4:    LD   BC,$3C0F   ; byte 15 of the 19 bytes at FP_WS
1AF7                             ; 
1AF7   AF                     XOR   A   ; clear accumulator.
1AF8                             ; 
1AF8   02           L1AF8:    LD   (BC),A   ; clear the workspace.
1AF9   0D                     DEC   C   ; decrement low byte of address.
1AFA   20 FC                  JR   NZ,L1AF8   ; and back until at $3C00
1AFC                             ; 
1AFC                             ; 
1AFC                             ; 
1AFC   2A 3B 3C               LD   HL,($3C3B)   ; fetch end of data stack+1 from SPARE.
1AFF   11 FC FF               LD   DE,$FFFC   ; prepare  -4
1B02                             ; 
1B02   2B                     DEC   HL   ; point to last byte of stack.
1B03   4E                     LD   C,(HL)   ; sign/exponent of (f2) to C.
1B04   77                     LD   (HL),A   ; replace with zero to take overflow.
1B05                             ; 
1B05   19                     ADD   HL,DE   ; subtract four from address
1B06                             ; 
1B06                             ; update system variable SPARE - this could be deferred.
1B06                             ; 
1B06   23                     INC   HL   ; point to location after (f1).
1B07   22 3B 3C               LD   ($3C3B),HL   ; update system variable SPARE
1B0A   2B                     DEC   HL   ; point to exponent of (f1)
1B0B                             ; 
1B0B   46                     LD   B,(HL)   ; sign/exponent of (f1) to B.
1B0C   77                     LD   (HL),A   ; replace with zero.
1B0D                             ; 
1B0D                             ; At this stage we have the sign/exponent of (f1) in B and the sign/exponent
1B0D                             ; of (f2) in C. The next section places the sign bit of (f1) in but 7 of A
1B0D                             ; and the sign bit of (f2) in bit 6 of A. The other bits are of no importance.
1B0D                             ; 
1B0D   79                     LD   A,C   ; transfer C to A.
1B0E   0F                     RRCA      ; rotate sign bit to bit 6.
1B0F   A8                     XOR   B   ; XOR B
1B10   E6 7F                  AND   $7F   ; mask off bits to restore
1B12   A8                     XOR   B   ; bit 6 as it was, bit 7 of B to A.
1B13                             ; 
1B13   32 02 3C     L1B13:    LD   ($3C02),A   ; FP_WS_02             see L1C2F
1B16                             ; 
1B16   CB B8                  RES   7,B   ; make both numbers
1B18   CB B9                  RES   7,C   ; positive
1B1A                             ; 
1B1A   ED 43 00 3C            LD   ($3C00),BC   ; store the exponents at start of FP_WS
1B1E                             ; 
1B1E   23                     INC   HL   ; point to (f2) again.
1B1F   EB                     EX   DE,HL   ; transfer f2 pointer to DE, HL now -4
1B20   19                     ADD   HL,DE   ; subtract four to point HL at (f1)
1B21   C9                     RET      ; return.
1B22                             ; 
1B22                             ; On exit, HL -> (f1), DE -> (f2), B = exponent of (f1), C = exponent of (f2).
1B22                             ; 
1B22                             ; -----------------------------
1B22                             ; THE "SHIFT_ADDEND" SUBROUTINE
1B22                             ; -----------------------------
1B22                             ; 
1B22   3E 09        L1B22:    LD   A,$09   
1B24   B8                     CP   B   
1B25   30 01                  JR   NC,L1B28   ; 
1B27                             ; 
1B27   47                     LD   B,A   ; set shift counter to nine. i.e clear.
1B28                             ; 
1B28   0E 04        L1B28:    LD   C,$04   ; four bytes
1B2A   23                     INC   HL   
1B2B   23                     INC   HL   
1B2C   23                     INC   HL   ; point to highest byte
1B2D                             ; 
1B2D   AF                     XOR   A   ; prepare to start with a blank nibble.
1B2E                             ; 
1B2E   ED 67        L1B2E:    RRD      ; A=0000 XXXX --> 7654->3210 =(HL)
1B30                             ;          \_____<-______/
1B30                             ; 
1B30   2B                     DEC   HL   ; point to next lower byte on Data Stack
1B31   0D                     DEC   C   ; decrement the byte counter.
1B32   20 FA                  JR   NZ,L1B2E   ; loop for all 4 bytes = 1 nibble shift
1B34                             ; 
1B34   23                     INC   HL   ; set pointer to start of number again
1B35   10 F1                  DJNZ   L1B28   ; decrement the shift counter and loop.
1B37                             ; 
1B37   C6 FB                  ADD   A,$FB   ; add minus five to last nibble lost
1B39                             ; will set the carry flag if 5 or more.
1B39                             ; 
1B39   E5                     PUSH   HL   ; preserve pointer to start of addend.
1B3A                             ; 
1B3A   7E           L1B3A:    LD   A,(HL)   ; fetch the pair of BCD nibbles.
1B3B                             ; 
1B3B   88                     ADC   A,B   ; increment if carry set (B = 0)
1B3C   27                     DAA      ; Decimal Adjust Accumulator
1B3D                             ; ($99 becomes $00 with carry set).
1B3D                             ; 
1B3D   77                     LD   (HL),A   ; put nibbles back.
1B3E   23                     INC   HL   ; point to next significant pair of
1B3F                             ; binary coded decimal digits.
1B3F   38 F9                  JR   C,L1B3A   ; and ripple any rounding through.
1B41                             ; 
1B41   E1                     POP   HL   ; retrieve the pointer to start.
1B42   C9                     RET      ; return.
1B43                             ; 
1B43                             ; ---------------------------
1B43                             ; THE "BCD NEGATE" SUBROUTINE
1B43                             ; ---------------------------
1B43                             ; Negates the four byte, 8 nibble, binary coded decimal on the Data Stack.
1B43                             ; For example -123.456
1B43                             ; is prepared as $00 $12 $34 $56
1B43                             ; and negated as $99 $87 $65 $34
1B43                             ; 
1B43   C5           L1B43:    PUSH   BC   ; preserve the two
1B44   E5                     PUSH   HL   ; main registers used.
1B45                             ; 
1B45   06 04                  LD   B,$04   ; set byte counter to four.
1B47   A7                     AND   A   ; clear carry.
1B48                             ; 
1B48   3E 00        L1B48:    LD   A,$00   ; set to zero without disturbing carry.
1B4A                             ; 
1B4A   9E                     SBC   A,(HL)   ; subtract pair of digits
1B4B   27                     DAA      ; Decimal Adjust Accumulator
1B4C                             ; adjusts as if from 100 setting carry
1B4C                             ; 
1B4C   77                     LD   (HL),A   ; place adjusted decimals back.
1B4D                             ; 
1B4D   23                     INC   HL   ; next location on Data Stack.
1B4E                             ; 
1B4E   10 F8                  DJNZ   L1B48   ; loop for all 4 bytes.
1B50                             ; 
1B50   E1                     POP   HL   ; restore the
1B51   C1                     POP   BC   ; saved registers.
1B52                             ; 
1B52   C9                     RET      ; return.
1B53                             ; 
1B53                             ; ------------------------------
1B53                             ; THE "BCD OPERATION" SUBROUTINE
1B53                             ; ------------------------------
1B53                             ; This versatile routine performs the binary coded decimal addition of
1B53                             ; two floating point values with C = 1.
1B53                             ; The second entry point is used in multiplication.
1B53                             ; 
1B53                             ; ->
1B53   0E 01        L1B53:    LD   C,$01   ; signal the operation is addition.
1B55                             ; 
1B55                             ; -> (with c!=0)
1B55   E5           L1B55:    PUSH   HL   ; preserve the
1B56   D5                     PUSH   DE   ; three main
1B57   C5                     PUSH   BC   ; registers.
1B58                             ; 
1B58   79                     LD   A,C   ; treat C as a binary coded decimal.
1B59   E6 0F                  AND   $0F   ; isolate the right-hand nibble.
1B5B   47                     LD   B,A   ; transfer R.H. nibble to B
1B5C                             ; 
1B5C   A9                     XOR   C   ; A now has L.H. nibble.
1B5D   4F                     LD   C,A   ; place in C.
1B5E                             ; 
1B5E                             ; this next magical routine converts the two BCD digits to binary.
1B5E                             ; imagine we started with ninety-nine so C = 1001 0000  and B = 0000 1001
1B5E                             ; 
1B5E   0F                     RRCA      ;    0100 1000
1B5F   0F                     RRCA      ;    0010 0100
1B60   81                     ADD   A,C   ;    1011 0100
1B61   0F                     RRCA      ;    0101 1010
1B62   80                     ADD   A,B   ;    0110 0011  = 99 binary
1B63                             ; 
1B63   4F                     LD   C,A   ;    binary multiplier in C
1B64                             ; 
1B64                             ; note that for simple addition C is unchanged and still contains 1.
1B64                             ; 
1B64   06 04                  LD   B,$04   ; four bytes to consider
1B66   AF                     XOR   A   ; clear accumulator ensuring no initial
1B67                             ; carry is fed into the loop.
1B67                             ; 
1B67                             ; loop
1B67                             ; 
1B67   C5           L1B67:    PUSH   BC   ; push the counters.
1B68   D5                     PUSH   DE   ; push the (f2) pointer
1B69                             ; 
1B69   E5                     PUSH   HL   ; push the (f1) pointer.
1B6A                             ; 
1B6A   86                     ADD   A,(HL)   ; add any running carry to (f1) cell.
1B6B                             ; 
1B6B   27                     DAA      ; Decimal Adjust Accumulator
1B6C                             ; possibly setting carry.
1B6C                             ; 
1B6C   6F                     LD   L,A   ; result to L
1B6D   1A                     LD   A,(DE)   ; fetch (f2) cell value.
1B6E   26 00                  LD   H,$00   ; set high bytes H and D to
1B70   54                     LD   D,H   ; zero without disturbing carry
1B71                             ; 
1B71   CB 14                  RL   H   ; now pick up any carry in H.
1B73                             ; 
1B73   A7                     AND   A   ; test (f2) cell value.
1B74   28 1B                  JR   Z,L1B91   ; skip forward to just store the carry
1B76                             ; result if the addend value is zero.
1B76                             ; 
1B76   5F                     LD   E,A   ; else DE now holds cell value.
1B77                             ; 
1B77   CB 39        L1B77:    SRL   C   ; shift counter C   0->76543210->C
1B79                             ; 
1B79   30 08                  JR   NC,L1B83   ; skip addition if no carry.
1B7B                             ; 
1B7B                             ; else perform HL=HL+DE in BCD.
1B7B                             ; 
1B7B   7D                     LD   A,L   ; fetch low byte of (f1) cell.
1B7C   83                     ADD   A,E   ; add to low byte of (f2) cell.
1B7D   27                     DAA      ; DAA.
1B7E   6F                     LD   L,A   ; result in L and carry.
1B7F                             ; 
1B7F   7C                     LD   A,H   ; fetch high byte possibly 1 from carry
1B80   8A                     ADC   A,D   ; add in any carry from above (D=0)
1B81   27                     DAA      ; comes into play with multiplication.
1B82   67                     LD   H,A   ; result to H.
1B83                             ; 
1B83   0C           L1B83:    INC   C   ; test the counter for zero.
1B84   0D                     DEC   C   ; (will be if addition)
1B85   28 0A                  JR   Z,L1B91   ; forward when zero ->
1B87                             ; 
1B87                             ; else is BCD multiplication - double the DE value.
1B87                             ; 
1B87   7B                     LD   A,E   ; 
1B88   87                     ADD   A,A   ; 
1B89   27                     DAA      ; 
1B8A   5F                     LD   E,A   ; 
1B8B                             ; 
1B8B   7A                     LD   A,D   ; 
1B8C   8F                     ADC   A,A   ; 
1B8D   27                     DAA      ; 
1B8E   57                     LD   D,A   ; 
1B8F                             ; 
1B8F   18 E6                  JR   L1B77   ; back to continue multiplying by C.
1B91                             ; 
1B91                             ; ---
1B91                             ; 
1B91                             ; ->
1B91   EB           L1B91:    EX   DE,HL   ; transfer result to DE.
1B92                             ; 
1B92   E1                     POP   HL   ; pop (f1) cell pointer
1B93   73                     LD   (HL),E   ; insert result.
1B94   7A                     LD   A,D   ; transfer any carry to A
1B95   D1                     POP   DE   ; pop the (f2) pointer
1B96   C1                     POP   BC   ; pop the counter, and initial C value.
1B97                             ; 
1B97   13                     INC   DE   ; increment (f2) cell pointer.
1B98   23                     INC   HL   ; increment (f1) cell pointer.
1B99                             ; 
1B99   10 CC                  DJNZ   L1B67   ; loop back for all 4 bytes.
1B9B                             ; 
1B9B   C1                     POP   BC   ; restore the
1B9C   D1                     POP   DE   ; three main
1B9D   E1                     POP   HL   ; registers.
1B9E                             ; 
1B9E   C9                     RET      ; return.
1B9F                             ; 
1B9F                             ; -------------
1B9F                             ; THE "F-" WORD
1B9F                             ; -------------
1B9F                             ; ( f1, f2 -- f1-f2 )
1B9F                             ; Subtracts top two floating point numbers.
1B9F                             ; 
1B9F                             ; just flip the sign and then do floating point addition.
1B9F                             ; 
1B9F   46           L1B9F:    DB   "F"   ; "name field"
1BA0   AD                     DB   "-" + $80   
1BA1                             ; 
1BA1   89 19                  DW   L1989   ; "link field"
1BA3                             ; 
1BA3   02           L1BA3:    DB   $02   ; "name length field"
1BA4                             ; 
1BA4   C3 0E        L1BA4:    DW   L0EC3   ; "code field" - docolon
1BA6                             ; 
1BA6                             ; ---
1BA6                             ; 
1BA6   0F 1D        L1BA6:    DW   L1D0F   ; fnegate
1BA8   0E 1A                  DW   L1A0E   ; end-forth.
1BAA                             ; 
1BAA   18 07                  JR   L1BB3   ; forward to floating point addition.
1BAC                             ; 
1BAC                             ; -------------
1BAC                             ; THE "F+" WORD
1BAC                             ; -------------
1BAC                             ; ( f1, f2 -- f1+f2 )
1BAC                             ; Adds top two floating point numbers.
1BAC                             ; 
1BAC   46           L1BAC:    DB   "F"   ; "name field"
1BAD   AB                     DB   "+" + $80   
1BAE                             ; 
1BAE   A3 1B                  DW   L1BA3   ; "link field"
1BB0                             ; 
1BB0   02           L1BB0:    DB   $02   ; "name length field"
1BB1                             ; 
1BB1   B3 1B        L1BB1:    DW   L1BB3   ; "code field"
1BB3                             ; 
1BB3                             ; ---
1BB3                             ; 
1BB3   CD F4 1A     L1BB3:    CALL   L1AF4   ; PREP_FP
1BB6                             ; 
1BB6   79                     LD   A,C   ; take exponent of second number (f2).
1BB7   90                     SUB   B   ; subtract exponent of first (f1).
1BB8   F5                     PUSH   AF   ; save result flags.
1BB9                             ; 
1BB9   30 06                  JR   NC,L1BC1   ; forward if second number >= first.
1BBB                             ; 
1BBB   EB                     EX   DE,HL   ; else swap the pointers.
1BBC   ED 44                  NEG      ; negate negative result.
1BBE   DD 70 00               LD   (IX+$00),B   ; place B in FP_WS_0  (was C).
1BC1                             ; 
1BC1   47           L1BC1:    LD   B,A   ; put positive subtraction result in B.
1BC2                             ; 
1BC2   C4 22 1B               CALL   NZ,L1B22   ; routine SHIFT_ADDEND aligns digits if
1BC5                             ; exponents are not equal.
1BC5                             ; 
1BC5   F1                     POP   AF   ; retrieve subtraction result flags.
1BC6   30 01                  JR   NC,L1BC9   ; forward is second number was >= first.
1BC8                             ; 
1BC8   EB                     EX   DE,HL   ; else switch the pointers back.
1BC9                             ; 
1BC9   06 02        L1BC9:    LD   B,$02   ; two floating point numbers to consider
1BCB                             ; 
1BCB   DD 4E 02               LD   C,(IX+$02)   ; FP_WS_02
1BCE                             ; 
1BCE   CB 11        L1BCE:    RL   C   ; test sign bit first bit 7 then bit 6.
1BD0                             ; 
1BD0   DC 43 1B               CALL   C,L1B43   ; routine BCD neg if carry
1BD3                             ; 
1BD3   EB                     EX   DE,HL   ; switch number pointers.
1BD4                             ; 
1BD4   10 F8                  DJNZ   L1BCE   ; decrement counter and loop if second
1BD6                             ; number still to do.
1BD6                             ; 
1BD6   CD 53 1B               CALL   L1B53   ; the BCD ADDITION routine.
1BD9                             ; 
1BD9                             ; The routine preserves main registers so HL->(f1), DE->(f2) and B is zero.
1BD9                             ; 
1BD9   1B                     DEC   DE   ; point to highest byte of result which
1BDA                             ; could be $99 if one negative number
1BDA                             ; involved or $98 if two negatives.
1BDA                             ; 
1BDA   1A                     LD   A,(DE)   ; fetch the result sign byte.
1BDB   C6 68                  ADD   A,$68   ; add $68 causing carry if negative.
1BDD   CB 18                  RR   B   ; pick up carry in bit 7 of B, which
1BDF                             ; was zero so zero flag now set if none.
1BDF                             ; 
1BDF   DD 70 02               LD   (IX+$02),B   ; place result sign in  FP_WS_02
1BE2                             ; 
1BE2   C4 43 1B               CALL   NZ,L1B43   ; routine BCD_NEGATE if negative result.
1BE5                             ; 
1BE5                             ; if the
1BE5                             ; 
1BE5   1A           L1BE5:    LD   A,(DE)   ; 
1BE6   A7                     AND   A   ; 
1BE7                             ; 
1BE7   20 19                  JR   NZ,L1C02   ; 
1BE9                             ; 
1BE9                             ; else A is zero.
1BE9                             ; 
1BE9   DD 35 00               DEC   (IX+$00)   ; decrement the result exponent FP_WS_00
1BEC   DD 35 00               DEC   (IX+$00)   ; as two nibbles will be moved at a time
1BEF                             ; 
1BEF   D5                     PUSH   DE   ; save pointer to 4th byte
1BF0                             ; 
1BF0   62                     LD   H,D   ; make HL
1BF1   6B                     LD   L,E   ; equal to DE
1BF2   2B                     DEC   HL   ; minus one.
1BF3                             ; 
1BF3   01 FF 03               LD   BC,$03FF   ; counter for three bytes. The $FF
1BF6                             ; value ensures B is not affected by
1BF6                             ; the LDD instruction. Also A is 0.
1BF6                             ; 
1BF6   B6           L1BF6:    OR   (HL)   ; (detects if the three bytes are zero)
1BF7                             ; 
1BF7   ED A8                  LDD      ; copy HL contents one location higher
1BF9                             ; to that addressed by DE. Also dec bc.
1BF9                             ; 
1BF9   10 FB                  DJNZ   L1BF6   ; repeat for all 3 bytes
1BFB                             ; 
1BFB   EB                     EX   DE,HL   ; make HL address lowest location
1BFC   70                     LD   (HL),B   ; and insert a zero into vacated byte.
1BFD                             ; 
1BFD   D1                     POP   DE   ; restore the pointer to the 4th byte.
1BFE                             ; 
1BFE   20 E5                  JR   NZ,L1BE5   ; jump back to the end test if something
1C00                             ; was being shifted through.
1C00                             ; 
1C00                             ; else all four bytes are zero - i.e. the result of the addition is zero.
1C00                             ; 
1C00   FD E9                  JP   (IY)   ; to "next".
1C02                             ; 
1C02                             ; ---
1C02                             ; 
1C02                             ; The branch was to here, from the end test above, when the 4th byte had been
1C02                             ; filled.
1C02                             ; Before joining common code, ensure that the initial block move will be
1C02                             ; ineffective.
1C02                             ; 
1C02   54           L1C02:    LD   D,H   ; make DE the same as HL - the source
1C03   5D                     LD   E,L   ; and the destination are the same.
1C04                             ; 
1C04                             ; -> common code from mult and above.
1C04                             ; 
1C04   D5           L1C04:    PUSH   DE   ; save start location.
1C05                             ; 
1C05   01 04 00               LD   BC,$0004   ; 4 bytes to consider.
1C08   ED B0                  LDIR      ; block move sets DE to one past dest.
1C0A                             ; 
1C0A   E1                     POP   HL   ; restore start of source.
1C0B                             ; 
1C0B   1B                     DEC   DE   ; DE now addresses 4th byte.
1C0C                             ; 
1C0C   1A           L1C0C:    LD   A,(DE)   ; load the 4th byte to accumulator.
1C0D   A7                     AND   A   ; test for zero.
1C0E                             ; 
1C0E   28 11                  JR   Z,L1C21   ; skip forward if so.
1C10                             ; 
1C10   FE 10                  CP   $10   ; test if one or two nibbles populated
1C12                             ; setting carry for a single nibble.
1C12                             ; 
1C12   9F                     SBC   A,A   ; $00 for two nibbles, $FF for one.
1C13   3C                     INC   A   ; $01                  $00
1C14   3C                     INC   A   ; $02 for two nibbles, $01 for one :-)
1C15                             ; 
1C15   47                     LD   B,A   ; nibble count to B.
1C16   DD 86 00               ADD   A,(IX+$00)   ; add count to FP_WS_00 the result
1C19   32 00 3C               LD   ($3C00),A   ; exponent and place back in FP_WS_00.
1C1C                             ; 
1C1C   CD 22 1B               CALL   L1B22   ; routine "shift_addend" moves all the
1C1F                             ; nibbles to the right.
1C1F                             ; 
1C1F   18 EB                  JR   L1C0C   ; back to pick up byte and then to
1C21                             ; next routine.
1C21                             ; 
1C21                             ; ---
1C21                             ; 
1C21                             ; now test for a result that is too large or too small.
1C21                             ; Note. these results may have arisen from multiplication or addition.
1C21                             ; 
1C21   3A 00 3C     L1C21:    LD   A,($3C00)   ; fetch result exponent from FP_WS_00
1C24                             ; 
1C24   3D                     DEC   A   ; decrement?
1C25   FE BF                  CP   $BF   ; compare lower limit
1C27   3C                     INC   A   ; increment?
1C28                             ; 
1C28   30 13                  JR   NC,L1C3D   ; forward if less to ZERO_RSLT
1C2A                             ; 
1C2A   FE 80                  CP   $80   ; compare upper limit
1C2C   30 0D                  JR   NC,L1C3B   ; forward to Error 8 - Overflow
1C2E                             ; 
1C2E   47                     LD   B,A   ; save unsigned exponent in B.
1C2F                             ; 
1C2F                             ; now combine result sign and the exponent.
1C2F                             ; for addition then FP_WS_02 contains either $80 or $00 and most of what
1C2F                             ; follows does not apply.
1C2F                             ; for multiplication then bit 7 is sign of (f1) bit 6 is sign of (f2).
1C2F                             ; 
1C2F   3A 02 3C     L1C2F:    LD   A,($3C02)   ; FP_WS_02           see L1B13
1C32                             ; 
1C32   4F                     LD   C,A   ; save a copy in C
1C33   17                     RLA      ; rotate bit 6 to 7
1C34   A9                     XOR   C   ; XOR bit 7 - minus * minus = a plus.
1C35   E6 80                  AND   $80   ; only interested in bit 7.
1C37   A8                     XOR   B   ; combine with exponent.
1C38   12                     LD   (DE),A   ; and place in sign/exp on Data Stack.
1C39                             ; 
1C39   FD E9                  JP   (IY)   ; to "next".
1C3B                             ; 
1C3B                             ; ---
1C3B                             ; 
1C3B   E7           L1C3B:    RST   20H   ; Error 8.
1C3C   08                     DB   $08   ; Overflow in floating-point arithmetic.
1C3D                             ; 
1C3D                             ; ------------------------------------
1C3D                             ; THE "ZERO RESULT" TERMINATING BRANCH
1C3D                             ; ------------------------------------
1C3D                             ; 
1C3D   01 00 04     L1C3D:    LD   BC,$0400   ; count 4 bytes, fill byte is zero.
1C40                             ; 
1C40   71           L1C40:    LD   (HL),C   ; insert a zero.
1C41   23                     INC   HL   ; next location.
1C42   10 FC                  DJNZ   L1C40   ; repeat for all 4 bytes.
1C44                             ; 
1C44   FD E9                  JP   (IY)   ; to "next".
1C46                             ; 
1C46                             ; 
1C46                             ; 
1C46                             ; 
1C46                             ; -------------
1C46                             ; THE "F*" WORD
1C46                             ; -------------
1C46                             ; (f1, f2 -- f1*f2)
1C46                             ; Multiplies top two floating point numbers and leaves result on the stack.
1C46                             ; 
1C46   46           L1C46:    DB   "F"   ; "name field"
1C47   AA                     DB   "*" + $80   
1C48                             ; 
1C48   B0 1B                  DW   L1BB0   ; "link field"
1C4A                             ; 
1C4A   02           L1C4A:    DB   $02   ; "name length field"
1C4B                             ; 
1C4B   4D 1C        L1C4B:    DW   L1C4D   ; "code field"
1C4D                             ; 
1C4D                             ; ---
1C4D                             ; 
1C4D   CD F4 1A     L1C4D:    CALL   L1AF4   ; routine PREP_FP prepares the two
1C50                             ; numbers on the Data Stack placing the
1C50                             ; exponents and signs in FP_WS.
1C50                             ; 
1C50   AF                     XOR   A   ; set accumulator to zero.
1C51   B8                     CP   B   ; compare to exponent of (f1).
1C52   9F                     SBC   A,A   ; $00 if zero or $FF
1C53   A1                     AND   C   ; combine with exponent of (f2).
1C54                             ; 
1C54   28 E7                  JR   Z,L1C3D   ; back if zero to exit via ZERO_RSLT.
1C56                             ; 
1C56   E5                     PUSH   HL   ; save pointer to first number - result.
1C57                             ; 
1C57   01 02 3C               LD   BC,$3C02   ; set BC to location before free
1C5A                             ; workspace set to zero by PREP_FP.
1C5A                             ; 
1C5A   C5                     PUSH   BC   ; push onto machine stack.
1C5B                             ; 
1C5B   06 03                  LD   B,$03   ; count three bytes - six nibbles.
1C5D                             ; 
1C5D   4E           L1C5D:    LD   C,(HL)   ; fetch BCD pair to C
1C5E   23                     INC   HL   ; address more significant pair.
1C5F                             ; 
1C5F   E3                     EX   (SP),HL   ; Data Stack pointer to machine stack,
1C60                             ; workspace pointer to HL.
1C60   23                     INC   HL   ; increment workspace pointer.
1C61                             ; 
1C61   CD 55 1B               CALL   L1B55   ; routine BCD_OP multiplies C by each
1C64                             ; of the 4 bytes of (f2) laying the
1C64                             ; result down in workspace at HL
1C64                             ; 
1C64   E3                     EX   (SP),HL   ; swap in multiplier pointer to HL,
1C65                             ; workspace pointer to machine stack.
1C65                             ; 
1C65   10 F6                  DJNZ   L1C5D   ; repeat for all three bytes.
1C67                             ; 
1C67   ED 4B 00 3C            LD   BC,($3C00)   ; fetch raw exponents from FP_WS_00/01
1C6B   78                     LD   A,B   ; add the exponents
1C6C   81                     ADD   A,C   ; together.
1C6D                             ; 
1C6D   D6 42                  SUB   $42   ; adjust for sign
1C6F                             ; 
1C6F   32 00 3C               LD   ($3C00),A   ; put the result back in FP_WS_00.
1C72                             ; 
1C72   E1                     POP   HL   ; pop workspace pointer to HL.
1C73   D1                     POP   DE   ; pop result pointer to DE.
1C74                             ; 
1C74   18 8E                  JR   L1C04   ; back to common code to copy the 4
1C76                             ; bytes from the workspace to the
1C76                             ; Data Stack and then set exponent
1C76                             ; and sign.
1C76                             ; 
1C76                             ; -------------
1C76                             ; THE "F/" WORD
1C76                             ; -------------
1C76                             ; ( f1, f2 -- f1/f2 )
1C76                             ; Divides two floating point numbers.
1C76                             ; 
1C76   46           L1C76:    DB   "F"   ; "name field"
1C77   AF                     DB   "/" + $80   
1C78                             ; 
1C78   4A 1C                  DW   L1C4A   ; "link field"
1C7A                             ; 
1C7A   02           L1C7A:    DB   $02   ; "name length field"
1C7B                             ; 
1C7B   7D 1C        L1C7B:    DW   L1C7D   ; "code field"
1C7D                             ; 
1C7D                             ;---
1C7D                             ; 
1C7D   CD F4 1A     L1C7D:    CALL   L1AF4   ; routine PREP_FP prepares the two
1C80                             ; numbers (f1) and (f2) placing the
1C80                             ; raw exponents in the first two
1C80                             ; locations of workspace, the signs in
1C80                             ; the next location and clearing the
1C80                             ; sixteen remaining locations.
1C80                             ; This must be the one that uses them
1C80                             ; all.
1C80                             ; 
1C80   AF                     XOR   A   ; set accumulator to zero.
1C81   B8                     CP   B   ; compare to exponent of dividend (f1).
1C82   28 B9                  JR   Z,L1C3D   ; forward if zero to ZERO_RSLT.
1C84                             ; 
1C84   B9                     CP   C   ; compare to exponent of divisor (f2).
1C85   28 B4                  JR   Z,L1C3B   ; back if zero to Error 8 - Overflow.
1C87                             ; division by zero.
1C87                             ; 
1C87                             ; HL points to first number on stack, DE to second.
1C87                             ; 
1C87   13                     INC   DE   ; 
1C88   13                     INC   DE   ; 
1C89   1A                     LD   A,(DE)   ; get first two digits to A
1C8A   1B                     DEC   DE   ; 
1C8B   1B                     DEC   DE   ; back to first
1C8C                             ; 
1C8C   C6 01                  ADD   A,$01   ; add one (e.g. 99 would give 9A)
1C8E   27                     DAA      ; adjust  (e.g. $9A would be $00 carry)
1C8F   08                     EX   AF,AF'   ; save the flags
1C90   EB                     EX   DE,HL   ; HL now points to divisor
1C91                             ; 
1C91   CD 43 1B               CALL   L1B43   ; routine BCD negate the divisor
1C94                             ; 
1C94   EB                     EX   DE,HL   ; point back again.
1C95   E5                     PUSH   HL   ; save pointer to first - the result.
1C96                             ; 
1C96   11 10 3C               LD   DE,$3C10   ; destination FP_WS_10
1C99   01 04 00               LD   BC,$0004   ; four bytes
1C9C                             ; 
1C9C   ED B0                  LDIR      ; copy to end of FP_WS
1C9E                             ; (+ one byte of list_ws)
1C9E                             ; 
1C9E   EB                     EX   DE,HL   ; HL points to last cell plus one.
1C9F   2B                     DEC   HL   ; Now points to last byte copied.
1CA0                             ; 
1CA0   06 05                  LD   B,$05   ; count 5.
1CA2                             ; 
1CA2                             ; loop
1CA2                             ; 
1CA2   D5           L1CA2:    PUSH   DE   ; 
1CA3   7E                     LD   A,(HL)   ; 
1CA4   2B                     DEC   HL   ; 
1CA5   5E                     LD   E,(HL)   ; 
1CA6                             ; 
1CA6   08                     EX   AF,AF'   ; 
1CA7   4F                     LD   C,A   ; 
1CA8   08                     EX   AF,AF'   ; 
1CA9                             ; 
1CA9   0C                     INC   C   ; 
1CAA   0D                     DEC   C   ; 
1CAB   20 03                  JR   NZ,L1CB0   ; 
1CAD                             ; 
1CAD   5F                     LD   E,A   ; 
1CAE   18 1B                  JR   L1CCB   ; 
1CB0                             ; 
1CB0                             ; ---
1CB0                             ; 
1CB0   C5           L1CB0:    PUSH   BC   ; 
1CB1   06 02                  LD   B,$02   ; 
1CB3                             ; 
1CB3   16 10        L1CB3:    LD   D,$10   ; 
1CB5                             ; 
1CB5   CB 23        L1CB5:    SLA   E   ; 
1CB7   17                     RLA      ; 
1CB8   CB 12                  RL   D   ; 
1CBA   30 F9                  JR   NC,L1CB5   ; 
1CBC                             ; 
1CBC   14                     INC   D   ; 
1CBD                             ; 
1CBD   91           L1CBD:    SUB   C   ; 
1CBE   27                     DAA      ; 
1CBF   1C                     INC   E   ; 
1CC0   30 FB                  JR   NC,L1CBD   ; 
1CC2                             ; 
1CC2   15                     DEC   D   ; 
1CC3   20 F8                  JR   NZ,L1CBD   ; 
1CC5                             ; 
1CC5   81                     ADD   A,C   ; 
1CC6   27                     DAA      ; 
1CC7   1D                     DEC   E   ; 
1CC8   10 E9                  DJNZ   L1CB3   ; 
1CCA                             ; 
1CCA   C1                     POP   BC   ; 
1CCB                             ; 
1CCB   4B           L1CCB:    LD   C,E   ; 
1CCC   D1                     POP   DE   ; 
1CCD   0C                     INC   C   ; 
1CCE   0D                     DEC   C   ; 
1CCF   28 17                  JR   Z,L1CE8   ; 
1CD1                             ; 
1CD1   E5                     PUSH   HL   ; 
1CD2   2B                     DEC   HL   ; 
1CD3   2B                     DEC   HL   ; 
1CD4                             ; 
1CD4   CD 55 1B               CALL   L1B55   ; bcd_op mult
1CD7                             ; 
1CD7   D5                     PUSH   DE   ; 
1CD8                             ; 
1CD8   11 FB FF               LD   DE,$FFFB   ; -4
1CDB   19                     ADD   HL,DE   ; 
1CDC                             ; 
1CDC   11 03 3C               LD   DE,$3C03   ; FP_WS_03
1CDF   79                     LD   A,C   ; 
1CE0   12                     LD   (DE),A   ; 
1CE1                             ; 
1CE1   CD 53 1B               CALL   L1B53   ; bcd_op add
1CE4                             ; 
1CE4   D1                     POP   DE   ; 
1CE5   E1                     POP   HL   ; 
1CE6   23                     INC   HL   ; 
1CE7   04                     INC   B   ; 
1CE8                             ; 
1CE8   10 B8        L1CE8:    DJNZ   L1CA2   ; 
1CEA                             ; 
1CEA   2A 00 3C               LD   HL,($3C00)   ; FP_WS
1CED   7C                     LD   A,H   ; 
1CEE   95                     SUB   L   ; 
1CEF   C6 40                  ADD   A,$40   ; 
1CF1                             ; 
1CF1   21 08 3C               LD   HL,$3C08   ; FP_WS
1CF4   47                     LD   B,A   ; 
1CF5   3A 0B 3C               LD   A,($3C0B)   ; 
1CF8   A7                     AND   A   ; 
1CF9   20 03                  JR   NZ,L1CFE   ; 
1CFB                             ; 
1CFB   05                     DEC   B   ; 
1CFC   05                     DEC   B   ; 
1CFD   2B                     DEC   HL   ; 
1CFE                             ; 
1CFE   DD 70 00     L1CFE:    LD   (IX+$00),B   ; 
1D01                             ; 
1D01   D1                     POP   DE   ; 
1D02                             ; 
1D02   C3 04 1C               JP   L1C04   ; back to common code to copy the 4
1D05                             ; bytes from the workspace to the
1D05                             ; Data Stack and then set exponent
1D05                             ; and sign.
1D05                             ; 
1D05                             ; ------------------
1D05                             ; THE "FNEGATE" WORD
1D05                             ; ------------------
1D05                             ; ( f -- -f )
1D05                             ; Floating point negation.
1D05                             ; Toggle the sign bit unless the number is zero (four zero bytes).
1D05                             ; 
1D05   46 4E 45 47 41 54 L1D05:   DB   "FNEGAT"   ; "name field"
1D0B   C5                     DB   "E" + $80   
1D0C                             ; 
1D0C   7A 1C                  DW   L1C7A   ; "link field"
1D0E                             ; 
1D0E   07           L1D0E:    DB   $07   ; "name length field"
1D0F                             ; 
1D0F   11 1D        L1D0F:    DW   L1D11   ; "code field"
1D11                             ; 
1D11                             ; ---
1D11                             ; 
1D11   DF           L1D11:    RST   18H   ; pop word from data stack to DE.
1D12                             ; 
1D12   7A                     LD   A,D   ; exponent byte to A.
1D13   A7                     AND   A   ; test for zero.
1D14   28 02                  JR   Z,L1D18   ; forward if so to leave undisturbed.
1D16                             ; 
1D16   EE 80                  XOR   $80   ; else toggle the sign bit
1D18                             ; 
1D18   57           L1D18:    LD   D,A   ; exponent byte to D.
1D19   D7                     RST   10H   ; push word DE on data stack.
1D1A                             ; 
1D1A   FD E9                  JP   (IY)   ; to "next".
1D1C                             ; 
1D1C                             ; --------------
1D1C                             ; THE "INT" WORD
1D1C                             ; --------------
1D1C                             ; (f -- n)
1D1C                             ; Converts signed floating point number to signed single length integer.
1D1C                             ; Truncates towards zero.
1D1C                             ; Result in range -32768 to 32767
1D1C                             ; 
1D1C   49 4E        L1D1C:    DB   "IN"   ; "name field"
1D1E   D4                     DB   "T" + $80   
1D1F                             ; 
1D1F   0E 1D                  DW   L1D0E   ; "link field"
1D21                             ; 
1D21   03           L1D21:    DB   $03   ; "name length field"
1D22                             ; 
1D22   24 1D        L1D22:    DW   L1D24   ; "code field"
1D24                             ; 
1D24                             ; ---
1D24                             ; 
1D24   2A 3B 3C     L1D24:    LD   HL,($3C3B)   ; fetch value from SPARE.
1D27   2B                     DEC   HL   ; now points to end of data stack.
1D28                             ; 
1D28   11 00 00               LD   DE,$0000   ; initialize 16-bit result.
1D2B                             ; 
1D2B   7E           L1D2B:    LD   A,(HL)   ; fetch the exponent byte.
1D2C                             ; 
1D2C   07                     RLCA      ; double exponent moving sign bit to 0.
1D2D                             ; 
1D2D   FE 82                  CP   $82   ; compare exponent to plus 1.
1D2F   38 14                  JR   C,L1D45   ; forward if number is smaller than 1
1D31                             ; to return the result DE.
1D31                             ; 
1D31                             ; else the number is >= 1.0
1D31                             ; 
1D31   AF                     XOR   A   ; clear accumulator.
1D32   2B                     DEC   HL   ; point to the first pair of BCD digits.
1D33                             ; 
1D33   CD 32 07               CALL   L0732   ; call shift_fp
1D36                             ; 
1D36   23                     INC   HL   ; point to exponent.
1D37                             ; 
1D37   EB                     EX   DE,HL   ; pointer to DE, integer to HL.
1D38                             ; 
1D38                             ; before adding in the nibble from the mantissa, multiply any previous result
1D38                             ; by ten.
1D38                             ; 
1D38   44                     LD   B,H   ; make a copy of HL in BC.
1D39   4D                     LD   C,L   ; 
1D3A                             ; 
1D3A   29                     ADD   HL,HL   ; * 2
1D3B   29                     ADD   HL,HL   ; * 4
1D3C   09                     ADD   HL,BC   ; * 5
1D3D   29                     ADD   HL,HL   ; * 10
1D3E                             ; 
1D3E   4F                     LD   C,A   ; leftmost nibble from mantissa to C.
1D3F   06 00                  LD   B,$00   ; prepare to add just the nibble.
1D41   09                     ADD   HL,BC   ; add into the result.
1D42   EB                     EX   DE,HL   ; switch back to DE
1D43                             ; 
1D43   18 E6                  JR   L1D2B   ; back to loop.
1D45                             ; 
1D45                             ; ---
1D45                             ; 
1D45   2B           L1D45:    DEC   HL   ; skip redundant components of Floating
1D46   2B                     DEC   HL   ; Point number addressing the
1D47                             ; lower two bytes on the data stack.
1D47   72                     LD   (HL),D   ; insert high-order byte first.
1D48   2B                     DEC   HL   ; point to location beneath.
1D49   73                     LD   (HL),E   ; insert low-order byte.
1D4A                             ; 
1D4A   11 94 0D               LD   DE,L0D94   ; "pos" addr.
1D4D                             ; 
1D4D   C3 BF 04               JP   L04BF   ; exit via "pos" routine.
1D50                             ; 
1D50                             ; -----------------
1D50                             ; THE "UFLOAT" WORD
1D50                             ; -----------------
1D50                             ; (un -- f)
1D50                             ; Converts unsigned single length integer to floating point.
1D50                             ; e.g. 65535 16 bit number converted to  32-bit float 8-bit sign/exponent
1D50                             ; 6-nibble BCD mantissa.    $45  6 5 5 3 5 0
1D50                             ; 
1D50   55 46 4C 4F 41 L1D50:   DB   "UFLOA"   ; "name field"
1D55   D4                     DB   "T" +$80   
1D56                             ; 
1D56   21 1D                  DW   L1D21   ; "link field"
1D58                             ; 
1D58   06           L1D58:    DB   $06   ; "name length field"
1D59                             ; 
1D59   5B 1D        L1D59:    DW   L1D5B   ; "code field"
1D5B                             ; 
1D5B                             ; ---
1D5B                             ; 
1D5B   DF           L1D5B:    RST   18H   ; pop word off stack to DE
1D5C   EB                     EX   DE,HL   ; now HL
1D5D                             ; 
1D5D   01 00 10               LD   BC,$1000   ; count 16 bits, set C to zero.
1D60   51                     LD   D,C   
1D61   59                     LD   E,C   ; initialize DE to zero.
1D62                             ; 
1D62   29           L1D62:    ADD   HL,HL   ; double
1D63                             ; 
1D63   7B                     LD   A,E   ; 
1D64   8F                     ADC   A,A   ; add carry to low byte
1D65   27                     DAA      ; adjust
1D66   5F                     LD   E,A   ; 
1D67                             ; 
1D67   7A                     LD   A,D   ; 
1D68   8F                     ADC   A,A   ; add carry to high byte
1D69   27                     DAA      ; adjust
1D6A   57                     LD   D,A   ; 
1D6B                             ; 
1D6B   CB 11                  RL   C   ; pick up overflow
1D6D   10 F3                  DJNZ   L1D62   ; loop  back for 16 bits
1D6F                             ; 
1D6F   D7                     RST   10H   ; DE to Data stack.
1D70                             ; 
1D70   16 46                  LD   D,$46   ; exponent byte   +6
1D72   59                     LD   E,C   ; low byte
1D73                             ; 
1D73   D7                     RST   10H   ; higher word of float to stack.
1D74                             ; 
1D74   2B                     DEC   HL   ; point to
1D75   2B                     DEC   HL   ; lower on stack
1D76                             ; 
1D76   CD 40 07               CALL   L0740   ; normalize routine.
1D79                             ; 
1D79   FD E9                  JP   (IY)   ; to "next".
1D7B                             ; 
1D7B                             ; -------------------
1D7B                             ; THE "CHARACTER SET"
1D7B                             ; -------------------
1D7B                             ; The 96 ASCII character bitmaps are copied to RAM during initialization and
1D7B                             ; the 8x8 characters can afterwards be redefined by the user.
1D7B                             ; Some ROM space is saved by supplying the blank top line of most characters
1D7B                             ; and in case of the middle range (capitals with no descenders) the bottom
1D7B                             ; line as well. Only the final copyright symbol is held in ROM as an 8x8
1D7B                             ; character.
1D7B                             ; 
1D7B                             ; 
1D7B                             ; $20 - Character: " "          CHR$(32)
1D7B                             ; 
1D7B   00           L1D7B:    DB   %00000000   
1D7C   00                     DB   %00000000   
1D7D   00                     DB   %00000000   
1D7E   00                     DB   %00000000   
1D7F   00                     DB   %00000000   
1D80   00                     DB   %00000000   
1D81   00                     DB   %00000000   
1D82                             ; 
1D82                             ; $21 - Character: "!"          CHR$(33)
1D82                             ; 
1D82   10                     DB   %00010000   
1D83   10                     DB   %00010000   
1D84   10                     DB   %00010000   
1D85   10                     DB   %00010000   
1D86   00                     DB   %00000000   
1D87   10                     DB   %00010000   
1D88   00                     DB   %00000000   
1D89                             ; 
1D89                             ; $22 - Character: """          CHR$(34)
1D89                             ; 
1D89   24                     DB   %00100100   
1D8A   24                     DB   %00100100   
1D8B   00                     DB   %00000000   
1D8C   00                     DB   %00000000   
1D8D   00                     DB   %00000000   
1D8E   00                     DB   %00000000   
1D8F   00                     DB   %00000000   
1D90                             ; 
1D90                             ; $23 - Character: "#"          CHR$(35)
1D90                             ; 
1D90   24                     DB   %00100100   
1D91   7E                     DB   %01111110   
1D92   24                     DB   %00100100   
1D93   24                     DB   %00100100   
1D94   7E                     DB   %01111110   
1D95   24                     DB   %00100100   
1D96   00                     DB   %00000000   
1D97                             ; 
1D97                             ; $24 - Character: "$"          CHR$(36)
1D97                             ; 
1D97   08                     DB   %00001000   
1D98   3E                     DB   %00111110   
1D99   28                     DB   %00101000   
1D9A   3E                     DB   %00111110   
1D9B   0A                     DB   %00001010   
1D9C   3E                     DB   %00111110   
1D9D   08                     DB   %00001000   
1D9E                             ; 
1D9E                             ; $25 - Character: "%"          CHR$(37)
1D9E                             ; 
1D9E   62                     DB   %01100010   
1D9F   64                     DB   %01100100   
1DA0   08                     DB   %00001000   
1DA1   10                     DB   %00010000   
1DA2   26                     DB   %00100110   
1DA3   46                     DB   %01000110   
1DA4   00                     DB   %00000000   
1DA5                             ; 
1DA5                             ; $26 - Character: "&"          CHR$(38)
1DA5                             ; 
1DA5   10                     DB   %00010000   
1DA6   28                     DB   %00101000   
1DA7   10                     DB   %00010000   
1DA8   2A                     DB   %00101010   
1DA9   44                     DB   %01000100   
1DAA   3A                     DB   %00111010   
1DAB   00                     DB   %00000000   
1DAC                             ; 
1DAC                             ; $27 - Character: ""'          CHR$(39)
1DAC                             ; 
1DAC   08                     DB   %00001000   
1DAD   10                     DB   %00010000   
1DAE   00                     DB   %00000000   
1DAF   00                     DB   %00000000   
1DB0   00                     DB   %00000000   
1DB1   00                     DB   %00000000   
1DB2   00                     DB   %00000000   
1DB3                             ; 
1DB3                             ; $28 - Character: "("          CHR$(40)
1DB3                             ; 
1DB3   04                     DB   %00000100   
1DB4   08                     DB   %00001000   
1DB5   08                     DB   %00001000   
1DB6   08                     DB   %00001000   
1DB7   08                     DB   %00001000   
1DB8   04                     DB   %00000100   
1DB9   00                     DB   %00000000   
1DBA                             ; 
1DBA                             ; $29 - Character: ")"          CHR$(42)
1DBA                             ; 
1DBA   20                     DB   %00100000   
1DBB   10                     DB   %00010000   
1DBC   10                     DB   %00010000   
1DBD   10                     DB   %00010000   
1DBE   10                     DB   %00010000   
1DBF   20                     DB   %00100000   
1DC0   00                     DB   %00000000   
1DC1                             ; 
1DC1                             ; $2A - Character: "*"          CHR$(42)
1DC1                             ; 
1DC1   00                     DB   %00000000   
1DC2   14                     DB   %00010100   
1DC3   08                     DB   %00001000   
1DC4   3E                     DB   %00111110   
1DC5   08                     DB   %00001000   
1DC6   14                     DB   %00010100   
1DC7   00                     DB   %00000000   
1DC8                             ; 
1DC8                             ; $2B - Character: "+"          CHR$(43)
1DC8                             ; 
1DC8   00                     DB   %00000000   
1DC9   08                     DB   %00001000   
1DCA   08                     DB   %00001000   
1DCB   3E                     DB   %00111110   
1DCC   08                     DB   %00001000   
1DCD   08                     DB   %00001000   
1DCE   00                     DB   %00000000   
1DCF                             ; 
1DCF                             ; $2C - Character: ","          CHR$(44)
1DCF                             ; 
1DCF   00                     DB   %00000000   
1DD0   00                     DB   %00000000   
1DD1   00                     DB   %00000000   
1DD2   00                     DB   %00000000   
1DD3   08                     DB   %00001000   
1DD4   08                     DB   %00001000   
1DD5   10                     DB   %00010000   
1DD6                             ; 
1DD6                             ; $2D - Character: "-"          CHR$(45)
1DD6                             ; 
1DD6   00                     DB   %00000000   
1DD7   00                     DB   %00000000   
1DD8   00                     DB   %00000000   
1DD9   3E                     DB   %00111110   
1DDA   00                     DB   %00000000   
1DDB   00                     DB   %00000000   
1DDC   00                     DB   %00000000   
1DDD                             ; 
1DDD                             ; $2E - Character: "."          CHR$(46)
1DDD                             ; 
1DDD   00                     DB   %00000000   
1DDE   00                     DB   %00000000   
1DDF   00                     DB   %00000000   
1DE0   00                     DB   %00000000   
1DE1   18                     DB   %00011000   
1DE2   18                     DB   %00011000   
1DE3   00                     DB   %00000000   
1DE4                             ; 
1DE4                             ; $2F - Character: "/"          CHR$(47)
1DE4                             ; 
1DE4   00                     DB   %00000000   
1DE5   02                     DB   %00000010   
1DE6   04                     DB   %00000100   
1DE7   08                     DB   %00001000   
1DE8   10                     DB   %00010000   
1DE9   20                     DB   %00100000   
1DEA   00                     DB   %00000000   
1DEB                             ; 
1DEB                             ; $30 - Character: "0"          CHR$(48)
1DEB                             ; 
1DEB   3C                     DB   %00111100   
1DEC   46                     DB   %01000110   
1DED   4A                     DB   %01001010   
1DEE   52                     DB   %01010010   
1DEF   62                     DB   %01100010   
1DF0   3C                     DB   %00111100   
1DF1   00                     DB   %00000000   
1DF2                             ; 
1DF2                             ; $31 - Character: "1"          CHR$(49)
1DF2                             ; 
1DF2   18                     DB   %00011000   
1DF3   28                     DB   %00101000   
1DF4   08                     DB   %00001000   
1DF5   08                     DB   %00001000   
1DF6   08                     DB   %00001000   
1DF7   3E                     DB   %00111110   
1DF8   00                     DB   %00000000   
1DF9                             ; 
1DF9                             ; $32 - Character: "2"          CHR$(50)
1DF9                             ; 
1DF9   3C                     DB   %00111100   
1DFA   42                     DB   %01000010   
1DFB   02                     DB   %00000010   
1DFC   3C                     DB   %00111100   
1DFD   40                     DB   %01000000   
1DFE   7E                     DB   %01111110   
1DFF   00                     DB   %00000000   
1E00                             ; 
1E00                             ; $33 - Character: "3"          CHR$(51)
1E00                             ; 
1E00   3C                     DB   %00111100   
1E01   42                     DB   %01000010   
1E02   0C                     DB   %00001100   
1E03   02                     DB   %00000010   
1E04   42                     DB   %01000010   
1E05   3C                     DB   %00111100   
1E06   00                     DB   %00000000   
1E07                             ; 
1E07                             ; $34 - Character: "4"          CHR$(52)
1E07                             ; 
1E07   08                     DB   %00001000   
1E08   18                     DB   %00011000   
1E09   28                     DB   %00101000   
1E0A   48                     DB   %01001000   
1E0B   7E                     DB   %01111110   
1E0C   08                     DB   %00001000   
1E0D   00                     DB   %00000000   
1E0E                             ; 
1E0E                             ; $35 - Character: "5"          CHR$(53)
1E0E                             ; 
1E0E   7E                     DB   %01111110   
1E0F   40                     DB   %01000000   
1E10   7C                     DB   %01111100   
1E11   02                     DB   %00000010   
1E12   42                     DB   %01000010   
1E13   3C                     DB   %00111100   
1E14   00                     DB   %00000000   
1E15                             ; 
1E15                             ; $36 - Character: "6"          CHR$(54)
1E15                             ; 
1E15   3C                     DB   %00111100   
1E16   40                     DB   %01000000   
1E17   7C                     DB   %01111100   
1E18   42                     DB   %01000010   
1E19   42                     DB   %01000010   
1E1A   3C                     DB   %00111100   
1E1B   00                     DB   %00000000   
1E1C                             ; 
1E1C                             ; $37 - Character: "7"          CHR$(55)
1E1C                             ; 
1E1C   7E                     DB   %01111110   
1E1D   02                     DB   %00000010   
1E1E   04                     DB   %00000100   
1E1F   08                     DB   %00001000   
1E20   10                     DB   %00010000   
1E21   10                     DB   %00010000   
1E22   00                     DB   %00000000   
1E23                             ; 
1E23                             ; $38 - Character: "8"          CHR$(56)
1E23                             ; 
1E23   3C                     DB   %00111100   
1E24   42                     DB   %01000010   
1E25   3C                     DB   %00111100   
1E26   42                     DB   %01000010   
1E27   42                     DB   %01000010   
1E28   3C                     DB   %00111100   
1E29   00                     DB   %00000000   
1E2A                             ; 
1E2A                             ; $39 - Character: "9"          CHR$(57)
1E2A                             ; 
1E2A   3C                     DB   %00111100   
1E2B   42                     DB   %01000010   
1E2C   42                     DB   %01000010   
1E2D   3E                     DB   %00111110   
1E2E   02                     DB   %00000010   
1E2F   3C                     DB   %00111100   
1E30   00                     DB   %00000000   
1E31                             ; 
1E31                             ; $3A - Character: ":"          CHR$(58)
1E31                             ; 
1E31   00                     DB   %00000000   
1E32   00                     DB   %00000000   
1E33   10                     DB   %00010000   
1E34   00                     DB   %00000000   
1E35   00                     DB   %00000000   
1E36   10                     DB   %00010000   
1E37   00                     DB   %00000000   
1E38                             ; 
1E38                             ; $3B - Character: ";"          CHR$(59)
1E38                             ; 
1E38   00                     DB   %00000000   
1E39   10                     DB   %00010000   
1E3A   00                     DB   %00000000   
1E3B   00                     DB   %00000000   
1E3C   10                     DB   %00010000   
1E3D   10                     DB   %00010000   
1E3E   20                     DB   %00100000   
1E3F                             ; 
1E3F                             ; $3C - Character: "<"          CHR$(60)
1E3F                             ; 
1E3F   00                     DB   %00000000   
1E40   04                     DB   %00000100   
1E41   08                     DB   %00001000   
1E42   10                     DB   %00010000   
1E43   08                     DB   %00001000   
1E44   04                     DB   %00000100   
1E45   00                     DB   %00000000   
1E46                             ; 
1E46                             ; $3D - Character: "="          CHR$(61)
1E46                             ; 
1E46   00                     DB   %00000000   
1E47   00                     DB   %00000000   
1E48   3E                     DB   %00111110   
1E49   00                     DB   %00000000   
1E4A   3E                     DB   %00111110   
1E4B   00                     DB   %00000000   
1E4C   00                     DB   %00000000   
1E4D                             ; 
1E4D                             ; $3E - Character: ">"          CHR$(62)
1E4D                             ; 
1E4D   00                     DB   %00000000   
1E4E   10                     DB   %00010000   
1E4F   08                     DB   %00001000   
1E50   04                     DB   %00000100   
1E51   08                     DB   %00001000   
1E52   10                     DB   %00010000   
1E53   00                     DB   %00000000   
1E54                             ; 
1E54                             ; $3F - Character: "?"          CHR$(63)
1E54                             ; 
1E54   3C                     DB   %00111100   
1E55   42                     DB   %01000010   
1E56   04                     DB   %00000100   
1E57   08                     DB   %00001000   
1E58   00                     DB   %00000000   
1E59   08                     DB   %00001000   
1E5A                             ; 
1E5A                             ; $40 - Character: "@"          CHR$(64)
1E5A                             ; 
1E5A   3C                     DB   %00111100   
1E5B   4A                     DB   %01001010   
1E5C   56                     DB   %01010110   
1E5D   5E                     DB   %01011110   
1E5E   40                     DB   %01000000   
1E5F   3C                     DB   %00111100   
1E60                             ; 
1E60                             ; $41 - Character: "A"          CHR$(65)
1E60                             ; 
1E60   3C                     DB   %00111100   
1E61   42                     DB   %01000010   
1E62   42                     DB   %01000010   
1E63   7E                     DB   %01111110   
1E64   42                     DB   %01000010   
1E65   42                     DB   %01000010   
1E66                             ; 
1E66                             ; $42 - Character: "B"          CHR$(66)
1E66                             ; 
1E66   7C                     DB   %01111100   
1E67   42                     DB   %01000010   
1E68   7C                     DB   %01111100   
1E69   42                     DB   %01000010   
1E6A   42                     DB   %01000010   
1E6B   7C                     DB   %01111100   
1E6C                             ; 
1E6C                             ; $43 - Character: "C"          CHR$(67)
1E6C                             ; 
1E6C   3C                     DB   %00111100   
1E6D   42                     DB   %01000010   
1E6E   40                     DB   %01000000   
1E6F   40                     DB   %01000000   
1E70   42                     DB   %01000010   
1E71   3C                     DB   %00111100   
1E72                             ; 
1E72                             ; $44 - Character: "D"          CHR$(68)
1E72                             ; 
1E72   78                     DB   %01111000   
1E73   44                     DB   %01000100   
1E74   42                     DB   %01000010   
1E75   42                     DB   %01000010   
1E76   44                     DB   %01000100   
1E77   78                     DB   %01111000   
1E78                             ; 
1E78                             ; $45 - Character: "E"          CHR$(69)
1E78                             ; 
1E78   7E                     DB   %01111110   
1E79   40                     DB   %01000000   
1E7A   7C                     DB   %01111100   
1E7B   40                     DB   %01000000   
1E7C   40                     DB   %01000000   
1E7D   7E                     DB   %01111110   
1E7E                             ; 
1E7E                             ; $46 - Character: "F"          CHR$(70)
1E7E                             ; 
1E7E   7E                     DB   %01111110   
1E7F   40                     DB   %01000000   
1E80   7C                     DB   %01111100   
1E81   40                     DB   %01000000   
1E82   40                     DB   %01000000   
1E83   40                     DB   %01000000   
1E84                             ; 
1E84                             ; $47 - Character: "G"          CHR$(71)
1E84                             ; 
1E84   3C                     DB   %00111100   
1E85   42                     DB   %01000010   
1E86   40                     DB   %01000000   
1E87   4E                     DB   %01001110   
1E88   42                     DB   %01000010   
1E89   3C                     DB   %00111100   
1E8A                             ; 
1E8A                             ; $48 - Character: "H"          CHR$(72)
1E8A                             ; 
1E8A   42                     DB   %01000010   
1E8B   42                     DB   %01000010   
1E8C   7E                     DB   %01111110   
1E8D   42                     DB   %01000010   
1E8E   42                     DB   %01000010   
1E8F   42                     DB   %01000010   
1E90                             ; 
1E90                             ; $49 - Character: "I"          CHR$(73)
1E90                             ; 
1E90   3E                     DB   %00111110   
1E91   08                     DB   %00001000   
1E92   08                     DB   %00001000   
1E93   08                     DB   %00001000   
1E94   08                     DB   %00001000   
1E95   3E                     DB   %00111110   
1E96                             ; 
1E96                             ; $4A - Character: "J"          CHR$(74)
1E96                             ; 
1E96   02                     DB   %00000010   
1E97   02                     DB   %00000010   
1E98   02                     DB   %00000010   
1E99   42                     DB   %01000010   
1E9A   42                     DB   %01000010   
1E9B   3C                     DB   %00111100   
1E9C                             ; 
1E9C                             ; $4B - Character: "K"          CHR$(75)
1E9C                             ; 
1E9C   44                     DB   %01000100   
1E9D   48                     DB   %01001000   
1E9E   70                     DB   %01110000   
1E9F   48                     DB   %01001000   
1EA0   44                     DB   %01000100   
1EA1   42                     DB   %01000010   
1EA2                             ; 
1EA2                             ; $4C - Character: "L"          CHR$(76)
1EA2                             ; 
1EA2   40                     DB   %01000000   
1EA3   40                     DB   %01000000   
1EA4   40                     DB   %01000000   
1EA5   40                     DB   %01000000   
1EA6   40                     DB   %01000000   
1EA7   7E                     DB   %01111110   
1EA8                             ; 
1EA8                             ; $4D - Character: "M"          CHR$(77)
1EA8                             ; 
1EA8   42                     DB   %01000010   
1EA9   66                     DB   %01100110   
1EAA   5A                     DB   %01011010   
1EAB   42                     DB   %01000010   
1EAC   42                     DB   %01000010   
1EAD   42                     DB   %01000010   
1EAE                             ; 
1EAE                             ; $4E - Character: "N"          CHR$(78)
1EAE                             ; 
1EAE   42                     DB   %01000010   
1EAF   62                     DB   %01100010   
1EB0   52                     DB   %01010010   
1EB1   4A                     DB   %01001010   
1EB2   46                     DB   %01000110   
1EB3   42                     DB   %01000010   
1EB4                             ; 
1EB4                             ; $4F - Character: "O"          CHR$(79)
1EB4                             ; 
1EB4   3C                     DB   %00111100   
1EB5   42                     DB   %01000010   
1EB6   42                     DB   %01000010   
1EB7   42                     DB   %01000010   
1EB8   42                     DB   %01000010   
1EB9   3C                     DB   %00111100   
1EBA                             ; 
1EBA                             ; $50 - Character: "P"          CHR$(80)
1EBA                             ; 
1EBA   7C                     DB   %01111100   
1EBB   42                     DB   %01000010   
1EBC   42                     DB   %01000010   
1EBD   7C                     DB   %01111100   
1EBE   40                     DB   %01000000   
1EBF   40                     DB   %01000000   
1EC0                             ; 
1EC0                             ; $51 - Character: "Q"          CHR$(81)
1EC0                             ; 
1EC0   3C                     DB   %00111100   
1EC1   42                     DB   %01000010   
1EC2   42                     DB   %01000010   
1EC3   52                     DB   %01010010   
1EC4   4A                     DB   %01001010   
1EC5   3C                     DB   %00111100   
1EC6                             ; 
1EC6                             ; $52 - Character: "R"          CHR$(82)
1EC6                             ; 
1EC6   7C                     DB   %01111100   
1EC7   42                     DB   %01000010   
1EC8   42                     DB   %01000010   
1EC9   7C                     DB   %01111100   
1ECA   44                     DB   %01000100   
1ECB   42                     DB   %01000010   
1ECC                             ; 
1ECC                             ; $53 - Character: "S"          CHR$(83)
1ECC                             ; 
1ECC   3C                     DB   %00111100   
1ECD   40                     DB   %01000000   
1ECE   3C                     DB   %00111100   
1ECF   02                     DB   %00000010   
1ED0   42                     DB   %01000010   
1ED1   3C                     DB   %00111100   
1ED2                             ; 
1ED2                             ; $54 - Character: "T"          CHR$(84)
1ED2                             ; 
1ED2   FE                     DB   %11111110   
1ED3   10                     DB   %00010000   
1ED4   10                     DB   %00010000   
1ED5   10                     DB   %00010000   
1ED6   10                     DB   %00010000   
1ED7   10                     DB   %00010000   
1ED8                             ; 
1ED8                             ; $55 - Character: "U"          CHR$(85)
1ED8                             ; 
1ED8   42                     DB   %01000010   
1ED9   42                     DB   %01000010   
1EDA   42                     DB   %01000010   
1EDB   42                     DB   %01000010   
1EDC   42                     DB   %01000010   
1EDD   3E                     DB   %00111110   
1EDE                             ; 
1EDE                             ; $56 - Character: "V"          CHR$(86)
1EDE                             ; 
1EDE   42                     DB   %01000010   
1EDF   42                     DB   %01000010   
1EE0   42                     DB   %01000010   
1EE1   42                     DB   %01000010   
1EE2   24                     DB   %00100100   
1EE3   18                     DB   %00011000   
1EE4                             ; 
1EE4                             ; $57 - Character: "W"          CHR$(87)
1EE4                             ; 
1EE4   42                     DB   %01000010   
1EE5   42                     DB   %01000010   
1EE6   42                     DB   %01000010   
1EE7   42                     DB   %01000010   
1EE8   5A                     DB   %01011010   
1EE9   24                     DB   %00100100   
1EEA                             ; 
1EEA                             ; $58 - Character: "X"          CHR$(88)
1EEA                             ; 
1EEA   42                     DB   %01000010   
1EEB   24                     DB   %00100100   
1EEC   18                     DB   %00011000   
1EED   18                     DB   %00011000   
1EEE   24                     DB   %00100100   
1EEF   42                     DB   %01000010   
1EF0                             ; 
1EF0                             ; $59 - Character: "Y"          CHR$(89)
1EF0                             ; 
1EF0   82                     DB   %10000010   
1EF1   44                     DB   %01000100   
1EF2   28                     DB   %00101000   
1EF3   10                     DB   %00010000   
1EF4   10                     DB   %00010000   
1EF5   10                     DB   %00010000   
1EF6                             ; 
1EF6                             ; $5A - Character: "Z"          CHR$(90)
1EF6                             ; 
1EF6   7E                     DB   %01111110   
1EF7   04                     DB   %00000100   
1EF8   08                     DB   %00001000   
1EF9   10                     DB   %00010000   
1EFA   20                     DB   %00100000   
1EFB   7E                     DB   %01111110   
1EFC                             ; 
1EFC                             ; $5B - Character: "["          CHR$(91)
1EFC                             ; 
1EFC   0E                     DB   %00001110   
1EFD   08                     DB   %00001000   
1EFE   08                     DB   %00001000   
1EFF   08                     DB   %00001000   
1F00   08                     DB   %00001000   
1F01   0E                     DB   %00001110   
1F02                             ; 
1F02                             ; $5C - Character: "\"          CHR$(92)
1F02                             ; 
1F02   00                     DB   %00000000   
1F03   40                     DB   %01000000   
1F04   20                     DB   %00100000   
1F05   10                     DB   %00010000   
1F06   08                     DB   %00001000   
1F07   04                     DB   %00000100   
1F08                             ; 
1F08                             ; $5D - Character: "]"          CHR$(93)
1F08                             ; 
1F08   70                     DB   %01110000   
1F09   10                     DB   %00010000   
1F0A   10                     DB   %00010000   
1F0B   10                     DB   %00010000   
1F0C   10                     DB   %00010000   
1F0D   70                     DB   %01110000   
1F0E                             ; 
1F0E                             ; $5E - Character: "^"          CHR$(94)
1F0E                             ; 
1F0E   10                     DB   %00010000   
1F0F   38                     DB   %00111000   
1F10   54                     DB   %01010100   
1F11   10                     DB   %00010000   
1F12   10                     DB   %00010000   
1F13   10                     DB   %00010000   
1F14                             ; 
1F14                             ; $5F - Character: "_"          CHR$(95)
1F14                             ; 
1F14   00                     DB   %00000000   
1F15   00                     DB   %00000000   
1F16   00                     DB   %00000000   
1F17   00                     DB   %00000000   
1F18   00                     DB   %00000000   
1F19   00                     DB   %00000000   
1F1A   FF                     DB   %11111111   
1F1B                             ; 
1F1B                             ; $60 - Character:  Â£           CHR$(96)
1F1B                             ; 
1F1B   1C                     DB   %00011100   
1F1C   22                     DB   %00100010   
1F1D   78                     DB   %01111000   
1F1E   20                     DB   %00100000   
1F1F   20                     DB   %00100000   
1F20   7E                     DB   %01111110   
1F21   00                     DB   %00000000   
1F22                             ; 
1F22                             ; $61 - Character: "a"          CHR$(97)
1F22                             ; 
1F22   00                     DB   %00000000   
1F23   38                     DB   %00111000   
1F24   04                     DB   %00000100   
1F25   3C                     DB   %00111100   
1F26   44                     DB   %01000100   
1F27   3E                     DB   %00111110   
1F28   00                     DB   %00000000   
1F29                             ; 
1F29                             ; $62 - Character: "b"          CHR$(98)
1F29                             ; 
1F29   20                     DB   %00100000   
1F2A   20                     DB   %00100000   
1F2B   3C                     DB   %00111100   
1F2C   22                     DB   %00100010   
1F2D   22                     DB   %00100010   
1F2E   3C                     DB   %00111100   
1F2F   00                     DB   %00000000   
1F30                             ; 
1F30                             ; $63 - Character: "c"          CHR$(99)
1F30                             ; 
1F30   00                     DB   %00000000   
1F31   1C                     DB   %00011100   
1F32   20                     DB   %00100000   
1F33   20                     DB   %00100000   
1F34   20                     DB   %00100000   
1F35   1C                     DB   %00011100   
1F36   00                     DB   %00000000   
1F37                             ; 
1F37                             ; $64 - Character: "d"          CHR$(100)
1F37                             ; 
1F37   04                     DB   %00000100   
1F38   04                     DB   %00000100   
1F39   3C                     DB   %00111100   
1F3A   44                     DB   %01000100   
1F3B   44                     DB   %01000100   
1F3C   3E                     DB   %00111110   
1F3D   00                     DB   %00000000   
1F3E                             ; 
1F3E                             ; $65 - Character: "e"          CHR$(101)
1F3E                             ; 
1F3E   00                     DB   %00000000   
1F3F   38                     DB   %00111000   
1F40   44                     DB   %01000100   
1F41   78                     DB   %01111000   
1F42   40                     DB   %01000000   
1F43   3C                     DB   %00111100   
1F44   00                     DB   %00000000   
1F45                             ; 
1F45                             ; $66 - Character: "f"          CHR$(102)
1F45                             ; 
1F45   0C                     DB   %00001100   
1F46   10                     DB   %00010000   
1F47   18                     DB   %00011000   
1F48   10                     DB   %00010000   
1F49   10                     DB   %00010000   
1F4A   10                     DB   %00010000   
1F4B   00                     DB   %00000000   
1F4C                             ; 
1F4C                             ; $67 - Character: "g"          CHR$(103)
1F4C                             ; 
1F4C   00                     DB   %00000000   
1F4D   3C                     DB   %00111100   
1F4E   44                     DB   %01000100   
1F4F   44                     DB   %01000100   
1F50   3C                     DB   %00111100   
1F51   04                     DB   %00000100   
1F52   38                     DB   %00111000   
1F53                             ; 
1F53                             ; $68 - Character: "h"          CHR$(104)
1F53                             ; 
1F53   40                     DB   %01000000   
1F54   40                     DB   %01000000   
1F55   78                     DB   %01111000   
1F56   44                     DB   %01000100   
1F57   44                     DB   %01000100   
1F58   44                     DB   %01000100   
1F59   00                     DB   %00000000   
1F5A                             ; 
1F5A                             ; $69 - Character: "i"          CHR$(105)
1F5A                             ; 
1F5A   10                     DB   %00010000   
1F5B   00                     DB   %00000000   
1F5C   30                     DB   %00110000   
1F5D   10                     DB   %00010000   
1F5E   10                     DB   %00010000   
1F5F   38                     DB   %00111000   
1F60   00                     DB   %00000000   
1F61                             ; 
1F61                             ; $6A - Character: "j"          CHR$(106)
1F61                             ; 
1F61   04                     DB   %00000100   
1F62   00                     DB   %00000000   
1F63   04                     DB   %00000100   
1F64   04                     DB   %00000100   
1F65   04                     DB   %00000100   
1F66   24                     DB   %00100100   
1F67   18                     DB   %00011000   
1F68                             ; 
1F68                             ; $6B - Character: "k"          CHR$(107)
1F68                             ; 
1F68   20                     DB   %00100000   
1F69   28                     DB   %00101000   
1F6A   30                     DB   %00110000   
1F6B   30                     DB   %00110000   
1F6C   28                     DB   %00101000   
1F6D   24                     DB   %00100100   
1F6E   00                     DB   %00000000   
1F6F                             ; 
1F6F                             ; $6C - Character: "l"          CHR$(108)
1F6F                             ; 
1F6F   10                     DB   %00010000   
1F70   10                     DB   %00010000   
1F71   10                     DB   %00010000   
1F72   10                     DB   %00010000   
1F73   10                     DB   %00010000   
1F74   0C                     DB   %00001100   
1F75   00                     DB   %00000000   
1F76                             ; 
1F76                             ; $6D - Character: "m"          CHR$(109)
1F76                             ; 
1F76   00                     DB   %00000000   
1F77   68                     DB   %01101000   
1F78   54                     DB   %01010100   
1F79   54                     DB   %01010100   
1F7A   54                     DB   %01010100   
1F7B   54                     DB   %01010100   
1F7C   00                     DB   %00000000   
1F7D                             ; 
1F7D                             ; $6E - Character: "n"          CHR$(110)
1F7D                             ; 
1F7D   00                     DB   %00000000   
1F7E   78                     DB   %01111000   
1F7F   44                     DB   %01000100   
1F80   44                     DB   %01000100   
1F81   44                     DB   %01000100   
1F82   44                     DB   %01000100   
1F83   00                     DB   %00000000   
1F84                             ; 
1F84                             ; $6F - Character: "o"          CHR$(111)
1F84                             ; 
1F84   00                     DB   %00000000   
1F85   38                     DB   %00111000   
1F86   44                     DB   %01000100   
1F87   44                     DB   %01000100   
1F88   44                     DB   %01000100   
1F89   38                     DB   %00111000   
1F8A   00                     DB   %00000000   
1F8B                             ; 
1F8B                             ; $70 - Character: "p"          CHR$(112)
1F8B                             ; 
1F8B   00                     DB   %00000000   
1F8C   78                     DB   %01111000   
1F8D   44                     DB   %01000100   
1F8E   44                     DB   %01000100   
1F8F   78                     DB   %01111000   
1F90   40                     DB   %01000000   
1F91   40                     DB   %01000000   
1F92                             ; 
1F92                             ; $71 - Character: "q"          CHR$(113)
1F92                             ; 
1F92   00                     DB   %00000000   
1F93   3C                     DB   %00111100   
1F94   44                     DB   %01000100   
1F95   44                     DB   %01000100   
1F96   3C                     DB   %00111100   
1F97   04                     DB   %00000100   
1F98   06                     DB   %00000110   
1F99                             ; 
1F99                             ; $72 - Character: "r"          CHR$(114)
1F99                             ; 
1F99   00                     DB   %00000000   
1F9A   1C                     DB   %00011100   
1F9B   20                     DB   %00100000   
1F9C   20                     DB   %00100000   
1F9D   20                     DB   %00100000   
1F9E   20                     DB   %00100000   
1F9F   00                     DB   %00000000   
1FA0                             ; 
1FA0                             ; $73 - Character: "s"          CHR$(115)
1FA0                             ; 
1FA0   00                     DB   %00000000   
1FA1   38                     DB   %00111000   
1FA2   40                     DB   %01000000   
1FA3   38                     DB   %00111000   
1FA4   04                     DB   %00000100   
1FA5   78                     DB   %01111000   
1FA6   00                     DB   %00000000   
1FA7                             ; 
1FA7                             ; $74 - Character: "t"          CHR$(116)
1FA7                             ; 
1FA7   10                     DB   %00010000   
1FA8   38                     DB   %00111000   
1FA9   10                     DB   %00010000   
1FAA   10                     DB   %00010000   
1FAB   10                     DB   %00010000   
1FAC   0C                     DB   %00001100   
1FAD   00                     DB   %00000000   
1FAE                             ; 
1FAE                             ; $75 - Character: "u"          CHR$(117)
1FAE                             ; 
1FAE   00                     DB   %00000000   
1FAF   44                     DB   %01000100   
1FB0   44                     DB   %01000100   
1FB1   44                     DB   %01000100   
1FB2   44                     DB   %01000100   
1FB3   3C                     DB   %00111100   
1FB4   00                     DB   %00000000   
1FB5                             ; 
1FB5                             ; $76 - Character: "v"          CHR$(118)
1FB5                             ; 
1FB5   00                     DB   %00000000   
1FB6   44                     DB   %01000100   
1FB7   44                     DB   %01000100   
1FB8   28                     DB   %00101000   
1FB9   28                     DB   %00101000   
1FBA   10                     DB   %00010000   
1FBB   00                     DB   %00000000   
1FBC                             ; 
1FBC                             ; $77 - Character: "w"          CHR$(119)
1FBC                             ; 
1FBC   00                     DB   %00000000   
1FBD   44                     DB   %01000100   
1FBE   54                     DB   %01010100   
1FBF   54                     DB   %01010100   
1FC0   54                     DB   %01010100   
1FC1   28                     DB   %00101000   
1FC2   00                     DB   %00000000   
1FC3                             ; 
1FC3                             ; $78 - Character: "x"          CHR$(120)
1FC3                             ; 
1FC3   00                     DB   %00000000   
1FC4   44                     DB   %01000100   
1FC5   28                     DB   %00101000   
1FC6   10                     DB   %00010000   
1FC7   28                     DB   %00101000   
1FC8   44                     DB   %01000100   
1FC9   00                     DB   %00000000   
1FCA                             ; 
1FCA                             ; $79 - Character: "y"          CHR$(121)
1FCA                             ; 
1FCA   00                     DB   %00000000   
1FCB   44                     DB   %01000100   
1FCC   44                     DB   %01000100   
1FCD   44                     DB   %01000100   
1FCE   3C                     DB   %00111100   
1FCF   04                     DB   %00000100   
1FD0   38                     DB   %00111000   
1FD1                             ; 
1FD1                             ; $7A - Character: "z"          CHR$(122)
1FD1                             ; 
1FD1   00                     DB   %00000000   
1FD2   7C                     DB   %01111100   
1FD3   08                     DB   %00001000   
1FD4   10                     DB   %00010000   
1FD5   20                     DB   %00100000   
1FD6   7C                     DB   %01111100   
1FD7   00                     DB   %00000000   
1FD8                             ; 
1FD8                             ; $7B - Character: "{"          CHR$(123)
1FD8                             ; 
1FD8   0E                     DB   %00001110   
1FD9   08                     DB   %00001000   
1FDA   30                     DB   %00110000   
1FDB   30                     DB   %00110000   
1FDC   08                     DB   %00001000   
1FDD   0E                     DB   %00001110   
1FDE   00                     DB   %00000000   
1FDF                             ; 
1FDF                             ; $7C - Character: "|"          CHR$(124)
1FDF                             ; 
1FDF   08                     DB   %00001000   
1FE0   08                     DB   %00001000   
1FE1   08                     DB   %00001000   
1FE2   08                     DB   %00001000   
1FE3   08                     DB   %00001000   
1FE4   08                     DB   %00001000   
1FE5   00                     DB   %00000000   
1FE6                             ; 
1FE6                             ; $7D - Character: "}"          CHR$(125)
1FE6                             ; 
1FE6   70                     DB   %01110000   
1FE7   10                     DB   %00010000   
1FE8   0C                     DB   %00001100   
1FE9   0C                     DB   %00001100   
1FEA   10                     DB   %00010000   
1FEB   70                     DB   %01110000   
1FEC   00                     DB   %00000000   
1FED                             ; 
1FED                             ; $7E - Character: "~"          CHR$(126)
1FED                             ; 
1FED   32                     DB   %00110010   
1FEE   4C                     DB   %01001100   
1FEF   00                     DB   %00000000   
1FF0   00                     DB   %00000000   
1FF1   00                     DB   %00000000   
1FF2   00                     DB   %00000000   
1FF3   00                     DB   %00000000   
1FF4                             ; 
1FF4                             ; $7F - Character:  Â©           CHR$(127)
1FF4                             ; 
1FF4   3C                     DB   %00111100   
1FF5   42                     DB   %01000010   
1FF6   99                     DB   %10011001   
1FF7   A1                     DB   %10100001   
1FF8   A1                     DB   %10100001   
1FF9   99                     DB   %10011001   
1FFA   42                     DB   %01000010   
1FFB                             ; 
1FFB   3C           L1FFB:    DB   %00111100   
1FFC                             ; 
1FFC                             ; 
1FFC                             ; ---------------
1FFC                             ; THE "SPARE" ROM
1FFC                             ; ---------------
1FFC                             ; 
1FFC   FF           L1FFC:    DB   $FF   ; unused
1FFD                             ; 
1FFD                             ; ----------
1FFD                             ; THE "LINK"
1FFD                             ; ----------
1FFD                             ; 
1FFD                             ; The FORTH word copied to RAM links back to L1FFF
1FFD                             ; 
1FFD   58 1D        L1FFD:    DW   L1D58   ; pointer to prev - UFLOAT
1FFF   00           L1FFF:    DB   $00   ; length of dummy word zero
2000                             ; 
2000                             ; 
2000                          .END      
2000                             ; 
2000                             ; -----------
2000                             ; 
2000                             ; -----------
2000                             ; ----------------------
2000                             ; THE "SYSTEM VARIABLES"
2000                             ; ----------------------
2000                             ; "Here is a list of system variables. We have given them all names, but that
2000                             ; is just for ease of reference. The Ace will not recognize these names,
2000                             ; except for a few, like "BASE", that are FORTH words. I've written these
2000                             ; FORTH words in bold type in the usual way."
2000                             ; 
2000                             ; 
2000                             ; FP_WS         $3C00 (15360)   19 bytes used as work space for floating point
2000                             ;                               arithmetic.
2000                             ; 
2000                             ; LISTWS        $3C13 (15379)   5 bytes used as workspace by "LIST" and "EDIT".
2000                             ; 
2000                             ; RAMTOP        $3C18 (15384)   2 bytes - the first address past the last
2000                             ;                               address in RAM.
2000                             ; 
2000                             ; HLD           $3C1A (15386)   2 bytes. The address of the latest character
2000                             ;                               held in the pad by formatted output.
2000                             ;                               ("#", "HOLD" and so on).
2000                             ; 
2000                             ; SCRPOS        $3C1C (15388)   2 bytes. The address of the place in video RAM
2000                             ;                               where the next character is to be printed
2000                             ;                               (i.e. the "print position").
2000                             ; 
2000                             ; INSCRN        $3C1E (15390)   2 bytes. The address of the start of the
2000                             ;                               current "logical line" in the input buffer.
2000                             ; 
2000                             ; CURSOR        $3C20 (15392)   2 bytes. The address of the cursor in the
2000                             ;                               input buffer.
2000                             ; 
2000                             ; ENDBUF        $3C22 (15394)   2 bytes. The address of the end of the current
2000                             ;                               logical line in the input buffer.
2000                             ; 
2000                             ; L_HALF        $3C24 (15396)   2 bytes. The address of the start of the the
2000                             ;                               input buffer. The input buffer itself is stored
2000                             ;                               in the video RAM, where you see it.
2000                             ; 
2000                             ; KEYCOD        $3C26 (15398)   1 byte. The ASCII code of the last key pressed.
2000                             ; 
2000                             ; KEYCNT        $3C27 (15399)   1 byte. Used by the routine that reads the
2000                             ;                               keyboard.
2000                             ; 
2000                             ; STATIN        $3C28 (15400)   1 byte. Used by the routine that reads the
2000                             ;                               keyboard.
2000                             ; 
2000                             ; EXWRCH        $3C29 (15401)   2 bytes. This is normally 0 but it can be
2000                             ;                               changed to allow printing to be sent to some
2000                             ;                               device other than the screen.
2000                             ; 
2000                             ; FRAMES        $3C2B (15403)   4 bytes. These four bytes form a double length
2000                             ;                               integer that counts the time since the Ace was
2000                             ;                               switched on in 50ths of a second.
2000                             ; 
2000                             ; XCOORD        $3C2F (15407)   1 byte. The x-coordinate last used by "PLOT".
2000                             ; 
2000                             ; YCOORD        $3C30 (15408)   1 byte. The y-coordinate last used by "PLOT".
2000                             ; 
2000                             ; CURRENT       $3C31 (15409)   2 bytes. The parameter field address for the
2000                             ;                               vocabulary word of the current vocabulary.
2000                             ; 
2000                             ; CONTEXT       $3C33 (15411)   2 bytes. The parameter field address for the
2000                             ;                               vocabulary word of the context vocabulary.
2000                             ; 
2000                             ; VOCLNK        $3C35 (15413)   2 bytes. The address of the fourth byte in the
2000                             ;                               parameter field - the vocabulary linkage - of
2000                             ;                               the vocabulary word of the most recently
2000                             ;                               defined vocabulary.
2000                             ; 
2000                             ; STKBOT        $3C37 (15415)   2 bytes. The address of the next byte into
2000                             ;                               which anything will be enclosed in the
2000                             ;                               dictionary, i.e. one byte past the present end
2000                             ;                               of the dictionary.
2000                             ;                               "HERE" is equivalent to 15415 @.
2000                             ; 
2000                             ; DICT          $3C39 (15417)   2 bytes. The address of the length field in the
2000                             ;                               newest word in the dictionary. If that length
2000                             ;                               field is correctly filled in then DICT may
2000                             ;                               be 0.
2000                             ; 
2000                             ; SPARE         $3C3B (15419)   2 bytes. The address of the first byte past the
2000                             ;                               top of the stack.
2000                             ; 
2000                             ; ERR_NO        $3C3D (15421)   1 byte. This is usually 255, meaning "no error".
2000                             ;                               If "ABORT" is used, and ERR_NO is between 0 and
2000                             ;                               127, then "ERROR" will be printed out, followed
2000                             ;                               by the error number ERR_NO.
2000                             ; 
2000                             ; FLAGS         $3C3E (15422)   1 byte. Shows the state of various parts of the
2000                             ;                               system, each bit showing whether something
2000                             ;                               particular is happening or not. Some of these
2000                             ;                               may be useful.
2000                             ; 
2000                             ;                               Bit 2, when 1, shows that there is an incomplete
2000                             ;                               definition at the end of the dictionary.
2000                             ; 
2000                             ;                               Bit 3, when 1, shows that output is to fed into
2000                             ;                               the input buffer.
2000                             ; 
2000                             ;                               Bit 4, when 1, shows that the Ace is in
2000                             ;                               invisible mode.
2000                             ; 
2000                             ;                               Bit 6, when 1, shows that the Ace is in compile
2000                             ;                               mode.
2000                             ; 
2000                             ; BASE          $3C3F (15423)   1 byte. The system number base.
2000                             ; 
2000                             ; 
2000                             ; 
2000                             ; -----------------------------------------------------------------------------
2000                             ;                                    ---------
2000                             ;                                   -------------------------------------------
2000                             ; ------------                     --------------------------------------------
2000                             ; ACE KEYBOARD                    ---------
2000                             ; ------------                   ---------
2000                             ; 
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ;|   ! | |   @ | |   # | |   $ | |   % | |   & | |   ' | |   ( | |   ) | |   _ |
2000                             ;| 1 []| | 2 []| | 3 []| | 4 []| | 5 []| | 6 []| | 7 []| | 8   | | 9   | | 0 []|
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ; DELETE   CAPS            INV    <=        ^       v        =>  GRAPHIC  DELETE
2000                             ;  LINE    LOCK           VIDEO
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ;|     | |     | |     | |   < | |   > | |   [ | |   ] | |   Â© | |   ; | |   " |
2000                             ;| Q   | | W   | | E   | | R   | | T   | | Y   | | U   | | I   | | O   | | P   |
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ; 
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ;|   ~ | |   | | |   \ | |   00bbIHwgfCAgIA== | |   ^ | |   - | |   + | |   = | |     |
2000                             ;| A   | | S   | | D   | | F   | | G   | | H   | | J   | | K   | | L   | |ENTER|
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ; 
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ;|     | |   : | |   Â£ | |   ? | |   / | |   * | |   , | |   . | | SYM | |     |
2000                             ;|SHIFT| | Z   | | X   | | C   | | V   | | B   | | N   | | M   | |SHIFT| |SPACE|
2000                             ;+-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+ +-----+
2000                             ; 
2000                             ; 
2000                             ;                     [] mosaic graphic          Â£  currency symbol
2000                             ; 
2000                             ; -----------------------------------------------------------------------------


L0000:              0000 DEFINED AT LINE 13
L0008:              0008 DEFINED AT LINE 22
L0010:              0010 DEFINED AT LINE 30
                    > USED AT LINE 2948
L0018:              0018 DEFINED AT LINE 40
L0020:              0020 DEFINED AT LINE 49
L0028:              0028 DEFINED AT LINE 58
                    > USED AT LINE 16
                    > USED AT LINE 61
L0038:              0038 DEFINED AT LINE 78
L003B:              003B DEFINED AT LINE 143
                    > USED AT LINE 72
L004B:              004B DEFINED AT LINE 150
L0052:              0052 DEFINED AT LINE 162
L0055:              0055 DEFINED AT LINE 165
                    > USED AT LINE 188
L005F:              005F DEFINED AT LINE 175
                    > USED AT LINE 170
L006E:              006E DEFINED AT LINE 196
L007C:              007C DEFINED AT LINE 211
                    > USED AT LINE 232
L0085:              0085 DEFINED AT LINE 221
                    > USED AT LINE 214
L0092:              0092 DEFINED AT LINE 247
L0096:              0096 DEFINED AT LINE 250
L0098:              0098 DEFINED AT LINE 252
                    > USED AT LINE 278
L0099:              0099 DEFINED AT LINE 254
L009B:              009B DEFINED AT LINE 259
                    > USED AT LINE 236
                    > USED AT LINE 254
                    > USED AT LINE 352
L00A3:              00A3 DEFINED AT LINE 275
L00AA:              00AA DEFINED AT LINE 280
                    > USED AT LINE 1389
L00AB:              00AB DEFINED AT LINE 282
L00AD:              00AD DEFINED AT LINE 288
                    > USED AT LINE 52
                    > USED AT LINE 282
L00C4:              00C4 DEFINED AT LINE 304
L00DE:              00DE DEFINED AT LINE 323
                    > USED AT LINE 302
L00E7:              00E7 DEFINED AT LINE 330
L00EC:              00EC DEFINED AT LINE 335
L00FF:              00FF DEFINED AT LINE 346
                    > USED AT LINE 324
L010D:              010D DEFINED AT LINE 360
                    > USED AT LINE 70
L013A:              013A DEFINED AT LINE 404
                    > USED AT LINE 78
L0142:              0142 DEFINED AT LINE 416
                    > USED AT LINE 416
L0147:              0147 DEFINED AT LINE 422
                    > USED AT LINE 424
L0167:              0167 DEFINED AT LINE 456
                    > USED AT LINE 452
L016D:              016D DEFINED AT LINE 461
                    > USED AT LINE 457
L0170:              0170 DEFINED AT LINE 463
                    > USED AT LINE 446
L0176:              0176 DEFINED AT LINE 468
                    > USED AT LINE 440
                    > USED AT LINE 443
L017E:              017E DEFINED AT LINE 483
                    > USED AT LINE 764
                    > USED AT LINE 1227
L0196:              0196 DEFINED AT LINE 506
                    > USED AT LINE 461
                    > USED AT LINE 484
L0198:              0198 DEFINED AT LINE 511
                    > USED AT LINE 496
L01A6:              01A6 DEFINED AT LINE 526
                    > USED AT LINE 516
L01C9:              01C9 DEFINED AT LINE 554
                    > USED AT LINE 556
L01CE:              01CE DEFINED AT LINE 560
                    > USED AT LINE 522
L01DD:              01DD DEFINED AT LINE 573
                    > USED AT LINE 569
L01E4:              01E4 DEFINED AT LINE 579
                    > USED AT LINE 529
L01E6:              01E6 DEFINED AT LINE 586
                    > USED AT LINE 463
L01F0:              01F0 DEFINED AT LINE 602
                    > USED AT LINE 586
L01F1:              01F1 DEFINED AT LINE 603
L01F2:              01F2 DEFINED AT LINE 604
L01F3:              01F3 DEFINED AT LINE 605
L01F4:              01F4 DEFINED AT LINE 606
L01F5:              01F5 DEFINED AT LINE 607
L01F6:              01F6 DEFINED AT LINE 608
L01F7:              01F7 DEFINED AT LINE 609
L01F8:              01F8 DEFINED AT LINE 610
L01F9:              01F9 DEFINED AT LINE 611
L01FA:              01FA DEFINED AT LINE 612
L01FB:              01FB DEFINED AT LINE 613
L01FC:              01FC DEFINED AT LINE 614
L01FD:              01FD DEFINED AT LINE 615
L01FE:              01FE DEFINED AT LINE 624
L0204:              0204 DEFINED AT LINE 635
                    > USED AT LINE 718
                    > USED AT LINE 727
L0210:              0210 DEFINED AT LINE 646
L0211:              0211 DEFINED AT LINE 655
                    > USED AT LINE 792
                    > USED AT LINE 797
L0225:              0225 DEFINED AT LINE 675
                    > USED AT LINE 740
                    > USED AT LINE 807
                    > USED AT LINE 1861
L022C:              022C DEFINED AT LINE 684
                    > USED AT LINE 848
L023D:              023D DEFINED AT LINE 699
L023F:              023F DEFINED AT LINE 701
                    > USED AT LINE 697
L0247:              0247 DEFINED AT LINE 718
L024E:              024E DEFINED AT LINE 727
                    > USED AT LINE 728
L0254:              0254 DEFINED AT LINE 734
                    > USED AT LINE 719
L0269:              0269 DEFINED AT LINE 747
                    > USED AT LINE 750
L0276:              0276 DEFINED AT LINE 762
                    > USED AT LINE 810
                    > USED AT LINE 1825
                    > USED AT LINE 1850
L0282:              0282 DEFINED AT LINE 771
                    > USED AT LINE 464
L0290:              0290 DEFINED AT LINE 781
                    > USED AT LINE 777
L0292:              0292 DEFINED AT LINE 784
L0295:              0295 DEFINED AT LINE 792
L029C:              029C DEFINED AT LINE 797
                    > USED AT LINE 798
L02A2:              02A2 DEFINED AT LINE 803
                    > USED AT LINE 793
L02B0:              02B0 DEFINED AT LINE 817
                    > USED AT LINE 540
                    > USED AT LINE 803
                    > USED AT LINE 887
                    > USED AT LINE 1982
                    > USED AT LINE 2535
L02C3:              02C3 DEFINED AT LINE 844
L02CA:              02CA DEFINED AT LINE 848
                    > USED AT LINE 849
L02D0:              02D0 DEFINED AT LINE 857
L02D8:              02D8 DEFINED AT LINE 868
                    > USED AT LINE 1848
                    > USED AT LINE 7326
                    > USED AT LINE 7443
L02EA:              02EA DEFINED AT LINE 879
                    > USED AT LINE 1823
L02ED:              02ED DEFINED AT LINE 882
                    > USED AT LINE 809
L02F4:              02F4 DEFINED AT LINE 887
                    > USED AT LINE 754
L02F9:              02F9 DEFINED AT LINE 891
                    > USED AT LINE 893
L0302:              0302 DEFINED AT LINE 904
                    > USED AT LINE 560
                    > USED AT LINE 684
L0310:              0310 DEFINED AT LINE 919
                    > USED AT LINE 435
L0320:              0320 DEFINED AT LINE 937
                    > USED AT LINE 930
L0325:              0325 DEFINED AT LINE 947
                    > USED AT LINE 927
L0331:              0331 DEFINED AT LINE 958
                    > USED AT LINE 950
L0332:              0332 DEFINED AT LINE 960
                    > USED AT LINE 939
                    > USED AT LINE 954
L0336:              0336 DEFINED AT LINE 994
                    > USED AT LINE 919
                    > USED AT LINE 3918
L0347:              0347 DEFINED AT LINE 1012
                    > USED AT LINE 1008
L034F:              034F DEFINED AT LINE 1025
                    > USED AT LINE 1054
L0359:              0359 DEFINED AT LINE 1036
                    > USED AT LINE 1040
L0362:              0362 DEFINED AT LINE 1046
                    > USED AT LINE 1029
L036B:              036B DEFINED AT LINE 1059
                    > USED AT LINE 1034
                    > USED AT LINE 1043
L036D:              036D DEFINED AT LINE 1063
                    > USED AT LINE 1050
L0376:              0376 DEFINED AT LINE 1085
                    > USED AT LINE 1067
L03EE:              03EE DEFINED AT LINE 1225
                    > USED AT LINE 24
L03F5:              03F5 DEFINED AT LINE 1236
                    > USED AT LINE 1225
L03FE:              03FE DEFINED AT LINE 1247
L03FF:              03FF DEFINED AT LINE 1261
                    > USED AT LINE 1244
L0416:              0416 DEFINED AT LINE 1286
                    > USED AT LINE 1275
                    > USED AT LINE 1289
L041C:              041C DEFINED AT LINE 1294
                    > USED AT LINE 1280
L0421:              0421 DEFINED AT LINE 1304
                    > USED AT LINE 538
                    > USED AT LINE 1271
L042F:              042F DEFINED AT LINE 1320
                    > USED AT LINE 544
L043D:              043D DEFINED AT LINE 1334
                    > USED AT LINE 1336
L0443:              0443 DEFINED AT LINE 1345
                    > USED AT LINE 554
                    > USED AT LINE 1308
L044B:              044B DEFINED AT LINE 1356
                    > USED AT LINE 1350
L044D:              044D DEFINED AT LINE 1369
                    > USED AT LINE 1416
                    > USED AT LINE 1436
                    > USED AT LINE 1456
                    > USED AT LINE 1470
                    > USED AT LINE 1480
L0459:              0459 DEFINED AT LINE 1386
L045F:              045F DEFINED AT LINE 1391
                    > USED AT LINE 1412
L0460:              0460 DEFINED AT LINE 1393
                    > USED AT LINE 4983
                    > USED AT LINE 5098
                    > USED AT LINE 5125
                    > USED AT LINE 5493
                    > USED AT LINE 5518
                    > USED AT LINE 5612
                    > USED AT LINE 5616
                    > USED AT LINE 5654
                    > USED AT LINE 5799
                    > USED AT LINE 5863
                    > USED AT LINE 5892
                    > USED AT LINE 5921
                    > USED AT LINE 5968
                    > USED AT LINE 5982
                    > USED AT LINE 5998
                    > USED AT LINE 6183
                    > USED AT LINE 6478
L0462:              0462 DEFINED AT LINE 1397
                    > USED AT LINE 1393
L0469:              0469 DEFINED AT LINE 1409
L0472:              0472 DEFINED AT LINE 1414
                    > USED AT LINE 1432
L0473:              0473 DEFINED AT LINE 1416
L0475:              0475 DEFINED AT LINE 1420
L0476:              0476 DEFINED AT LINE 1429
L047F:              047F DEFINED AT LINE 1434
                    > USED AT LINE 1452
L0480:              0480 DEFINED AT LINE 1436
                    > USED AT LINE 4978
                    > USED AT LINE 5765
                    > USED AT LINE 5793
                    > USED AT LINE 7201
L0482:              0482 DEFINED AT LINE 1440
L0483:              0483 DEFINED AT LINE 1449
L0489:              0489 DEFINED AT LINE 1454
                    > USED AT LINE 1498
L048A:              048A DEFINED AT LINE 1456
                    > USED AT LINE 2469
                    > USED AT LINE 2474
                    > USED AT LINE 3280
L048C:              048C DEFINED AT LINE 1460
L048D:              048D DEFINED AT LINE 1470
L048F:              048F DEFINED AT LINE 1474
L0490:              0490 DEFINED AT LINE 1480
                    > USED AT LINE 306
L0492:              0492 DEFINED AT LINE 1484
L0493:              0493 DEFINED AT LINE 1495
L0498:              0498 DEFINED AT LINE 1500
                    > USED AT LINE 1516
L0499:              0499 DEFINED AT LINE 1502
                    > USED AT LINE 4986
L049B:              049B DEFINED AT LINE 1506
L049D:              049D DEFINED AT LINE 1514
L04A0:              04A0 DEFINED AT LINE 1518
                    > USED AT LINE 1688
L04A1:              04A1 DEFINED AT LINE 1520
L04A3:              04A3 DEFINED AT LINE 1524
L04A5:              04A5 DEFINED AT LINE 1526
L04AA:              04AA DEFINED AT LINE 1532
X04B3:              04B3 DEFINED AT LINE 1548
X04B4:              04B4 DEFINED AT LINE 1550
X04B5:              04B5 DEFINED AT LINE 1551
L04B6:              04B6 DEFINED AT LINE 1563
                    > USED AT LINE 1524
                    > USED AT LINE 1722
                    > USED AT LINE 2483
                    > USED AT LINE 2971
                    > USED AT LINE 2993
                    > USED AT LINE 3206
                    > USED AT LINE 3260
                    > USED AT LINE 3286
                    > USED AT LINE 3997
                    > USED AT LINE 4099
                    > USED AT LINE 4144
                    > USED AT LINE 4351
                    > USED AT LINE 4407
                    > USED AT LINE 4428
                    > USED AT LINE 4448
                    > USED AT LINE 4471
                    > USED AT LINE 4494
                    > USED AT LINE 4510
                    > USED AT LINE 4611
                    > USED AT LINE 4885
                    > USED AT LINE 4992
                    > USED AT LINE 5101
                    > USED AT LINE 5128
                    > USED AT LINE 5164
                    > USED AT LINE 5256
                    > USED AT LINE 5278
                    > USED AT LINE 5331
                    > USED AT LINE 5403
                    > USED AT LINE 5445
                    > USED AT LINE 5524
                    > USED AT LINE 5599
                    > USED AT LINE 5619
                    > USED AT LINE 5716
                    > USED AT LINE 5806
                    > USED AT LINE 5868
                    > USED AT LINE 5896
                    > USED AT LINE 5925
                    > USED AT LINE 5948
                    > USED AT LINE 5971
                    > USED AT LINE 5988
                    > USED AT LINE 6002
                    > USED AT LINE 6030
                    > USED AT LINE 6054
                    > USED AT LINE 6186
                    > USED AT LINE 6210
                    > USED AT LINE 6485
                    > USED AT LINE 6952
                    > USED AT LINE 7204
                    > USED AT LINE 7523
                    > USED AT LINE 8013
                    > USED AT LINE 8037
                    > USED AT LINE 8062
                    > USED AT LINE 8115
                    > USED AT LINE 8259
L04B8:              04B8 DEFINED AT LINE 1567
                    > USED AT LINE 1563
                    > USED AT LINE 5630
                    > USED AT LINE 5727
                    > USED AT LINE 6666
L04B9:              04B9 DEFINED AT LINE 1576
                    > USED AT LINE 290
                    > USED AT LINE 304
                    > USED AT LINE 335
                    > USED AT LINE 1633
                    > USED AT LINE 1667
                    > USED AT LINE 2405
                    > USED AT LINE 2643
                    > USED AT LINE 5397
                    > USED AT LINE 6151
                    > USED AT LINE 6161
                    > USED AT LINE 6718
                    > USED AT LINE 7215
                    > USED AT LINE 7434
                    > USED AT LINE 8152
L04BA:              04BA DEFINED AT LINE 1580
                    > USED AT LINE 4950
                    > USED AT LINE 6089
                    > USED AT LINE 6140
L04BF:              04BF DEFINED AT LINE 1589
                    > USED AT LINE 1788
                    > USED AT LINE 2212
                    > USED AT LINE 7735
                    > USED AT LINE 9243
L04C6:              04C6 DEFINED AT LINE 1610
                    > USED AT LINE 1696
L04C8:              04C8 DEFINED AT LINE 1614
                    > USED AT LINE 148
                    > USED AT LINE 1610
                    > USED AT LINE 2667
L04D7:              04D7 DEFINED AT LINE 1624
                    > USED AT LINE 3039
L04D9:              04D9 DEFINED AT LINE 1629
                    > USED AT LINE 1619
L04E4:              04E4 DEFINED AT LINE 1640
                    > USED AT LINE 1632
                    > USED AT LINE 2155
                    > USED AT LINE 7424
L04F0:              04F0 DEFINED AT LINE 1652
                    > USED AT LINE 7856
L04F2:              04F2 DEFINED AT LINE 1667
                    > USED AT LINE 263
L04F5:              04F5 DEFINED AT LINE 1669
L04FD:              04FD DEFINED AT LINE 1674
L04FF:              04FF DEFINED AT LINE 1685
L0505:              0505 DEFINED AT LINE 1690
                    > USED AT LINE 1840
L0506:              0506 DEFINED AT LINE 1692
                    > USED AT LINE 1670
                    > USED AT LINE 7437
L0508:              0508 DEFINED AT LINE 1696
L0510:              0510 DEFINED AT LINE 1702
L0516:              0516 DEFINED AT LINE 1706
L0518:              0518 DEFINED AT LINE 1708
L051E:              051E DEFINED AT LINE 1711
L0524:              0524 DEFINED AT LINE 1715
L0526:              0526 DEFINED AT LINE 1717
L052C:              052C DEFINED AT LINE 1720
L052E:              052E DEFINED AT LINE 1722
L0530:              0530 DEFINED AT LINE 1726
L0534:              0534 DEFINED AT LINE 1728
L0536:              0536 DEFINED AT LINE 1735
                    > USED AT LINE 1671
L0538:              0538 DEFINED AT LINE 1737
                    > USED AT LINE 1735
L054A:              054A DEFINED AT LINE 1754
L054D:              054D DEFINED AT LINE 1757
                    > USED AT LINE 1740
                    > USED AT LINE 1743
L054F:              054F DEFINED AT LINE 1764
                    > USED AT LINE 1704
L0551:              0551 DEFINED AT LINE 1768
                    > USED AT LINE 1764
L0561:              0561 DEFINED AT LINE 1788
                    > USED AT LINE 1783
                    > USED AT LINE 1803
L0564:              0564 DEFINED AT LINE 1795
                    > USED AT LINE 1713
L0566:              0566 DEFINED AT LINE 1799
                    > USED AT LINE 1795
L056F:              056F DEFINED AT LINE 1812
L0577:              0577 DEFINED AT LINE 1817
                    > USED AT LINE 1880
L0578:              0578 DEFINED AT LINE 1819
                    > USED AT LINE 1726
                    > USED AT LINE 7436
L057A:              057A DEFINED AT LINE 1823
                    > USED AT LINE 1819
L0584:              0584 DEFINED AT LINE 1837
L058B:              058B DEFINED AT LINE 1842
                    > USED AT LINE 1815
L058C:              058C DEFINED AT LINE 1844
                    > USED AT LINE 1669
L058E:              058E DEFINED AT LINE 1848
                    > USED AT LINE 1844
L0594:              0594 DEFINED AT LINE 1853
                    > USED AT LINE 1829
L059B:              059B DEFINED AT LINE 1858
                    > USED AT LINE 1859
L05A4:              05A4 DEFINED AT LINE 1877
L05AA:              05AA DEFINED AT LINE 1882
                    > USED AT LINE 2030
L05AB:              05AB DEFINED AT LINE 1884
                    > USED AT LINE 4974
                    > USED AT LINE 5389
                    > USED AT LINE 8200
L05AD:              05AD DEFINED AT LINE 1888
                    > USED AT LINE 1884
L05B3:              05B3 DEFINED AT LINE 1892
                    > USED AT LINE 1894
L05C6:              05C6 DEFINED AT LINE 1910
                    > USED AT LINE 1906
L05D1:              05D1 DEFINED AT LINE 1919
                    > USED AT LINE 1915
L05DF:              05DF DEFINED AT LINE 1938
                    > USED AT LINE 2013
                    > USED AT LINE 2065
                    > USED AT LINE 2235
L05E1:              05E1 DEFINED AT LINE 1942
                    > USED AT LINE 1902
                    > USED AT LINE 1991
                    > USED AT LINE 6570
L05EA:              05EA DEFINED AT LINE 1949
                    > USED AT LINE 1952
L05F3:              05F3 DEFINED AT LINE 1961
                    > USED AT LINE 1969
L05FC:              05FC DEFINED AT LINE 1971
                    > USED AT LINE 1966
L0600:              0600 DEFINED AT LINE 1980
                    > USED AT LINE 1955
L0614:              0614 DEFINED AT LINE 1997
                    > USED AT LINE 1983
L061B:              061B DEFINED AT LINE 2009
                    > USED AT LINE 1717
L061D:              061D DEFINED AT LINE 2013
                    > USED AT LINE 2009
L0625:              0625 DEFINED AT LINE 2027
L062C:              062C DEFINED AT LINE 2032
                    > USED AT LINE 2057
L062D:              062D DEFINED AT LINE 2034
L062F:              062F DEFINED AT LINE 2038
                    > USED AT LINE 2034
L0636:              0636 DEFINED AT LINE 2054
L063C:              063C DEFINED AT LINE 2059
                    > USED AT LINE 2202
L063D:              063D DEFINED AT LINE 2061
                    > USED AT LINE 1699
                    > USED AT LINE 6721
                    > USED AT LINE 7216
L063F:              063F DEFINED AT LINE 2065
                    > USED AT LINE 2061
L0644:              0644 DEFINED AT LINE 2071
                    > USED AT LINE 2044
L064B:              064B DEFINED AT LINE 2081
                    > USED AT LINE 2169
L0657:              0657 DEFINED AT LINE 2099
                    > USED AT LINE 2090
L0660:              0660 DEFINED AT LINE 2113
                    > USED AT LINE 2124
L0676:              0676 DEFINED AT LINE 2151
                    > USED AT LINE 2106
L067D:              067D DEFINED AT LINE 2157
                    > USED AT LINE 2122
L067F:              067F DEFINED AT LINE 2160
                    > USED AT LINE 2085
                    > USED AT LINE 2094
L0687:              0687 DEFINED AT LINE 2172
L0688:              0688 DEFINED AT LINE 2184
                    > USED AT LINE 2417
                    > USED AT LINE 2418
                    > USED AT LINE 3198
                    > USED AT LINE 3226
                    > USED AT LINE 4976
                    > USED AT LINE 5797
L068A:              068A DEFINED AT LINE 2188
                    > USED AT LINE 2067
                    > USED AT LINE 2184
                    > USED AT LINE 2237
                    > USED AT LINE 2333
L0690:              0690 DEFINED AT LINE 2199
L0699:              0699 DEFINED AT LINE 2204
                    > USED AT LINE 2227
L069A:              069A DEFINED AT LINE 2206
L069C:              069C DEFINED AT LINE 2210
                    > USED AT LINE 2206
L06A0:              06A0 DEFINED AT LINE 2224
L06A8:              06A8 DEFINED AT LINE 2229
                    > USED AT LINE 2452
L06A9:              06A9 DEFINED AT LINE 2231
                    > USED AT LINE 1708
L06AB:              06AB DEFINED AT LINE 2235
                    > USED AT LINE 2231
L06BC:              06BC DEFINED AT LINE 2251
                    > USED AT LINE 2244
L06CE:              06CE DEFINED AT LINE 2263
                    > USED AT LINE 2259
L06D3:              06D3 DEFINED AT LINE 2269
                    > USED AT LINE 2274
L06DF:              06DF DEFINED AT LINE 2279
                    > USED AT LINE 2281
L06EF:              06EF DEFINED AT LINE 2290
                    > USED AT LINE 2285
L06FD:              06FD DEFINED AT LINE 2303
                    > USED AT LINE 2288
L0711:              0711 DEFINED AT LINE 2319
                    > USED AT LINE 2304
L0714:              0714 DEFINED AT LINE 2320
                    > USED AT LINE 2247
L071C:              071C DEFINED AT LINE 2329
                    > USED AT LINE 2277
                    > USED AT LINE 2293
                    > USED AT LINE 2301
                    > USED AT LINE 2311
                    > USED AT LINE 2313
L0723:              0723 DEFINED AT LINE 2341
                    > USED AT LINE 2269
                    > USED AT LINE 2279
L072C:              072C DEFINED AT LINE 2354
                    > USED AT LINE 2385
L0732:              0732 DEFINED AT LINE 2362
                    > USED AT LINE 3619
                    > USED AT LINE 9208
L0736:              0736 DEFINED AT LINE 2366
                    > USED AT LINE 2370
L0740:              0740 DEFINED AT LINE 2381
                    > USED AT LINE 2303
                    > USED AT LINE 9296
L0742:              0742 DEFINED AT LINE 2383
                    > USED AT LINE 2389
L074C:              074C DEFINED AT LINE 2403
                    > USED AT LINE 2242
                    > USED AT LINE 2297
L0750:              0750 DEFINED AT LINE 2407
L0769:              0769 DEFINED AT LINE 2420
L0779:              0779 DEFINED AT LINE 2429
L077B:              077B DEFINED AT LINE 2432
                    > USED AT LINE 2284
L0780:              0780 DEFINED AT LINE 2449
L0789:              0789 DEFINED AT LINE 2454
                    > USED AT LINE 2594
L078A:              078A DEFINED AT LINE 2456
                    > USED AT LINE 2420
L078C:              078C DEFINED AT LINE 2460
L078E:              078E DEFINED AT LINE 2461
L0790:              0790 DEFINED AT LINE 2462
L0792:              0792 DEFINED AT LINE 2463
L0794:              0794 DEFINED AT LINE 2464
L0796:              0796 DEFINED AT LINE 2465
L0798:              0798 DEFINED AT LINE 2466
L079A:              079A DEFINED AT LINE 2468
L079C:              079C DEFINED AT LINE 2469
L079E:              079E DEFINED AT LINE 2470
L07A0:              07A0 DEFINED AT LINE 2471
L07A2:              07A2 DEFINED AT LINE 2472
L07A4:              07A4 DEFINED AT LINE 2473
L07A6:              07A6 DEFINED AT LINE 2474
L07A8:              07A8 DEFINED AT LINE 2475
L07AA:              07AA DEFINED AT LINE 2476
L07AC:              07AC DEFINED AT LINE 2477
L07AE:              07AE DEFINED AT LINE 2478
L07B0:              07B0 DEFINED AT LINE 2479
L07B2:              07B2 DEFINED AT LINE 2480
L07B4:              07B4 DEFINED AT LINE 2482
L07B6:              07B6 DEFINED AT LINE 2483
L07B8:              07B8 DEFINED AT LINE 2489
                    > USED AT LINE 2464
L07BA:              07BA DEFINED AT LINE 2493
                    > USED AT LINE 2489
L07CD:              07CD DEFINED AT LINE 2511
                    > USED AT LINE 2504
L07D7:              07D7 DEFINED AT LINE 2521
                    > USED AT LINE 2501
                    > USED AT LINE 2507
                    > USED AT LINE 2512
L07DA:              07DA DEFINED AT LINE 2527
                    > USED AT LINE 1927
                    > USED AT LINE 2137
                    > USED AT LINE 2323
                    > USED AT LINE 6609
L07FA:              07FA DEFINED AT LINE 2556
                    > USED AT LINE 871
                    > USED AT LINE 1986
                    > USED AT LINE 2547
                    > USED AT LINE 3361
                    > USED AT LINE 8214
L07FB:              07FB DEFINED AT LINE 2559
                    > USED AT LINE 2545
L07FE:              07FE DEFINED AT LINE 2562
                    > USED AT LINE 2569
L0807:              0807 DEFINED AT LINE 2576
                    > USED AT LINE 449
                    > USED AT LINE 2115
                    > USED AT LINE 2497
                    > USED AT LINE 5039
L0812:              0812 DEFINED AT LINE 2591
L0817:              0817 DEFINED AT LINE 2596
                    > USED AT LINE 2613
L0818:              0818 DEFINED AT LINE 2598
L081A:              081A DEFINED AT LINE 2602
                    > USED AT LINE 2598
L0820:              0820 DEFINED AT LINE 2610
L0827:              0827 DEFINED AT LINE 2615
                    > USED AT LINE 2635
L0828:              0828 DEFINED AT LINE 2617
L082A:              082A DEFINED AT LINE 2621
                    > USED AT LINE 2617
L0830:              0830 DEFINED AT LINE 2632
L0836:              0836 DEFINED AT LINE 2637
                    > USED AT LINE 2658
L0837:              0837 DEFINED AT LINE 2639
L0839:              0839 DEFINED AT LINE 2643
                    > USED AT LINE 2639
L083F:              083F DEFINED AT LINE 2655
L0845:              0845 DEFINED AT LINE 2660
                    > USED AT LINE 2718
L0846:              0846 DEFINED AT LINE 2663
L0848:              0848 DEFINED AT LINE 2667
                    > USED AT LINE 2663
L084E:              084E DEFINED AT LINE 2680
                    > USED AT LINE 2769
                    > USED AT LINE 2821
                    > USED AT LINE 2871
                    > USED AT LINE 3051
                    > USED AT LINE 3093
                    > USED AT LINE 3701
                    > USED AT LINE 3760
                    > USED AT LINE 3843
                    > USED AT LINE 3944
                    > USED AT LINE 3970
                    > USED AT LINE 4165
                    > USED AT LINE 4192
                    > USED AT LINE 4239
                    > USED AT LINE 4633
                    > USED AT LINE 4758
                    > USED AT LINE 4791
                    > USED AT LINE 4822
                    > USED AT LINE 5147
                    > USED AT LINE 6129
                    > USED AT LINE 6384
L0859:              0859 DEFINED AT LINE 2694
                    > USED AT LINE 43
L085F:              085F DEFINED AT LINE 2704
                    > USED AT LINE 33
L0865:              0865 DEFINED AT LINE 2715
L086A:              086A DEFINED AT LINE 2720
                    > USED AT LINE 2741
L086B:              086B DEFINED AT LINE 2722
                    > USED AT LINE 311
                    > USED AT LINE 2407
                    > USED AT LINE 2412
                    > USED AT LINE 2461
                    > USED AT LINE 2990
                    > USED AT LINE 3196
                    > USED AT LINE 3995
                    > USED AT LINE 4339
                    > USED AT LINE 4375
                    > USED AT LINE 4980
                    > USED AT LINE 5516
                    > USED AT LINE 5609
                    > USED AT LINE 5682
                    > USED AT LINE 5802
                    > USED AT LINE 5981
L086D:              086D DEFINED AT LINE 2726
                    > USED AT LINE 2722
L0872:              0872 DEFINED AT LINE 2738
L0878:              0878 DEFINED AT LINE 2743
                    > USED AT LINE 2760
L0879:              0879 DEFINED AT LINE 2745
                    > USED AT LINE 2425
                    > USED AT LINE 2472
                    > USED AT LINE 4406
                    > USED AT LINE 4427
                    > USED AT LINE 4447
                    > USED AT LINE 4470
                    > USED AT LINE 4493
                    > USED AT LINE 4884
L087B:              087B DEFINED AT LINE 2749
                    > USED AT LINE 2745
L087E:              087E DEFINED AT LINE 2757
L0884:              0884 DEFINED AT LINE 2762
                    > USED AT LINE 2786
L0885:              0885 DEFINED AT LINE 2764
                    > USED AT LINE 2426
                    > USED AT LINE 2468
                    > USED AT LINE 2968
                    > USED AT LINE 2970
                    > USED AT LINE 2992
                    > USED AT LINE 3835
                    > USED AT LINE 4142
                    > USED AT LINE 4331
                    > USED AT LINE 4347
                    > USED AT LINE 4350
                    > USED AT LINE 4405
                    > USED AT LINE 4469
                    > USED AT LINE 4882
                    > USED AT LINE 4984
                    > USED AT LINE 5442
                    > USED AT LINE 5617
                    > USED AT LINE 5707
                    > USED AT LINE 5983
                    > USED AT LINE 5986
                    > USED AT LINE 6027
                    > USED AT LINE 6479
                    > USED AT LINE 6482
L0887:              0887 DEFINED AT LINE 2768
                    > USED AT LINE 2764
L0891:              0891 DEFINED AT LINE 2783
L0895:              0895 DEFINED AT LINE 2788
                    > USED AT LINE 2812
L0896:              0896 DEFINED AT LINE 2790
                    > USED AT LINE 339
                    > USED AT LINE 2408
                    > USED AT LINE 2463
                    > USED AT LINE 2470
                    > USED AT LINE 2475
                    > USED AT LINE 3281
                    > USED AT LINE 4987
                    > USED AT LINE 5391
L0898:              0898 DEFINED AT LINE 2794
                    > USED AT LINE 2790
L08A0:              08A0 DEFINED AT LINE 2809
L08A4:              08A4 DEFINED AT LINE 2814
                    > USED AT LINE 2835
L08A5:              08A5 DEFINED AT LINE 2816
                    > USED AT LINE 5127
L08A7:              08A7 DEFINED AT LINE 2820
                    > USED AT LINE 2816
L08AF:              08AF DEFINED AT LINE 2833
L08B2:              08B2 DEFINED AT LINE 2837
                    > USED AT LINE 2862
L08B3:              08B3 DEFINED AT LINE 2839
                    > USED AT LINE 307
                    > USED AT LINE 4979
                    > USED AT LINE 4981
                    > USED AT LINE 5517
                    > USED AT LINE 5683
                    > USED AT LINE 5766
                    > USED AT LINE 5767
                    > USED AT LINE 5794
                    > USED AT LINE 5803
                    > USED AT LINE 7200
                    > USED AT LINE 7202
L08B5:              08B5 DEFINED AT LINE 2843
                    > USED AT LINE 2839
L08BD:              08BD DEFINED AT LINE 2860
L08C0:              08C0 DEFINED AT LINE 2864
                    > USED AT LINE 2889
L08C1:              08C1 DEFINED AT LINE 2866
                    > USED AT LINE 316
                    > USED AT LINE 4985
                    > USED AT LINE 5100
                    > USED AT LINE 5520
                    > USED AT LINE 5618
                    > USED AT LINE 5805
                    > USED AT LINE 5987
                    > USED AT LINE 6483
                    > USED AT LINE 7203
                    > USED AT LINE 8255
                    > USED AT LINE 8258
L08C3:              08C3 DEFINED AT LINE 2870
                    > USED AT LINE 2866
L08CD:              08CD DEFINED AT LINE 2886
L08D1:              08D1 DEFINED AT LINE 2891
                    > USED AT LINE 2912
L08D2:              08D2 DEFINED AT LINE 2893
                    > USED AT LINE 2414
                    > USED AT LINE 2462
                    > USED AT LINE 2967
                    > USED AT LINE 2989
                    > USED AT LINE 4332
                    > USED AT LINE 4342
                    > USED AT LINE 4371
                    > USED AT LINE 4378
L08D4:              08D4 DEFINED AT LINE 2897
                    > USED AT LINE 2893
L08DA:              08DA DEFINED AT LINE 2909
L08DE:              08DE DEFINED AT LINE 2914
                    > USED AT LINE 2935
L08DF:              08DF DEFINED AT LINE 2916
                    > USED AT LINE 2422
                    > USED AT LINE 2478
                    > USED AT LINE 2482
                    > USED AT LINE 2969
                    > USED AT LINE 2991
                    > USED AT LINE 4345
                    > USED AT LINE 4348
                    > USED AT LINE 4376
L08E1:              08E1 DEFINED AT LINE 2920
                    > USED AT LINE 2916
L08E7:              08E7 DEFINED AT LINE 2932
L08ED:              08ED DEFINED AT LINE 2937
                    > USED AT LINE 2959
L08EE:              08EE DEFINED AT LINE 2939
                    > USED AT LINE 1700
                    > USED AT LINE 1709
L08F0:              08F0 DEFINED AT LINE 2944
                    > USED AT LINE 2939
L08F9:              08F9 DEFINED AT LINE 2956
L08FE:              08FE DEFINED AT LINE 2961
                    > USED AT LINE 2981
L08FF:              08FF DEFINED AT LINE 2963
                    > USED AT LINE 2419
                    > USED AT LINE 2421
                    > USED AT LINE 2424
                    > USED AT LINE 2473
                    > USED AT LINE 3200
                    > USED AT LINE 3283
                    > USED AT LINE 4338
                    > USED AT LINE 4370
                    > USED AT LINE 4374
L0901:              0901 DEFINED AT LINE 2967
L0903:              0903 DEFINED AT LINE 2968
L0905:              0905 DEFINED AT LINE 2969
L0907:              0907 DEFINED AT LINE 2970
L0909:              0909 DEFINED AT LINE 2971
L090B:              090B DEFINED AT LINE 2978
L0911:              0911 DEFINED AT LINE 2983
                    > USED AT LINE 3005
L0912:              0912 DEFINED AT LINE 2985
                    > USED AT LINE 3252
                    > USED AT LINE 3253
                    > USED AT LINE 3832
                    > USED AT LINE 4852
                    > USED AT LINE 4853
                    > USED AT LINE 4875
                    > USED AT LINE 4876
L0914:              0914 DEFINED AT LINE 2989
L0916:              0916 DEFINED AT LINE 2990
L0918:              0918 DEFINED AT LINE 2991
L091A:              091A DEFINED AT LINE 2992
L091C:              091C DEFINED AT LINE 2993
L091E:              091E DEFINED AT LINE 3002
L0924:              0924 DEFINED AT LINE 3007
                    > USED AT LINE 3027
L0927:              0927 DEFINED AT LINE 3013
                    > USED AT LINE 3009
L092C:              092C DEFINED AT LINE 3024
L0932:              0932 DEFINED AT LINE 3029
                    > USED AT LINE 3085
L0933:              0933 DEFINED AT LINE 3031
L0935:              0935 DEFINED AT LINE 3035
                    > USED AT LINE 3031
L094D:              094D DEFINED AT LINE 3051
                    > USED AT LINE 3013
                    > USED AT LINE 3035
L095B:              095B DEFINED AT LINE 3065
                    > USED AT LINE 3057
L0967:              0967 DEFINED AT LINE 3082
L096D:              096D DEFINED AT LINE 3087
                    > USED AT LINE 3138
L096E:              096E DEFINED AT LINE 3089
                    > USED AT LINE 3204
L0970:              0970 DEFINED AT LINE 3093
                    > USED AT LINE 3089
L0979:              0979 DEFINED AT LINE 3110
                    > USED AT LINE 6551
                    > USED AT LINE 7622
L097F:              097F DEFINED AT LINE 3118
                    > USED AT LINE 2533
                    > USED AT LINE 3095
                    > USED AT LINE 3127
L0988:              0988 DEFINED AT LINE 3135
L098C:              098C DEFINED AT LINE 3140
                    > USED AT LINE 3160
L098D:              098D DEFINED AT LINE 3142
                    > USED AT LINE 3195
                    > USED AT LINE 3227
L098F:              098F DEFINED AT LINE 3146
                    > USED AT LINE 3142
L0997:              0997 DEFINED AT LINE 3157
L099B:              099B DEFINED AT LINE 3162
                    > USED AT LINE 3374
L099C:              099C DEFINED AT LINE 3164
                    > USED AT LINE 3203
L099E:              099E DEFINED AT LINE 3168
                    > USED AT LINE 3164
L09AF:              09AF DEFINED AT LINE 3185
L09B2:              09B2 DEFINED AT LINE 3189
                    > USED AT LINE 3218
L09B3:              09B3 DEFINED AT LINE 3191
                    > USED AT LINE 340
L09B5:              09B5 DEFINED AT LINE 3195
L09C3:              09C3 DEFINED AT LINE 3203
L09CB:              09CB DEFINED AT LINE 3215
L09CF:              09CF DEFINED AT LINE 3220
                    > USED AT LINE 3243
L09D0:              09D0 DEFINED AT LINE 3222
L09D2:              09D2 DEFINED AT LINE 3226
L09D4:              09D4 DEFINED AT LINE 3227
L09D6:              09D6 DEFINED AT LINE 3228
L09D8:              09D8 DEFINED AT LINE 3229
L09DA:              09DA DEFINED AT LINE 3230
L09DC:              09DC DEFINED AT LINE 3240
L09E0:              09E0 DEFINED AT LINE 3245
                    > USED AT LINE 3272
L09E1:              09E1 DEFINED AT LINE 3247
                    > USED AT LINE 3199
                    > USED AT LINE 3228
L09E3:              09E3 DEFINED AT LINE 3251
L09EF:              09EF DEFINED AT LINE 3258
L09F3:              09F3 DEFINED AT LINE 3270
L09F6:              09F6 DEFINED AT LINE 3274
                    > USED AT LINE 3318
L09F7:              09F7 DEFINED AT LINE 3276
                    > USED AT LINE 3251
L09F9:              09F9 DEFINED AT LINE 3280
L09FB:              09FB DEFINED AT LINE 3281
L09FD:              09FD DEFINED AT LINE 3282
L09FF:              09FF DEFINED AT LINE 3283
L0A01:              0A01 DEFINED AT LINE 3284
L0A03:              0A03 DEFINED AT LINE 3285
L0A05:              0A05 DEFINED AT LINE 3286
L0A07:              0A07 DEFINED AT LINE 3293
                    > USED AT LINE 3284
L0A09:              0A09 DEFINED AT LINE 3297
                    > USED AT LINE 3293
L0A13:              0A13 DEFINED AT LINE 3304
                    > USED AT LINE 3301
L0A17:              0A17 DEFINED AT LINE 3315
L0A1C:              0A1C DEFINED AT LINE 3320
                    > USED AT LINE 3397
L0A1F:              0A1F DEFINED AT LINE 3326
                    > USED AT LINE 3322
L0A24:              0A24 DEFINED AT LINE 3337
                    > USED AT LINE 150
                    > USED AT LINE 3326
L0A43:              0A43 DEFINED AT LINE 3371
L0A49:              0A49 DEFINED AT LINE 3376
                    > USED AT LINE 3187
L0A4A:              0A4A DEFINED AT LINE 3378
                    > USED AT LINE 3201
L0A4C:              0A4C DEFINED AT LINE 3382
                    > USED AT LINE 3378
L0A55:              0A55 DEFINED AT LINE 3394
L0A59:              0A59 DEFINED AT LINE 3397
L0A5B:              0A5B DEFINED AT LINE 3399
                    > USED AT LINE 3425
L0A5C:              0A5C DEFINED AT LINE 3401
                    > USED AT LINE 3285
L0A5E:              0A5E DEFINED AT LINE 3405
                    > USED AT LINE 3401
L0A5F:              0A5F DEFINED AT LINE 3407
                    > USED AT LINE 3385
L0A69:              0A69 DEFINED AT LINE 3414
                    > USED AT LINE 3409
L0A6B:              0A6B DEFINED AT LINE 3422
L0A72:              0A72 DEFINED AT LINE 3427
                    > USED AT LINE 3448
L0A73:              0A73 DEFINED AT LINE 3429
                    > USED AT LINE 3205
L0A75:              0A75 DEFINED AT LINE 3433
                    > USED AT LINE 3429
L0A78:              0A78 DEFINED AT LINE 3437
                    > USED AT LINE 3460
L0A7A:              0A7A DEFINED AT LINE 3445
L0A82:              0A82 DEFINED AT LINE 3450
                    > USED AT LINE 3474
L0A85:              0A85 DEFINED AT LINE 3456
                    > USED AT LINE 3452
L0A86:              0A86 DEFINED AT LINE 3458
                    > USED AT LINE 3464
L0A90:              0A90 DEFINED AT LINE 3471
L0A94:              0A94 DEFINED AT LINE 3476
                    > USED AT LINE 3496
L0A95:              0A95 DEFINED AT LINE 3478
                    > USED AT LINE 341
L0A97:              0A97 DEFINED AT LINE 3482
                    > USED AT LINE 3478
L0A9C:              0A9C DEFINED AT LINE 3493
L0AA2:              0AA2 DEFINED AT LINE 3498
L0AA3:              0AA3 DEFINED AT LINE 3500
L0AA5:              0AA5 DEFINED AT LINE 3504
                    > USED AT LINE 3500
L0AAA:              0AAA DEFINED AT LINE 3535
L0AAE:              0AAE DEFINED AT LINE 3540
                    > USED AT LINE 3691
L0AAF:              0AAF DEFINED AT LINE 3542
L0AB1:              0AB1 DEFINED AT LINE 3546
L0ABE:              0ABE DEFINED AT LINE 3557
                    > USED AT LINE 3550
L0ACA:              0ACA DEFINED AT LINE 3570
                    > USED AT LINE 3563
L0ACE:              0ACE DEFINED AT LINE 3576
                    > USED AT LINE 3566
L0AD7:              0AD7 DEFINED AT LINE 3588
                    > USED AT LINE 3592
L0ADC:              0ADC DEFINED AT LINE 3599
                    > USED AT LINE 3578
                    > USED AT LINE 3630
                    > USED AT LINE 3637
L0AFC:              0AFC DEFINED AT LINE 3644
                    > USED AT LINE 3612
L0B05:              0B05 DEFINED AT LINE 3660
                    > USED AT LINE 3647
L0B10:              0B10 DEFINED AT LINE 3674
                    > USED AT LINE 3652
L0B14:              0B14 DEFINED AT LINE 3688
L0B18:              0B18 DEFINED AT LINE 3693
                    > USED AT LINE 3752
L0B1B:              0B1B DEFINED AT LINE 3699
                    > USED AT LINE 3695
L0B28:              0B28 DEFINED AT LINE 3715
                    > USED AT LINE 3705
                    > USED AT LINE 3774
L0B43:              0B43 DEFINED AT LINE 3749
L0B49:              0B49 DEFINED AT LINE 3754
                    > USED AT LINE 3824
L0B4C:              0B4C DEFINED AT LINE 3760
                    > USED AT LINE 3756
L0B6F:              0B6F DEFINED AT LINE 3784
                    > USED AT LINE 3780
L0B7F:              0B7F DEFINED AT LINE 3797
                    > USED AT LINE 3789
L0B8C:              0B8C DEFINED AT LINE 3809
                    > USED AT LINE 3803
L0B91:              0B91 DEFINED AT LINE 3821
L0B97:              0B97 DEFINED AT LINE 3826
                    > USED AT LINE 3910
L0B9A:              0B9A DEFINED AT LINE 3832
L0BA5:              0BA5 DEFINED AT LINE 3841
L0BAF:              0BAF DEFINED AT LINE 3851
                    > USED AT LINE 3872
L0BC7:              0BC7 DEFINED AT LINE 3880
                    > USED AT LINE 3857
L0BC9:              0BC9 DEFINED AT LINE 3888
                    > USED AT LINE 3859
                    > USED AT LINE 3869
L0BCB:              0BCB DEFINED AT LINE 3891
                    > USED AT LINE 3891
                    > USED AT LINE 3895
L0BD3:              0BD3 DEFINED AT LINE 3907
L0BDA:              0BDA DEFINED AT LINE 3912
                    > USED AT LINE 3936
L0BDB:              0BDB DEFINED AT LINE 3914
L0BDD:              0BDD DEFINED AT LINE 3918
                    > USED AT LINE 3914
L0BE6:              0BE6 DEFINED AT LINE 3933
L0BEA:              0BEA DEFINED AT LINE 3938
                    > USED AT LINE 3962
L0BED:              0BED DEFINED AT LINE 3944
                    > USED AT LINE 3940
L0BF5:              0BF5 DEFINED AT LINE 3951
L0BF7:              0BF7 DEFINED AT LINE 3959
L0BFC:              0BFC DEFINED AT LINE 3964
                    > USED AT LINE 3987
L0BFF:              0BFF DEFINED AT LINE 3970
                    > USED AT LINE 3966
L0C07:              0C07 DEFINED AT LINE 3984
L0C0C:              0C0C DEFINED AT LINE 3989
                    > USED AT LINE 4008
L0C0D:              0C0D DEFINED AT LINE 3991
                    > USED AT LINE 3197
                    > USED AT LINE 4334
                    > USED AT LINE 4343
                    > USED AT LINE 4373
                    > USED AT LINE 4379
L0C15:              0C15 DEFINED AT LINE 4005
L0C19:              0C19 DEFINED AT LINE 4010
                    > USED AT LINE 4040
L0C1A:              0C1A DEFINED AT LINE 4012
                    > USED AT LINE 1718
                    > USED AT LINE 3255
                    > USED AT LINE 4098
L0C1C:              0C1C DEFINED AT LINE 4016
                    > USED AT LINE 4012
L0C21:              0C21 DEFINED AT LINE 4023
                    > USED AT LINE 2521
                    > USED AT LINE 4051
                    > USED AT LINE 4075
                    > USED AT LINE 4079
                    > USED AT LINE 4124
                    > USED AT LINE 4171
                    > USED AT LINE 4205
L0C29:              0C29 DEFINED AT LINE 4037
L0C2D:              0C2D DEFINED AT LINE 4042
                    > USED AT LINE 4064
L0C2E:              0C2E DEFINED AT LINE 4044
                    > USED AT LINE 4504
L0C30:              0C30 DEFINED AT LINE 4048
                    > USED AT LINE 4044
L0C35:              0C35 DEFINED AT LINE 4061
L0C39:              0C39 DEFINED AT LINE 4066
                    > USED AT LINE 4089
L0C3A:              0C3A DEFINED AT LINE 4068
L0C3C:              0C3C DEFINED AT LINE 4072
                    > USED AT LINE 4068
L0C46:              0C46 DEFINED AT LINE 4087
L0C49:              0C49 DEFINED AT LINE 4091
                    > USED AT LINE 4109
L0C4A:              0C4A DEFINED AT LINE 4093
                    > USED AT LINE 2411
L0C4C:              0C4C DEFINED AT LINE 4097
L0C52:              0C52 DEFINED AT LINE 4107
L0C55:              0C55 DEFINED AT LINE 4111
                    > USED AT LINE 4134
L0C56:              0C56 DEFINED AT LINE 4113
                    > USED AT LINE 4143
                    > USED AT LINE 4877
L0C58:              0C58 DEFINED AT LINE 4117
                    > USED AT LINE 4113
L0C61:              0C61 DEFINED AT LINE 4132
L0C64:              0C64 DEFINED AT LINE 4136
                    > USED AT LINE 4157
L0C65:              0C65 DEFINED AT LINE 4138
                    > USED AT LINE 4854
L0C6D:              0C6D DEFINED AT LINE 4154
L0C71:              0C71 DEFINED AT LINE 4159
                    > USED AT LINE 4182
L0C72:              0C72 DEFINED AT LINE 4161
L0C74:              0C74 DEFINED AT LINE 4165
                    > USED AT LINE 4161
L0C77:              0C77 DEFINED AT LINE 4167
                    > USED AT LINE 4197
L0C7E:              0C7E DEFINED AT LINE 4179
L0C82:              0C82 DEFINED AT LINE 4184
                    > USED AT LINE 4230
L0C83:              0C83 DEFINED AT LINE 4186
L0C85:              0C85 DEFINED AT LINE 4190
                    > USED AT LINE 4186
L0C99:              0C99 DEFINED AT LINE 4211
                    > USED AT LINE 4122
                    > USED AT LINE 4202
                    > USED AT LINE 6445
L0CA0:              0CA0 DEFINED AT LINE 4217
                    > USED AT LINE 4213
L0CA3:              0CA3 DEFINED AT LINE 4227
L0CA7:              0CA7 DEFINED AT LINE 4232
                    > USED AT LINE 4323
L0CA8:              0CA8 DEFINED AT LINE 4234
                    > USED AT LINE 2471
                    > USED AT LINE 2476
                    > USED AT LINE 4380
                    > USED AT LINE 4446
L0CAA:              0CAA DEFINED AT LINE 4238
                    > USED AT LINE 4234
L0CB3:              0CB3 DEFINED AT LINE 4242
                    > USED AT LINE 4254
L0CBE:              0CBE DEFINED AT LINE 4253
                    > USED AT LINE 4246
                    > USED AT LINE 4249
L0CC4:              0CC4 DEFINED AT LINE 4263
                    > USED AT LINE 3282
                    > USED AT LINE 4492
L0CC6:              0CC6 DEFINED AT LINE 4265
                    > USED AT LINE 4263
L0CD5:              0CD5 DEFINED AT LINE 4279
                    > USED AT LINE 4274
L0CDB:              0CDB DEFINED AT LINE 4286
                    > USED AT LINE 4301
L0CE5:              0CE5 DEFINED AT LINE 4294
                    > USED AT LINE 4291
L0CF3:              0CF3 DEFINED AT LINE 4307
                    > USED AT LINE 4257
L0CF9:              0CF9 DEFINED AT LINE 4320
L0CFF:              0CFF DEFINED AT LINE 4325
                    > USED AT LINE 4362
L0D00:              0D00 DEFINED AT LINE 4327
                    > USED AT LINE 4404
                    > USED AT LINE 4426
L0D02:              0D02 DEFINED AT LINE 4331
L0D0D:              0D0D DEFINED AT LINE 4338
L0D29:              0D29 DEFINED AT LINE 4359
L0D30:              0D30 DEFINED AT LINE 4364
                    > USED AT LINE 4396
L0D31:              0D31 DEFINED AT LINE 4366
                    > USED AT LINE 4468
L0D4B:              0D4B DEFINED AT LINE 4383
L0D4D:              0D4D DEFINED AT LINE 4394
L0D50:              0D50 DEFINED AT LINE 4398
                    > USED AT LINE 4418
L0D51:              0D51 DEFINED AT LINE 4400
L0D53:              0D53 DEFINED AT LINE 4404
L0D5B:              0D5B DEFINED AT LINE 4415
L0D60:              0D60 DEFINED AT LINE 4420
                    > USED AT LINE 4438
L0D61:              0D61 DEFINED AT LINE 4422
L0D69:              0D69 DEFINED AT LINE 4436
L0D6C:              0D6C DEFINED AT LINE 4440
                    > USED AT LINE 4460
L0D75:              0D75 DEFINED AT LINE 4457
L0D79:              0D79 DEFINED AT LINE 4462
                    > USED AT LINE 4484
L0D7A:              0D7A DEFINED AT LINE 4464
                    > USED AT LINE 3836
L0D84:              0D84 DEFINED AT LINE 4481
L0D8B:              0D8B DEFINED AT LINE 4486
                    > USED AT LINE 4521
L0D8C:              0D8C DEFINED AT LINE 4488
                    > USED AT LINE 4344
L0D8E:              0D8E DEFINED AT LINE 4492
L0D94:              0D94 DEFINED AT LINE 4500
                    > USED AT LINE 2423
                    > USED AT LINE 3996
                    > USED AT LINE 4346
                    > USED AT LINE 4349
                    > USED AT LINE 9241
L0D96:              0D96 DEFINED AT LINE 4504
L0D9A:              0D9A DEFINED AT LINE 4506
L0D9E:              0D9E DEFINED AT LINE 4510
L0DA0:              0DA0 DEFINED AT LINE 4518
L0DA8:              0DA8 DEFINED AT LINE 4523
                    > USED AT LINE 4541
L0DA9:              0DA9 DEFINED AT LINE 4525
                    > USED AT LINE 2413
                    > USED AT LINE 4508
                    > USED AT LINE 4609
L0DAB:              0DAB DEFINED AT LINE 4529
                    > USED AT LINE 4525
L0DB0:              0DB0 DEFINED AT LINE 4538
L0DB9:              0DB9 DEFINED AT LINE 4543
                    > USED AT LINE 4573
L0DBA:              0DBA DEFINED AT LINE 4545
L0DBC:              0DBC DEFINED AT LINE 4549
                    > USED AT LINE 4545
L0DBF:              0DBF DEFINED AT LINE 4553
                    > USED AT LINE 4530
L0DC5:              0DC5 DEFINED AT LINE 4557
                    > USED AT LINE 4562
L0DCE:              0DCE DEFINED AT LINE 4571
L0DD1:              0DD1 DEFINED AT LINE 4575
                    > USED AT LINE 4601
L0DD2:              0DD2 DEFINED AT LINE 4577
                    > USED AT LINE 310
                    > USED AT LINE 2415
                    > USED AT LINE 4610
L0DD4:              0DD4 DEFINED AT LINE 4581
                    > USED AT LINE 4577
L0DDD:              0DDD DEFINED AT LINE 4599
L0DE0:              0DE0 DEFINED AT LINE 4603
                    > USED AT LINE 4622
L0DE1:              0DE1 DEFINED AT LINE 4605
                    > USED AT LINE 4097
                    > USED AT LINE 5613
                    > USED AT LINE 5984
                    > USED AT LINE 5999
L0DE3:              0DE3 DEFINED AT LINE 4609
L0DE9:              0DE9 DEFINED AT LINE 4619
L0DED:              0DED DEFINED AT LINE 4624
                    > USED AT LINE 4657
L0DEE:              0DEE DEFINED AT LINE 4626
                    > USED AT LINE 2477
L0DF0:              0DF0 DEFINED AT LINE 4630
                    > USED AT LINE 4626
L0E04:              0E04 DEFINED AT LINE 4654
L0E08:              0E08 DEFINED AT LINE 4659
                    > USED AT LINE 4676
L0E09:              0E09 DEFINED AT LINE 4661
                    > USED AT LINE 2460
                    > USED AT LINE 5390
L0E0B:              0E0B DEFINED AT LINE 4665
                    > USED AT LINE 4661
L0E0E:              0E0E DEFINED AT LINE 4673
L0E12:              0E12 DEFINED AT LINE 4678
                    > USED AT LINE 4699
L0E13:              0E13 DEFINED AT LINE 4680
                    > USED AT LINE 5522
                    > USED AT LINE 5795
L0E15:              0E15 DEFINED AT LINE 4684
                    > USED AT LINE 4680
L0E17:              0E17 DEFINED AT LINE 4687
                    > USED AT LINE 4666
L0E1A:              0E1A DEFINED AT LINE 4696
L0E1E:              0E1E DEFINED AT LINE 4701
                    > USED AT LINE 4719
L0E1F:              0E1F DEFINED AT LINE 4703
                    > USED AT LINE 2416
                    > USED AT LINE 5126
                    > USED AT LINE 5614
                    > USED AT LINE 5985
                    > USED AT LINE 6000
                    > USED AT LINE 7198
L0E21:              0E21 DEFINED AT LINE 4707
                    > USED AT LINE 4703
L0E24:              0E24 DEFINED AT LINE 4716
L0E25:              0E25 DEFINED AT LINE 4717
L0E26:              0E26 DEFINED AT LINE 4719
L0E28:              0E28 DEFINED AT LINE 4721
                    > USED AT LINE 4749
L0E29:              0E29 DEFINED AT LINE 4723
                    > USED AT LINE 5099
                    > USED AT LINE 5519
                    > USED AT LINE 5610
                    > USED AT LINE 5922
                    > USED AT LINE 7199
L0E2B:              0E2B DEFINED AT LINE 4728
                    > USED AT LINE 4723
L0E2D:              0E2D DEFINED AT LINE 4732
                    > USED AT LINE 4708
L0E2E:              0E2E DEFINED AT LINE 4735
                    > USED AT LINE 4688
L0E31:              0E31 DEFINED AT LINE 4746
L0E35:              0E35 DEFINED AT LINE 4751
                    > USED AT LINE 4782
L0E36:              0E36 DEFINED AT LINE 4753
                    > USED AT LINE 3254
L0E38:              0E38 DEFINED AT LINE 4757
                    > USED AT LINE 4753
L0E45:              0E45 DEFINED AT LINE 4779
L0E4A:              0E4A DEFINED AT LINE 4784
                    > USED AT LINE 4813
L0E4D:              0E4D DEFINED AT LINE 4790
                    > USED AT LINE 4786
L0E5A:              0E5A DEFINED AT LINE 4810
L0E5F:              0E5F DEFINED AT LINE 4815
                    > USED AT LINE 4844
L0E60:              0E60 DEFINED AT LINE 4817
                    > USED AT LINE 4341
                    > USED AT LINE 4377
L0E62:              0E62 DEFINED AT LINE 4821
                    > USED AT LINE 4817
L0E72:              0E6F DEFINED AT LINE 4841
L0E74:              0E74 DEFINED AT LINE 4846
                    > USED AT LINE 4867
L0E75:              0E75 DEFINED AT LINE 4848
L0E77:              0E77 DEFINED AT LINE 4852
L0E7F:              0E7F DEFINED AT LINE 4856
L0E81:              0E81 DEFINED AT LINE 4864
L0E86:              0E86 DEFINED AT LINE 4869
                    > USED AT LINE 4896
L0E89:              0E89 DEFINED AT LINE 4875
L0E8F:              0E8F DEFINED AT LINE 4879
L0E91:              0E91 DEFINED AT LINE 4880
L0995:              0E95 DEFINED AT LINE 4884
L0E99:              0E99 DEFINED AT LINE 4893
L0EA2:              0EA2 DEFINED AT LINE 4898
                    > USED AT LINE 4915
L0EA5:              0EA5 DEFINED AT LINE 4904
                    > USED AT LINE 4900
L0EAB:              0EAB DEFINED AT LINE 4913
L0EAE:              0EAE DEFINED AT LINE 4917
                    > USED AT LINE 4964
L0EAF:              0EAF DEFINED AT LINE 4919
L0EB1:              0EB1 DEFINED AT LINE 4923
L0EB6:              0EB6 DEFINED AT LINE 4928
L0EB8:              0EB8 DEFINED AT LINE 4930
X0EC1:              0EC1 DEFINED AT LINE 4941
X0EC2:              0EC2 DEFINED AT LINE 4942
L0EC3:              0EC3 DEFINED AT LINE 4949
                    > USED AT LINE 1692
                    > USED AT LINE 2456
                    > USED AT LINE 2963
                    > USED AT LINE 2985
                    > USED AT LINE 3191
                    > USED AT LINE 3222
                    > USED AT LINE 3247
                    > USED AT LINE 3276
                    > USED AT LINE 3828
                    > USED AT LINE 3991
                    > USED AT LINE 4093
                    > USED AT LINE 4138
                    > USED AT LINE 4327
                    > USED AT LINE 4366
                    > USED AT LINE 4400
                    > USED AT LINE 4422
                    > USED AT LINE 4442
                    > USED AT LINE 4464
                    > USED AT LINE 4488
                    > USED AT LINE 4500
                    > USED AT LINE 4605
                    > USED AT LINE 4848
                    > USED AT LINE 4871
                    > USED AT LINE 4923
                    > USED AT LINE 4968
                    > USED AT LINE 5092
                    > USED AT LINE 5117
                    > USED AT LINE 5157
                    > USED AT LINE 5383
                    > USED AT LINE 5537
                    > USED AT LINE 5605
                    > USED AT LINE 5745
                    > USED AT LINE 5761
                    > USED AT LINE 5977
                    > USED AT LINE 5994
                    > USED AT LINE 6901
                    > USED AT LINE 7196
                    > USED AT LINE 7341
                    > USED AT LINE 8007
                    > USED AT LINE 8031
                    > USED AT LINE 8055
                    > USED AT LINE 8078
                    > USED AT LINE 8105
                    > USED AT LINE 8135
                    > USED AT LINE 8197
                    > USED AT LINE 8225
                    > USED AT LINE 8251
                    > USED AT LINE 8691
L0EC7:              0EC7 DEFINED AT LINE 4961
L0ECF:              0ECF DEFINED AT LINE 4966
                    > USED AT LINE 5088
L0ED0:              0ED0 DEFINED AT LINE 4968
                    > USED AT LINE 5515
L0ED2:              0ED2 DEFINED AT LINE 4972
L0EF9:              0EF9 DEFINED AT LINE 4992
L0EFB:              0EFB DEFINED AT LINE 4999
                    > USED AT LINE 4975
L0EFD:              0EFD DEFINED AT LINE 5003
                    > USED AT LINE 4999
L0F09:              0F09 DEFINED AT LINE 5017
                    > USED AT LINE 5010
L0F0E:              0F0E DEFINED AT LINE 5022
X0F11:              0F11 DEFINED AT LINE 5024
L0F1D:              0F1D DEFINED AT LINE 5036
                    > USED AT LINE 5043
L0F2E:              0F2E DEFINED AT LINE 5053
                    > USED AT LINE 5003
                    > USED AT LINE 6690
                    > USED AT LINE 8205
L0F36:              0F36 DEFINED AT LINE 5061
                    > USED AT LINE 5054
L0F4A:              0F4A DEFINED AT LINE 5086
L0F4D:              0F4D DEFINED AT LINE 5090
                    > USED AT LINE 5113
L0F4E:              0F4E DEFINED AT LINE 5092
                    > USED AT LINE 1786
                    > USED AT LINE 4977
                    > USED AT LINE 4982
                    > USED AT LINE 4991
                    > USED AT LINE 5254
                    > USED AT LINE 5277
                    > USED AT LINE 5330
                    > USED AT LINE 5401
                    > USED AT LINE 5443
                    > USED AT LINE 5444
                    > USED AT LINE 5594
                    > USED AT LINE 5615
                    > USED AT LINE 5684
                    > USED AT LINE 5712
                    > USED AT LINE 5796
                    > USED AT LINE 5804
                    > USED AT LINE 6001
L0F50:              0F50 DEFINED AT LINE 5096
L0F5A:              0F5A DEFINED AT LINE 5110
L0F5E:              0F5E DEFINED AT LINE 5115
                    > USED AT LINE 5139
L0F5F:              0F5F DEFINED AT LINE 5117
                    > USED AT LINE 4988
                    > USED AT LINE 5402
                    > USED AT LINE 5591
                    > USED AT LINE 5708
                    > USED AT LINE 5798
L0F61:              0F61 DEFINED AT LINE 5121
X0F66:              0F66 DEFINED AT LINE 5125
L0F6E:              0F6E DEFINED AT LINE 5136
L0F75:              0F75 DEFINED AT LINE 5141
                    > USED AT LINE 5245
L0F76:              0F76 DEFINED AT LINE 5143
                    > USED AT LINE 5123
                    > USED AT LINE 5163
L0F78:              0F78 DEFINED AT LINE 5147
                    > USED AT LINE 5143
L0F83:              0F83 DEFINED AT LINE 5157
                    > USED AT LINE 5096
                    > USED AT LINE 5499
                    > USED AT LINE 5659
                    > USED AT LINE 5867
                    > USED AT LINE 5895
                    > USED AT LINE 5919
                    > USED AT LINE 6480
L0F85:              0F85 DEFINED AT LINE 5161
L0F8C:              0F8C DEFINED AT LINE 5171
                    > USED AT LINE 1631
                    > USED AT LINE 5022
L0F8F:              0F8F DEFINED AT LINE 5177
                    > USED AT LINE 5200
L0F9C:              0F9C DEFINED AT LINE 5190
                    > USED AT LINE 5184
L0F9E:              0F9E DEFINED AT LINE 5197
                    > USED AT LINE 5030
                    > USED AT LINE 5149
                    > USED AT LINE 6595
                    > USED AT LINE 6812
L0FA2:              0FA2 DEFINED AT LINE 5200
L0FC2:              0FC2 DEFINED AT LINE 5231
L0FC4:              0FC4 DEFINED AT LINE 5242
L0FCE:              0FCE DEFINED AT LINE 5247
                    > USED AT LINE 5268
L0FD1:              0FD1 DEFINED AT LINE 5253
L0FD7:              0FD7 DEFINED AT LINE 5265
L0FE1:              0FE1 DEFINED AT LINE 5270
                    > USED AT LINE 5321
L0FE2:              0FE2 DEFINED AT LINE 5272
L0FE4:              0FE4 DEFINED AT LINE 5276
X0FEA:              0FEA DEFINED AT LINE 5283
X0FEB:              0FEB DEFINED AT LINE 5284
L0FEC:              0FEC DEFINED AT LINE 5287
X0FEE:              0FEE DEFINED AT LINE 5289
X0FEF:              0FEF DEFINED AT LINE 5290
L0FF0:              0FF0 DEFINED AT LINE 5294
                    > USED AT LINE 5253
                    > USED AT LINE 5287
                    > USED AT LINE 5513
                    > USED AT LINE 5593
                    > USED AT LINE 5680
X0FF3:              0FF3 DEFINED AT LINE 5299
X0FF4:              0FF4 DEFINED AT LINE 5300
L0FF5:              0FF5 DEFINED AT LINE 5304
                    > USED AT LINE 1502
                    > USED AT LINE 5276
L0FFC:              0FFC DEFINED AT LINE 5318
L1005:              1005 DEFINED AT LINE 5323
                    > USED AT LINE 5379
L1006:              1006 DEFINED AT LINE 5325
L1008:              1008 DEFINED AT LINE 5329
X100E:              100E DEFINED AT LINE 5335
X100F:              100F DEFINED AT LINE 5336
X1010:              1010 DEFINED AT LINE 5337
L1011:              1011 DEFINED AT LINE 5343
                    > USED AT LINE 314
                    > USED AT LINE 337
                    > USED AT LINE 4989
                    > USED AT LINE 5329
                    > USED AT LINE 5399
                    > USED AT LINE 5592
                    > USED AT LINE 5710
                    > USED AT LINE 5800
                    > USED AT LINE 7508
                    > USED AT LINE 8253
                    > USED AT LINE 8256
L1013:              1013 DEFINED AT LINE 5347
                    > USED AT LINE 5343
L1015:              1015 DEFINED AT LINE 5349
                    > USED AT LINE 5361
                    > USED AT LINE 5462
L1019:              1019 DEFINED AT LINE 5356
                    > USED AT LINE 5428
L101A:              101A DEFINED AT LINE 5358
L101E:              101E DEFINED AT LINE 5363
                    > USED AT LINE 5395
L1020:              1020 DEFINED AT LINE 5376
L1027:              1027 DEFINED AT LINE 5381
                    > USED AT LINE 5484
L1029:              1028 DEFINED AT LINE 5383
L102A:              102A DEFINED AT LINE 5387
L103E:              103E DEFINED AT LINE 5399
X1048:              1048 DEFINED AT LINE 5407
X1049:              1049 DEFINED AT LINE 5409
X104A:              104A DEFINED AT LINE 5410
L104B:              104B DEFINED AT LINE 5417
                    > USED AT LINE 308
                    > USED AT LINE 2409
                    > USED AT LINE 3833
                    > USED AT LINE 4335
                    > USED AT LINE 4925
                    > USED AT LINE 4972
                    > USED AT LINE 5121
                    > USED AT LINE 5161
                    > USED AT LINE 5387
                    > USED AT LINE 5400
                    > USED AT LINE 5495
                    > USED AT LINE 5587
                    > USED AT LINE 5595
                    > USED AT LINE 5655
                    > USED AT LINE 5714
                    > USED AT LINE 5865
                    > USED AT LINE 5893
                    > USED AT LINE 5923
                    > USED AT LINE 5969
                    > USED AT LINE 6184
                    > USED AT LINE 6474
                    > USED AT LINE 6528
                    > USED AT LINE 7514
                    > USED AT LINE 8198
L104D:              104D DEFINED AT LINE 5421
                    > USED AT LINE 5417
L1055:              1055 DEFINED AT LINE 5437
                    > USED AT LINE 2319
X1061:              1061 DEFINED AT LINE 5448
X1062:              1062 DEFINED AT LINE 5449
X1063:              1063 DEFINED AT LINE 5450
L1064:              1064 DEFINED AT LINE 5456
                    > USED AT LINE 5441
                    > USED AT LINE 7511
L1066:              1066 DEFINED AT LINE 5460
                    > USED AT LINE 5456
L106A:              106A DEFINED AT LINE 5481
L1073:              1073 DEFINED AT LINE 5486
                    > USED AT LINE 5553
L1074:              1074 DEFINED AT LINE 5488
L1076:              1076 DEFINED AT LINE 5492
L1081:              1081 DEFINED AT LINE 5501
X1083:              1083 DEFINED AT LINE 5505
X1084:              1084 DEFINED AT LINE 5506
L1085:              1085 DEFINED AT LINE 5513
                    > USED AT LINE 4919
                    > USED AT LINE 5249
                    > USED AT LINE 5272
                    > USED AT LINE 5488
                    > USED AT LINE 5492
                    > USED AT LINE 5648
                    > USED AT LINE 5788
                    > USED AT LINE 6904
                    > USED AT LINE 7091
                    > USED AT LINE 7347
L1094:              1094 DEFINED AT LINE 5522
L109A:              109A DEFINED AT LINE 5531
                    > USED AT LINE 5523
L109C:              109C DEFINED AT LINE 5535
                    > USED AT LINE 5531
L10A0:              10A0 DEFINED AT LINE 5550
L10A6:              10A6 DEFINED AT LINE 5555
                    > USED AT LINE 5644
L10A7:              10A7 DEFINED AT LINE 5557
L10A9:              10A9 DEFINED AT LINE 5561
                    > USED AT LINE 5557
L10AC:              10AC DEFINED AT LINE 5571
L10B3:              10B3 DEFINED AT LINE 5576
                    > USED AT LINE 5696
L10B4:              10B4 DEFINED AT LINE 5578
L10B6:              10B6 DEFINED AT LINE 5580
L10CD:              10CD DEFINED AT LINE 5605
                    > USED AT LINE 5586
                    > USED AT LINE 5709
X10E5:              10E5 DEFINED AT LINE 5623
X10E6:              10E6 DEFINED AT LINE 5625
X10E7:              10E7 DEFINED AT LINE 5626
L10E8:              10E8 DEFINED AT LINE 5630
                    > USED AT LINE 5580
                    > USED AT LINE 7502
L10EA:              10EA DEFINED AT LINE 5641
L10F4:              10F4 DEFINED AT LINE 5646
                    > USED AT LINE 5574
L10F5:              10F5 DEFINED AT LINE 5648
L10FF:              10FF DEFINED AT LINE 5657
L1104:              1104 DEFINED AT LINE 5661
X1106:              1106 DEFINED AT LINE 5665
X1107:              1107 DEFINED AT LINE 5666
L1108:              1108 DEFINED AT LINE 5674
                    > USED AT LINE 1520
                    > USED AT LINE 5325
                    > USED AT LINE 5437
                    > USED AT LINE 5578
                    > USED AT LINE 5652
                    > USED AT LINE 5700
                    > USED AT LINE 5858
                    > USED AT LINE 5884
                    > USED AT LINE 5911
                    > USED AT LINE 5939
                    > USED AT LINE 5963
                    > USED AT LINE 6020
                    > USED AT LINE 6046
                    > USED AT LINE 6178
                    > USED AT LINE 6201
                    > USED AT LINE 6226
                    > USED AT LINE 6469
                    > USED AT LINE 6523
                    > USED AT LINE 6907
                    > USED AT LINE 7088
                    > USED AT LINE 7344
L1110:              1110 DEFINED AT LINE 5680
                    > USED AT LINE 5675
L111B:              111B DEFINED AT LINE 5686
L111D:              111D DEFINED AT LINE 5693
L1124:              1124 DEFINED AT LINE 5698
                    > USED AT LINE 5757
L1125:              1125 DEFINED AT LINE 5700
L1127:              1127 DEFINED AT LINE 5704
X113D:              113D DEFINED AT LINE 5720
X113E:              113E DEFINED AT LINE 5722
X113F:              113F DEFINED AT LINE 5723
L1140:              1140 DEFINED AT LINE 5727
                    > USED AT LINE 5704
                    > USED AT LINE 7505
L1142:              1142 DEFINED AT LINE 5729
                    > USED AT LINE 5711
L1154:              1154 DEFINED AT LINE 5754
L115F:              115F DEFINED AT LINE 5759
                    > USED AT LINE 5784
L1160:              1160 DEFINED AT LINE 5761
                    > USED AT LINE 5653
L1162:              1162 DEFINED AT LINE 5765
L116A:              116A DEFINED AT LINE 5770
L1170:              1170 DEFINED AT LINE 5781
L117C:              117C DEFINED AT LINE 5786
                    > USED AT LINE 5817
L117D:              117D DEFINED AT LINE 5788
L117F:              117F DEFINED AT LINE 5792
L119D:              119D DEFINED AT LINE 5814
L11AA:              11AA DEFINED AT LINE 5819
                    > USED AT LINE 6271
L11AB:              11AB DEFINED AT LINE 5821
L11AD:              11AD DEFINED AT LINE 5825
                    > USED AT LINE 5821
L11B5:              11B5 DEFINED AT LINE 5831
                    > USED AT LINE 392
                    > USED AT LINE 5792
                    > USED AT LINE 6910
L11BB:              11BB DEFINED AT LINE 5851
L11BF:              11BF DEFINED AT LINE 5856
                    > USED AT LINE 5880
L11CD:              11CD DEFINED AT LINE 5877
L11D4:              11D4 DEFINED AT LINE 5882
                    > USED AT LINE 5907
L11D5:              11D5 DEFINED AT LINE 5884
L11E5:              11E5 DEFINED AT LINE 5904
L11EB:              11EB DEFINED AT LINE 5909
                    > USED AT LINE 5935
L11EC:              11EC DEFINED AT LINE 5911
L1200:              1200 DEFINED AT LINE 5932
L1206:              1206 DEFINED AT LINE 5937
                    > USED AT LINE 5959
L1207:              1207 DEFINED AT LINE 5939
L1212:              1212 DEFINED AT LINE 5956
L1219:              1219 DEFINED AT LINE 5961
                    > USED AT LINE 6016
L121A:              121A DEFINED AT LINE 5963
L1225:              1225 DEFINED AT LINE 5977
                    > USED AT LINE 5920
                    > USED AT LINE 5947
                    > USED AT LINE 6029
L1237:              1237 DEFINED AT LINE 5994
                    > USED AT LINE 6028
                    > USED AT LINE 6053
                    > USED AT LINE 6209
L1243:              1243 DEFINED AT LINE 6013
L124B:              124B DEFINED AT LINE 6018
                    > USED AT LINE 6042
L124C:              124C DEFINED AT LINE 6020
L124E:              124E DEFINED AT LINE 6024
L1250:              1250 DEFINED AT LINE 6025
L125B:              125B DEFINED AT LINE 6039
L1262:              1262 DEFINED AT LINE 6044
                    > USED AT LINE 6174
L1263:              1263 DEFINED AT LINE 6046
X126E:              126E DEFINED AT LINE 6058
X126F:              126F DEFINED AT LINE 6060
X1270:              1270 DEFINED AT LINE 6061
L1271:              1271 DEFINED AT LINE 6066
                    > USED AT LINE 4855
                    > USED AT LINE 5915
                    > USED AT LINE 7475
                    > USED AT LINE 8083
X1273:              1273 DEFINED AT LINE 6069
X1274:              1274 DEFINED AT LINE 6071
X1275:              1275 DEFINED AT LINE 6072
L1276:              1276 DEFINED AT LINE 6078
                    > USED AT LINE 1672
                    > USED AT LINE 1705
                    > USED AT LINE 1714
                    > USED AT LINE 1727
                    > USED AT LINE 2479
                    > USED AT LINE 3229
                    > USED AT LINE 4381
                    > USED AT LINE 5500
                    > USED AT LINE 5660
                    > USED AT LINE 5685
                    > USED AT LINE 6024
                    > USED AT LINE 6231
                    > USED AT LINE 6531
                    > USED AT LINE 7490
L1278:              1278 DEFINED AT LINE 6082
                    > USED AT LINE 6066
                    > USED AT LINE 6078
                    > USED AT LINE 6135
L127C:              127C DEFINED AT LINE 6087
                    > USED AT LINE 6508
X1280:              1280 DEFINED AT LINE 6094
X1281:              1281 DEFINED AT LINE 6096
X1282:              1282 DEFINED AT LINE 6097
L1283:              1283 DEFINED AT LINE 6101
                    > USED AT LINE 1701
                    > USED AT LINE 1710
                    > USED AT LINE 1719
                    > USED AT LINE 2465
                    > USED AT LINE 4505
                    > USED AT LINE 4879
                    > USED AT LINE 5862
                    > USED AT LINE 7472
X1285:              1285 DEFINED AT LINE 6105
X1286:              1286 DEFINED AT LINE 6107
X1287:              1287 DEFINED AT LINE 6108
L1288:              1288 DEFINED AT LINE 6112
                    > USED AT LINE 5888
                    > USED AT LINE 7487
X128A:              128A DEFINED AT LINE 6116
X128B:              128B DEFINED AT LINE 6118
X128C:              128C DEFINED AT LINE 6119
L128D:              128D DEFINED AT LINE 6125
                    > USED AT LINE 3256
                    > USED AT LINE 6050
                    > USED AT LINE 7484
L128F:              128F DEFINED AT LINE 6129
                    > USED AT LINE 6101
                    > USED AT LINE 6112
                    > USED AT LINE 6125
L1294:              1294 DEFINED AT LINE 6135
                    > USED AT LINE 6456
X129C:              129C DEFINED AT LINE 6145
X129D:              129D DEFINED AT LINE 6146
X129E:              129E DEFINED AT LINE 6147
L129F:              129F DEFINED AT LINE 6151
                    > USED AT LINE 5967
                    > USED AT LINE 7481
X12A1:              12A1 DEFINED AT LINE 6155
X12A2:              12A2 DEFINED AT LINE 6156
X12A3:              12A3 DEFINED AT LINE 6157
L12A4:              12A4 DEFINED AT LINE 6161
                    > USED AT LINE 5943
                    > USED AT LINE 7478
L12A6:              12A6 DEFINED AT LINE 6171
L12AA:              12AA DEFINED AT LINE 6176
                    > USED AT LINE 6197
L12AB:              12AB DEFINED AT LINE 6178
L12B6:              12B6 DEFINED AT LINE 6194
L12BC:              12BC DEFINED AT LINE 6199
                    > USED AT LINE 6222
L12BD:              12BD DEFINED AT LINE 6201
L12C1:              12C1 DEFINED AT LINE 6207
L12C8:              12C8 DEFINED AT LINE 6219
L12CF:              12CF DEFINED AT LINE 6224
                    > USED AT LINE 6621
L12D0:              12D0 DEFINED AT LINE 6226
L12D2:              12D2 DEFINED AT LINE 6230
L12D6:              12D6 DEFINED AT LINE 6233
L12D8:              12D8 DEFINED AT LINE 6241
                    > USED AT LINE 1526
                    > USED AT LINE 5582
                    > USED AT LINE 5705
                    > USED AT LINE 5890
                    > USED AT LINE 5917
                    > USED AT LINE 5945
                    > USED AT LINE 6025
                    > USED AT LINE 6051
                    > USED AT LINE 6207
L12DA:              12DA DEFINED AT LINE 6245
                    > USED AT LINE 6241
L12E5:              12E5 DEFINED AT LINE 6269
L12E8:              12E8 DEFINED AT LINE 6273
                    > USED AT LINE 6298
L12E9:              12E9 DEFINED AT LINE 6275
                    > USED AT LINE 4333
                    > USED AT LINE 4340
                    > USED AT LINE 4372
L12EB:              12EB DEFINED AT LINE 6279
                    > USED AT LINE 6275
L12F2:              12F2 DEFINED AT LINE 6295
L12F6:              12F6 DEFINED AT LINE 6300
                    > USED AT LINE 6320
L12F7:              12F7 DEFINED AT LINE 6302
L12F9:              12F9 DEFINED AT LINE 6306
                    > USED AT LINE 6302
L12FE:              12FE DEFINED AT LINE 6318
L1301:              1301 DEFINED AT LINE 6322
                    > USED AT LINE 6352
L1302:              1302 DEFINED AT LINE 6324
L1304:              1304 DEFINED AT LINE 6328
                    > USED AT LINE 6324
L1307:              1307 DEFINED AT LINE 6332
                    > USED AT LINE 6307
L130E:              130E DEFINED AT LINE 6349
L1315:              1315 DEFINED AT LINE 6354
                    > USED AT LINE 6640
L1316:              1316 DEFINED AT LINE 6356
L1318:              1318 DEFINED AT LINE 6360
                    > USED AT LINE 6356
X1320:              1320 DEFINED AT LINE 6372
X1321:              1321 DEFINED AT LINE 6373
X1322:              1322 DEFINED AT LINE 6374
L1323:              1323 DEFINED AT LINE 6380
                    > USED AT LINE 6182
                    > USED AT LINE 7493
L1325:              1325 DEFINED AT LINE 6384
                    > USED AT LINE 6380
L132B:              132B DEFINED AT LINE 6389
L132D:              132D DEFINED AT LINE 6392
                    > USED AT LINE 6253
X132F:              132F DEFINED AT LINE 6396
X1330:              1330 DEFINED AT LINE 6397
X1331:              1331 DEFINED AT LINE 6398
L1332:              1332 DEFINED AT LINE 6404
                    > USED AT LINE 6205
                    > USED AT LINE 7496
L1334:              1334 DEFINED AT LINE 6408
                    > USED AT LINE 6404
X1339:              1339 DEFINED AT LINE 6413
X133A:              133A DEFINED AT LINE 6414
X133B:              133B DEFINED AT LINE 6415
L133C:              133C DEFINED AT LINE 6423
                    > USED AT LINE 6230
                    > USED AT LINE 7499
L133E:              133E DEFINED AT LINE 6427
                    > USED AT LINE 6423
L133F:              133F DEFINED AT LINE 6429
                    > USED AT LINE 6409
L1350:              1350 DEFINED AT LINE 6445
                    > USED AT LINE 6441
L1358:              1358 DEFINED AT LINE 6454
                    > USED AT LINE 6436
                    > USED AT LINE 6449
L135D:              135D DEFINED AT LINE 6463
L1360:              1360 DEFINED AT LINE 6467
                    > USED AT LINE 6519
L1361:              1361 DEFINED AT LINE 6469
L1363:              1363 DEFINED AT LINE 6473
L1368:              1368 DEFINED AT LINE 6478
X1376:              1376 DEFINED AT LINE 6489
X1377:              1377 DEFINED AT LINE 6490
X1378:              1378 DEFINED AT LINE 6491
L1379:              1379 DEFINED AT LINE 6497
                    > USED AT LINE 6473
                    > USED AT LINE 7517
L137B:              137B DEFINED AT LINE 6501
                    > USED AT LINE 6497
L1383:              1383 DEFINED AT LINE 6516
L1387:              1387 DEFINED AT LINE 6521
                    > USED AT LINE 6662
L1388:              1388 DEFINED AT LINE 6523
L138A:              138A DEFINED AT LINE 6527
L1391:              1391 DEFINED AT LINE 6532
X1393:              1393 DEFINED AT LINE 6537
X1394:              1394 DEFINED AT LINE 6538
X1395:              1395 DEFINED AT LINE 6539
L1396:              1396 DEFINED AT LINE 6546
                    > USED AT LINE 6527
                    > USED AT LINE 7520
L1398:              1398 DEFINED AT LINE 6550
                    > USED AT LINE 6546
L139F:              139F DEFINED AT LINE 6563
                    > USED AT LINE 6481
L13A1:              13A1 DEFINED AT LINE 6567
                    > USED AT LINE 6563
                    > USED AT LINE 6586
L13B8:              13B8 DEFINED AT LINE 6591
                    > USED AT LINE 6578
L13D1:              13D1 DEFINED AT LINE 6619
L13D4:              13D4 DEFINED AT LINE 6623
                    > USED AT LINE 6465
L13D5:              13D5 DEFINED AT LINE 6625
L13D7:              13D7 DEFINED AT LINE 6629
                    > USED AT LINE 6625
L13DD:              13DD DEFINED AT LINE 6638
L13E0:              13E0 DEFINED AT LINE 6642
                    > USED AT LINE 5854
L13E1:              13E1 DEFINED AT LINE 6644
L13E3:              13E3 DEFINED AT LINE 6648
                    > USED AT LINE 6644
L13E9:              13E9 DEFINED AT LINE 6659
L13EF:              13EF DEFINED AT LINE 6664
                    > USED AT LINE 6682
L13F0:              13F0 DEFINED AT LINE 6666
L13F2:              13F2 DEFINED AT LINE 6679
L13FC:              13FC DEFINED AT LINE 6684
                    > USED AT LINE 7242
L13FD:              13FD DEFINED AT LINE 6686
L13FF:              13FF DEFINED AT LINE 6690
                    > USED AT LINE 6686
L1429:              1429 DEFINED AT LINE 6720
L1425:              142F DEFINED AT LINE 6726
L1441:              1441 DEFINED AT LINE 6738
L1452:              1452 DEFINED AT LINE 6749
                    > USED AT LINE 6743
L147F:              147F DEFINED AT LINE 6773
                    > USED AT LINE 6764
L14CF:              14CF DEFINED AT LINE 6834
                    > USED AT LINE 6729
                    > USED AT LINE 6747
                    > USED AT LINE 6768
                    > USED AT LINE 6771
L14DA:              14DA DEFINED AT LINE 6841
                    > USED AT LINE 6712
                    > USED AT LINE 7255
L14DC:              14DC DEFINED AT LINE 6848
                    > USED AT LINE 6802
                    > USED AT LINE 6827
L14F8:              14F8 DEFINED AT LINE 6874
                    > USED AT LINE 6828
L1504:              1504 DEFINED AT LINE 6881
                    > USED AT LINE 6929
                    > USED AT LINE 6938
                    > USED AT LINE 6945
                    > USED AT LINE 8178
L150B:              150B DEFINED AT LINE 6886
                    > USED AT LINE 6889
L1519:              1519 DEFINED AT LINE 6897
L151E:              151E DEFINED AT LINE 6902
L1521:              1521 DEFINED AT LINE 6905
L1524:              1524 DEFINED AT LINE 6908
L1527:              1527 DEFINED AT LINE 6911
L152A:              152A DEFINED AT LINE 6917
L1537:              1537 DEFINED AT LINE 6933
L153A:              153A DEFINED AT LINE 6937
L153F:              153F DEFINED AT LINE 6942
L1548:              1548 DEFINED AT LINE 6951
                    > USED AT LINE 6937
                    > USED AT LINE 6959
L1557:              1557 DEFINED AT LINE 6966
                    > USED AT LINE 6876
                    > USED AT LINE 6877
                    > USED AT LINE 6893
                    > USED AT LINE 6895
                    > USED AT LINE 6933
                    > USED AT LINE 6942
                    > USED AT LINE 6944
                    > USED AT LINE 6951
L1568:              1568 DEFINED AT LINE 6986
                    > USED AT LINE 6973
L1584:              1584 DEFINED AT LINE 7009
                    > USED AT LINE 6997
L1592:              1592 DEFINED AT LINE 7020
                    > USED AT LINE 7001
L159E:              159E DEFINED AT LINE 7029
                    > USED AT LINE 5741
                    > USED AT LINE 6957
L15A2:              15A2 DEFINED AT LINE 7034
                    > USED AT LINE 7686
L15B1:              15B1 DEFINED AT LINE 7049
                    > USED AT LINE 7040
L15B5:              15B5 DEFINED AT LINE 7060
                    > USED AT LINE 313
                    > USED AT LINE 5611
L15B7:              15B7 DEFINED AT LINE 7064
                    > USED AT LINE 7060
L15C0:              15C0 DEFINED AT LINE 7079
                    > USED AT LINE 6704
                    > USED AT LINE 6734
L15C4:              15C4 DEFINED AT LINE 7084
L15C9:              15C9 DEFINED AT LINE 7089
L15CC:              15CC DEFINED AT LINE 7092
L15CF:              15CF DEFINED AT LINE 7098
L15D4:              15D4 DEFINED AT LINE 7103
L15DB:              15DB DEFINED AT LINE 7114
                    > USED AT LINE 7099
L15E7:              15E7 DEFINED AT LINE 7132
                    > USED AT LINE 7068
L15E8:              15E8 DEFINED AT LINE 7135
                    > USED AT LINE 2102
                    > USED AT LINE 7678
L15F2:              15F2 DEFINED AT LINE 7144
                    > USED AT LINE 7140
L15F4:              15F4 DEFINED AT LINE 7147
                    > USED AT LINE 7149
L15F9:              15F9 DEFINED AT LINE 7159
                    > USED AT LINE 7181
L15FB:              15FB DEFINED AT LINE 7164
                    > USED AT LINE 6897
                    > USED AT LINE 7084
                    > USED AT LINE 7337
                    > USED AT LINE 7468
L1610:              1610 DEFINED AT LINE 7196
                    > USED AT LINE 312
                    > USED AT LINE 6720
L1620:              1620 DEFINED AT LINE 7215
                    > USED AT LINE 7257
                    > USED AT LINE 7288
                    > USED AT LINE 7315
L1625:              1625 DEFINED AT LINE 7218
L162F:              162F DEFINED AT LINE 7239
L1637:              1637 DEFINED AT LINE 7244
                    > USED AT LINE 7280
L1638:              1638 DEFINED AT LINE 7246
L163A:              163A DEFINED AT LINE 7250
                    > USED AT LINE 7246
L1657:              1657 DEFINED AT LINE 7277
L165D:              165D DEFINED AT LINE 7282
                    > USED AT LINE 7307
L165E:              165E DEFINED AT LINE 7284
L1660:              1660 DEFINED AT LINE 7288
                    > USED AT LINE 7284
L1669:              1669 DEFINED AT LINE 7304
L166F:              166F DEFINED AT LINE 7309
                    > USED AT LINE 8003
L1670:              1670 DEFINED AT LINE 7311
L1672:              1672 DEFINED AT LINE 7315
                    > USED AT LINE 7311
L1675:              1675 DEFINED AT LINE 7319
                    > USED AT LINE 7291
L168A:              168A DEFINED AT LINE 7341
L168C:              168C DEFINED AT LINE 7342
L168D:              168D DEFINED AT LINE 7344
L168F:              168F DEFINED AT LINE 7345
L1690:              1690 DEFINED AT LINE 7347
L1692:              1692 DEFINED AT LINE 7348
L1695:              1695 DEFINED AT LINE 7354
L1697:              1697 DEFINED AT LINE 7362
L169C:              169C DEFINED AT LINE 7366
L16B1:              16B1 DEFINED AT LINE 7387
L16B4:              16B4 DEFINED AT LINE 7390
                    > USED AT LINE 7363
L16C3:              16C3 DEFINED AT LINE 7403
                    > USED AT LINE 7426
                    > USED AT LINE 7447
L16C7:              16C7 DEFINED AT LINE 7405
                    > USED AT LINE 7410
L16D2:              16D2 DEFINED AT LINE 7412
                    > USED AT LINE 7407
L16DF:              16DF DEFINED AT LINE 7420
                    > USED AT LINE 7422
L16E8:              16E8 DEFINED AT LINE 7430
                    > USED AT LINE 7413
L1702:              1702 DEFINED AT LINE 7449
                    > USED AT LINE 7415
L1708:              1708 DEFINED AT LINE 7456
                    > USED AT LINE 7405
L1712:              1712 DEFINED AT LINE 7461
                    > USED AT LINE 7535
L1718:              1718 DEFINED AT LINE 7468
L171B:              171B DEFINED AT LINE 7472
L171D:              171D DEFINED AT LINE 7473
L171E:              171E DEFINED AT LINE 7475
L1720:              1720 DEFINED AT LINE 7476
L1721:              1721 DEFINED AT LINE 7478
L1723:              1723 DEFINED AT LINE 7479
L1724:              1724 DEFINED AT LINE 7481
L1726:              1726 DEFINED AT LINE 7482
L1727:              1727 DEFINED AT LINE 7484
L1729:              1729 DEFINED AT LINE 7485
L172A:              172A DEFINED AT LINE 7487
L172C:              172C DEFINED AT LINE 7488
L172D:              172D DEFINED AT LINE 7490
L172F:              172F DEFINED AT LINE 7491
L1730:              1730 DEFINED AT LINE 7493
L1732:              1732 DEFINED AT LINE 7494
L1733:              1733 DEFINED AT LINE 7496
L1735:              1735 DEFINED AT LINE 7497
L1736:              1736 DEFINED AT LINE 7499
L1738:              1738 DEFINED AT LINE 7500
L1739:              1739 DEFINED AT LINE 7502
L173B:              173B DEFINED AT LINE 7503
L173C:              173C DEFINED AT LINE 7505
L173E:              173E DEFINED AT LINE 7506
L173F:              173F DEFINED AT LINE 7508
L1741:              1741 DEFINED AT LINE 7509
L1742:              1742 DEFINED AT LINE 7511
L1744:              1744 DEFINED AT LINE 7512
L1745:              1745 DEFINED AT LINE 7514
L1747:              1747 DEFINED AT LINE 7515
L1748:              1748 DEFINED AT LINE 7517
L174A:              174A DEFINED AT LINE 7518
L174B:              174B DEFINED AT LINE 7520
L174D:              174D DEFINED AT LINE 7521
L174E:              174E DEFINED AT LINE 7523
L1750:              1750 DEFINED AT LINE 7524
L1751:              1751 DEFINED AT LINE 7526
L1753:              1753 DEFINED AT LINE 7532
                    > USED AT LINE 7562
L1756:              1756 DEFINED AT LINE 7534
                    > USED AT LINE 7574
                    > USED AT LINE 7598
L175D:              175D DEFINED AT LINE 7541
L1764:              1764 DEFINED AT LINE 7548
L176B:              176B DEFINED AT LINE 7555
L1770:              1770 DEFINED AT LINE 7559
                    > USED AT LINE 7544
                    > USED AT LINE 7551
L177C:              177C DEFINED AT LINE 7566
L1783:              1783 DEFINED AT LINE 7571
                    > USED AT LINE 7583
L178B:              178B DEFINED AT LINE 7578
L1798:              1798 DEFINED AT LINE 7587
L17A4:              17A4 DEFINED AT LINE 7602
L17AC:              17AC DEFINED AT LINE 7613
L17B0:              17B0 DEFINED AT LINE 7616
L17B2:              17B2 DEFINED AT LINE 7618
                    > USED AT LINE 7614
L17C1:              17C1 DEFINED AT LINE 7634
                    > USED AT LINE 7571
                    > USED AT LINE 7670
L17CF:              17CF DEFINED AT LINE 7648
                    > USED AT LINE 7651
L17D4:              17D4 DEFINED AT LINE 7653
                    > USED AT LINE 7646
L17DA:              17DA DEFINED AT LINE 7660
                    > USED AT LINE 7566
                    > USED AT LINE 7578
                    > USED AT LINE 7580
L17DF:              17DF DEFINED AT LINE 7665
L17E1:              17E1 DEFINED AT LINE 7670
                    > USED AT LINE 7532
                    > USED AT LINE 7590
                    > USED AT LINE 7620
L17E4:              17E4 DEFINED AT LINE 7672
                    > USED AT LINE 7394
                    > USED AT LINE 7399
L17F0:              17F0 DEFINED AT LINE 7684
                    > USED AT LINE 7676
L17FB:              17FB DEFINED AT LINE 7698
                    > USED AT LINE 2151
                    > USED AT LINE 7680
                    > USED AT LINE 7703
                    > USED AT LINE 7715
L1808:              1808 DEFINED AT LINE 7714
                    > USED AT LINE 326
                    > USED AT LINE 1745
                    > USED AT LINE 7602
                    > USED AT LINE 8310
                    > USED AT LINE 8322
L180E:              180E DEFINED AT LINE 7725
                    > USED AT LINE 3668
                    > USED AT LINE 7383
L1815:              1815 DEFINED AT LINE 7733
                    > USED AT LINE 6584
                    > USED AT LINE 7572
L1819:              1819 DEFINED AT LINE 7740
L181B:              181B DEFINED AT LINE 7742
                    > USED AT LINE 7740
L181D:              181D DEFINED AT LINE 7744
                    > USED AT LINE 7742
L1820:              1820 DEFINED AT LINE 7757
                    > USED AT LINE 8279
                    > USED AT LINE 8285
L1832:              1832 DEFINED AT LINE 7769
                    > USED AT LINE 7767
L1837:              1837 DEFINED AT LINE 7774
                    > USED AT LINE 7782
L1839:              1839 DEFINED AT LINE 7776
                    > USED AT LINE 7776
L1843:              1843 DEFINED AT LINE 7782
                    > USED AT LINE 7780
L1847:              1847 DEFINED AT LINE 7784
                    > USED AT LINE 7784
L184F:              184F DEFINED AT LINE 7788
                    > USED AT LINE 7788
L1859:              1859 DEFINED AT LINE 7794
                    > USED AT LINE 7806
L185C:              185C DEFINED AT LINE 7797
                    > USED AT LINE 7797
                    > USED AT LINE 7810
L1862:              1862 DEFINED AT LINE 7802
                    > USED AT LINE 7802
L1864:              1864 DEFINED AT LINE 7804
                    > USED AT LINE 7799
L186D:              186D DEFINED AT LINE 7809
                    > USED AT LINE 7833
L1887:              1887 DEFINED AT LINE 7828
                    > USED AT LINE 7838
L188A:              188A DEFINED AT LINE 7831
                    > USED AT LINE 7792
L188F:              188F DEFINED AT LINE 7837
                    > USED AT LINE 7825
L1892:              1892 DEFINED AT LINE 7840
                    > USED AT LINE 7762
                    > USED AT LINE 7870
L1897:              1897 DEFINED AT LINE 7846
                    > USED AT LINE 7846
L18A7:              18A7 DEFINED AT LINE 7866
                    > USED AT LINE 8301
                    > USED AT LINE 8404
L18B5:              18B5 DEFINED AT LINE 7877
                    > USED AT LINE 7884
                    > USED AT LINE 7897
L18B6:              18B6 DEFINED AT LINE 7879
                    > USED AT LINE 7888
L18B8:              18B8 DEFINED AT LINE 7880
                    > USED AT LINE 7891
L18C7:              18C7 DEFINED AT LINE 7893
                    > USED AT LINE 7901
L18DF:              18DF DEFINED AT LINE 7916
                    > USED AT LINE 7937
L18E7:              18E7 DEFINED AT LINE 7923
                    > USED AT LINE 7917
L18EC:              18EC DEFINED AT LINE 7927
                    > USED AT LINE 7919
L18F0:              18F0 DEFINED AT LINE 7931
                    > USED AT LINE 7912
L18FB:              18FB DEFINED AT LINE 7941
                    > USED AT LINE 8221
L18FC:              18FC DEFINED AT LINE 7945
                    > USED AT LINE 7906
                    > USED AT LINE 7931
L18FE:              18FE DEFINED AT LINE 7946
                    > USED AT LINE 7955
L1911:              1911 DEFINED AT LINE 7965
                    > USED AT LINE 7882
                    > USED AT LINE 7948
L1915:              1915 DEFINED AT LINE 7968
                    > USED AT LINE 7895
                    > USED AT LINE 7903
                    > USED AT LINE 7965
L1917:              1917 DEFINED AT LINE 7969
                    > USED AT LINE 7971
L191B:              191B DEFINED AT LINE 7975
                    > USED AT LINE 7985
L192D:              192D DEFINED AT LINE 8000
L1933:              1933 DEFINED AT LINE 8005
                    > USED AT LINE 8027
L1934:              1934 DEFINED AT LINE 8007
L193C:              193C DEFINED AT LINE 8024
L1943:              1943 DEFINED AT LINE 8029
                    > USED AT LINE 8051
L1944:              1944 DEFINED AT LINE 8031
L1946:              1946 DEFINED AT LINE 8035
L194C:              194C DEFINED AT LINE 8048
L1953:              1953 DEFINED AT LINE 8053
                    > USED AT LINE 8074
L1954:              1954 DEFINED AT LINE 8055
L195E:              195E DEFINED AT LINE 8071
L1966:              1966 DEFINED AT LINE 8076
                    > USED AT LINE 8101
L1967:              1967 DEFINED AT LINE 8078
L1969:              1969 DEFINED AT LINE 8082
L196D:              196D DEFINED AT LINE 8084
L196F:              196F DEFINED AT LINE 8098
L1978:              1978 DEFINED AT LINE 8103
                    > USED AT LINE 8131
L1979:              1979 DEFINED AT LINE 8105
L197B:              197B DEFINED AT LINE 8109
L197D:              197D DEFINED AT LINE 8113
L1983:              1983 DEFINED AT LINE 8128
L1989:              1989 DEFINED AT LINE 8133
                    > USED AT LINE 8687
L198A:              198A DEFINED AT LINE 8135
L198C:              198C DEFINED AT LINE 8139
L19A4:              19A4 DEFINED AT LINE 8154
L19D4:              19D4 DEFINED AT LINE 8177
L19DD:              19DD DEFINED AT LINE 8181
                    > USED AT LINE 8183
L19F3:              19F3 DEFINED AT LINE 8197
                    > USED AT LINE 8226
                    > USED AT LINE 8252
L19FC:              19FC DEFINED AT LINE 8205
L19FF:              19FF DEFINED AT LINE 8207
L1A0E:              1A0E DEFINED AT LINE 8221
                    > USED AT LINE 317
                    > USED AT LINE 342
                    > USED AT LINE 1528
                    > USED AT LINE 2427
                    > USED AT LINE 3837
                    > USED AT LINE 4928
                    > USED AT LINE 5392
                    > USED AT LINE 5768
                    > USED AT LINE 6722
                    > USED AT LINE 7218
                    > USED AT LINE 7438
                    > USED AT LINE 8141
                    > USED AT LINE 8156
                    > USED AT LINE 8201
                    > USED AT LINE 8227
                    > USED AT LINE 8696
L1A10:              1A10 DEFINED AT LINE 8225
                    > USED AT LINE 8011
                    > USED AT LINE 8082
                    > USED AT LINE 8139
L1A3D:              1A3D DEFINED AT LINE 8251
                    > USED AT LINE 8035
                    > USED AT LINE 8059
                    > USED AT LINE 8109
L1A4F:              1A4F DEFINED AT LINE 8263
                    > USED AT LINE 8012
                    > USED AT LINE 8036
L1A51:              1A51 DEFINED AT LINE 8265
                    > USED AT LINE 8263
L1A74:              1A74 DEFINED AT LINE 8293
                    > USED AT LINE 8060
                    > USED AT LINE 8113
                    > USED AT LINE 8154
L1A76:              1A76 DEFINED AT LINE 8295
                    > USED AT LINE 8293
                    > USED AT LINE 8303
                    > USED AT LINE 8349
L1A8D:              1A8D DEFINED AT LINE 8314
L1A93:              1A93 DEFINED AT LINE 8318
L1A95:              1A95 DEFINED AT LINE 8322
                    > USED AT LINE 8308
L1A98:              1A98 DEFINED AT LINE 8324
L1A9F:              1A9F DEFINED AT LINE 8331
                    > USED AT LINE 8318
L1AA7:              1AA7 DEFINED AT LINE 8337
                    > USED AT LINE 8347
L1AA9:              1AA9 DEFINED AT LINE 8340
                    > USED AT LINE 8333
L1AAE:              1AAE DEFINED AT LINE 8345
                    > USED AT LINE 8342
L1AB6:              1AB6 DEFINED AT LINE 8354
                    > USED AT LINE 8267
                    > USED AT LINE 8272
                    > USED AT LINE 8380
                    > USED AT LINE 8393
                    > USED AT LINE 8406
L1AB8:              1AB8 DEFINED AT LINE 8361
                    > USED AT LINE 8061
                    > USED AT LINE 8155
L1ABA:              1ABA DEFINED AT LINE 8363
                    > USED AT LINE 8361
L1ABE:              1ABE DEFINED AT LINE 8370
                    > USED AT LINE 8114
L1AC0:              1AC0 DEFINED AT LINE 8372
                    > USED AT LINE 8370
L1AC8:              1AC8 DEFINED AT LINE 8376
                    > USED AT LINE 8382
L1AD0:              1AD0 DEFINED AT LINE 8386
                    > USED AT LINE 8364
L1ADF:              1ADF DEFINED AT LINE 8395
                    > USED AT LINE 8390
L1AE9:              1AE9 DEFINED AT LINE 8401
                    > USED AT LINE 8398
L1AF4:              1AF4 DEFINED AT LINE 8427
                    > USED AT LINE 8717
                    > USED AT LINE 8924
                    > USED AT LINE 8993
L1AF8:              1AF8 DEFINED AT LINE 8431
                    > USED AT LINE 8433
L1B13:              1B13 DEFINED AT LINE 8465
L1B22:              1B22 DEFINED AT LINE 8483
                    > USED AT LINE 8731
                    > USED AT LINE 8847
L1B28:              1B28 DEFINED AT LINE 8489
                    > USED AT LINE 8485
                    > USED AT LINE 8504
L1B2E:              1B2E DEFINED AT LINE 8496
                    > USED AT LINE 8501
L1B3A:              1B3A DEFINED AT LINE 8511
                    > USED AT LINE 8520
L1B43:              1B43 DEFINED AT LINE 8533
                    > USED AT LINE 8745
                    > USED AT LINE 8767
                    > USED AT LINE 9023
L1B48:              1B48 DEFINED AT LINE 8539
                    > USED AT LINE 8549
L1B53:              1B53 DEFINED AT LINE 8564
                    > USED AT LINE 8752
                    > USED AT LINE 9107
L1B55:              1B55 DEFINED AT LINE 8567
                    > USED AT LINE 8951
                    > USED AT LINE 9096
L1B67:              1B67 DEFINED AT LINE 8597
                    > USED AT LINE 8668
L1B77:              1B77 DEFINED AT LINE 8620
                    > USED AT LINE 8652
L1B83:              1B83 DEFINED AT LINE 8636
                    > USED AT LINE 8622
L1B91:              1B91 DEFINED AT LINE 8657
                    > USED AT LINE 8615
                    > USED AT LINE 8638
L1B9F:              1B9F DEFINED AT LINE 8684
L1BA3:              1BA3 DEFINED AT LINE 8689
                    > USED AT LINE 8709
L1BA4:              1BA4 DEFINED AT LINE 8691
L1BA6:              1BA6 DEFINED AT LINE 8695
L1BAC:              1BAC DEFINED AT LINE 8706
L1BB0:              1BB0 DEFINED AT LINE 8711
                    > USED AT LINE 8916
L1BB1:              1BB1 DEFINED AT LINE 8713
L1BB3:              1BB3 DEFINED AT LINE 8717
                    > USED AT LINE 8698
                    > USED AT LINE 8713
L1BC1:              1BC1 DEFINED AT LINE 8729
                    > USED AT LINE 8723
L1BC9:              1BC9 DEFINED AT LINE 8739
                    > USED AT LINE 8735
L1BCE:              1BCE DEFINED AT LINE 8743
                    > USED AT LINE 8749
L1BE5:              1BE5 DEFINED AT LINE 8771
                    > USED AT LINE 8803
L1BF6:              1BF6 DEFINED AT LINE 8791
                    > USED AT LINE 8796
L1C02:              1C02 DEFINED AT LINE 8817
                    > USED AT LINE 8774
L1C04:              1C04 DEFINED AT LINE 8822
                    > USED AT LINE 8971
                    > USED AT LINE 9135
L1C0C:              1C0C DEFINED AT LINE 8831
                    > USED AT LINE 8850
L1C21:              1C21 DEFINED AT LINE 8858
                    > USED AT LINE 8834
L1C2F:              1C2F DEFINED AT LINE 8876
L1C3B:              1C3B DEFINED AT LINE 8889
                    > USED AT LINE 8867
                    > USED AT LINE 9007
L1C3D:              1C3D DEFINED AT LINE 8896
                    > USED AT LINE 8864
                    > USED AT LINE 8933
                    > USED AT LINE 9004
L1C40:              1C40 DEFINED AT LINE 8898
                    > USED AT LINE 8900
L1C46:              1C46 DEFINED AT LINE 8913
L1C4A:              1C4A DEFINED AT LINE 8918
                    > USED AT LINE 8985
L1C4B:              1C4B DEFINED AT LINE 8920
L1C4D:              1C4D DEFINED AT LINE 8924
                    > USED AT LINE 8920
L1C5D:              1C5D DEFINED AT LINE 8944
                    > USED AT LINE 8958
L1C76:              1C76 DEFINED AT LINE 8982
L1C7A:              1C7A DEFINED AT LINE 8987
                    > USED AT LINE 9150
L1C7B:              1C7B DEFINED AT LINE 8989
L1C7D:              1C7D DEFINED AT LINE 8993
                    > USED AT LINE 8989
L1CA2:              1CA2 DEFINED AT LINE 9041
                    > USED AT LINE 9114
L1CB0:              1CB0 DEFINED AT LINE 9059
                    > USED AT LINE 9052
L1CB3:              1CB3 DEFINED AT LINE 9062
                    > USED AT LINE 9082
L1CB5:              1CB5 DEFINED AT LINE 9064
                    > USED AT LINE 9067
L1CBD:              1CBD DEFINED AT LINE 9071
                    > USED AT LINE 9074
                    > USED AT LINE 9077
L1CCB:              1CCB DEFINED AT LINE 9086
                    > USED AT LINE 9055
L1CE8:              1CE8 DEFINED AT LINE 9114
                    > USED AT LINE 9090
L1CFE:              1CFE DEFINED AT LINE 9131
                    > USED AT LINE 9125
L1D05:              1D05 DEFINED AT LINE 9147
L1D0E:              1D0E DEFINED AT LINE 9152
                    > USED AT LINE 9182
L1D0F:              1D0F DEFINED AT LINE 9154
                    > USED AT LINE 8695
L1D11:              1D11 DEFINED AT LINE 9158
                    > USED AT LINE 9154
L1D18:              1D18 DEFINED AT LINE 9166
                    > USED AT LINE 9162
L1D1C:              1D1C DEFINED AT LINE 9179
L1D21:              1D21 DEFINED AT LINE 9184
                    > USED AT LINE 9256
L1D22:              1D22 DEFINED AT LINE 9186
L1D24:              1D24 DEFINED AT LINE 9190
                    > USED AT LINE 9186
L1D2B:              1D2B DEFINED AT LINE 9195
                    > USED AT LINE 9230
L1D45:              1D45 DEFINED AT LINE 9234
                    > USED AT LINE 9200
L1D50:              1D50 DEFINED AT LINE 9253
L1D58:              1D58 DEFINED AT LINE 9258
                    > USED AT LINE 10254
L1D59:              1D59 DEFINED AT LINE 9260
L1D5B:              1D5B DEFINED AT LINE 9264
                    > USED AT LINE 9260
L1D62:              1D62 DEFINED AT LINE 9271
                    > USED AT LINE 9284
L1D7B:              1D7B DEFINED AT LINE 9313
L1FFB:              1FFB DEFINED AT LINE 10239
                    > USED AT LINE 197
L1FFC:              1FFC DEFINED AT LINE 10246
L1FFD:              1FFD DEFINED AT LINE 10254
L1FFF:              1FFF DEFINED AT LINE 10255
                    > USED AT LINE 390
